/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/after/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/after/index.js ***!
  \*****************************************/
/***/ ((module) => {

eval("module.exports = after\n\nfunction after(count, callback, err_cb) {\n    var bail = false\n    err_cb = err_cb || noop\n    proxy.count = count\n\n    return (count === 0) ? callback() : proxy\n\n    function proxy(err, result) {\n        if (proxy.count <= 0) {\n            throw new Error('after called too many times')\n        }\n        --proxy.count\n\n        // after first error, rest are passed to err_cb\n        if (err) {\n            bail = true\n            callback(err)\n            // future error callbacks will go to error handler\n            callback = err_cb\n        } else if (proxy.count === 0 && !bail) {\n            callback(null, result)\n        }\n    }\n}\n\nfunction noop() {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcz8xODA2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/after/index.js\n");

/***/ }),

/***/ "../../node_modules/arraybuffer.slice/index.js":
/*!*****************************************************!*\
  !*** ../../node_modules/arraybuffer.slice/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcz9lZDg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsc0NBQXNDOztBQUVoRSxrQkFBa0IsZ0JBQWdCO0FBQ2xDLGdCQUFnQixjQUFjO0FBQzlCLG9CQUFvQixhQUFhOztBQUVqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuXG4gKiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBhcnJheWJ1ZmZlci5ieXRlTGVuZ3RoO1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGVuZCA9IGVuZCB8fCBieXRlcztcblxuICBpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHsgcmV0dXJuIGFycmF5YnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpOyB9XG5cbiAgaWYgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSBieXRlczsgfVxuICBpZiAoZW5kIDwgMCkgeyBlbmQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9XG5cbiAgaWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gIH1cblxuICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kIC0gc3RhcnQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQsIGlpID0gMDsgaSA8IGVuZDsgaSsrLCBpaSsrKSB7XG4gICAgcmVzdWx0W2lpXSA9IGFidltpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/arraybuffer.slice/index.js\n");

/***/ }),

/***/ "../../node_modules/backo2/index.js":
/*!******************************************!*\
  !*** ../../node_modules/backo2/index.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanM/MjQ4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/backo2/index.js\n");

/***/ }),

/***/ "../../node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(chars){\n  \"use strict\";\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = chars.indexOf(base64[i]);\n      encoded2 = chars.indexOf(base64[i+1]);\n      encoded3 = chars.indexOf(base64[i+2]);\n      encoded4 = chars.indexOf(base64[i+3]);\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcz8yOTEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLGNBQWM7QUFDaEI7QUFDQTs7QUFFQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFLGNBQWM7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oY2hhcnMpe1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpXSk7XG4gICAgICBlbmNvZGVkMiA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krMV0pO1xuICAgICAgZW5jb2RlZDMgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzJdKTtcbiAgICAgIGVuY29kZWQ0ID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSszXSk7XG5cbiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xuICB9O1xufSkoXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/base64-arraybuffer/lib/base64-arraybuffer.js\n");

/***/ }),

/***/ "../../node_modules/blob/index.js":
/*!****************************************!*\
  !*** ../../node_modules/blob/index.js ***!
  \****************************************/
/***/ ((module) => {

eval("/**\r\n * Create a blob builder even when vendor prefixes exist\r\n */\r\n\r\nvar BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\r\n  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :\r\n  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\r\n  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : \r\n  false;\r\n\r\n/**\r\n * Check if Blob constructor is supported\r\n */\r\n\r\nvar blobSupported = (function() {\r\n  try {\r\n    var a = new Blob(['hi']);\r\n    return a.size === 2;\r\n  } catch(e) {\r\n    return false;\r\n  }\r\n})();\r\n\r\n/**\r\n * Check if Blob constructor supports ArrayBufferViews\r\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\r\n */\r\n\r\nvar blobSupportsArrayBufferView = blobSupported && (function() {\r\n  try {\r\n    var b = new Blob([new Uint8Array([1,2])]);\r\n    return b.size === 2;\r\n  } catch(e) {\r\n    return false;\r\n  }\r\n})();\r\n\r\n/**\r\n * Check if BlobBuilder is supported\r\n */\r\n\r\nvar blobBuilderSupported = BlobBuilder\r\n  && BlobBuilder.prototype.append\r\n  && BlobBuilder.prototype.getBlob;\r\n\r\n/**\r\n * Helper function that maps ArrayBufferViews to ArrayBuffers\r\n * Used by BlobBuilder constructor and old browsers that didn't\r\n * support it in the Blob constructor.\r\n */\r\n\r\nfunction mapArrayBufferViews(ary) {\r\n  return ary.map(function(chunk) {\r\n    if (chunk.buffer instanceof ArrayBuffer) {\r\n      var buf = chunk.buffer;\r\n\r\n      // if this is a subarray, make a copy so we only\r\n      // include the subarray region from the underlying buffer\r\n      if (chunk.byteLength !== buf.byteLength) {\r\n        var copy = new Uint8Array(chunk.byteLength);\r\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\r\n        buf = copy.buffer;\r\n      }\r\n\r\n      return buf;\r\n    }\r\n\r\n    return chunk;\r\n  });\r\n}\r\n\r\nfunction BlobBuilderConstructor(ary, options) {\r\n  options = options || {};\r\n\r\n  var bb = new BlobBuilder();\r\n  mapArrayBufferViews(ary).forEach(function(part) {\r\n    bb.append(part);\r\n  });\r\n\r\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\r\n};\r\n\r\nfunction BlobConstructor(ary, options) {\r\n  return new Blob(mapArrayBufferViews(ary), options || {});\r\n};\r\n\r\nif (typeof Blob !== 'undefined') {\r\n  BlobBuilderConstructor.prototype = Blob.prototype;\r\n  BlobConstructor.prototype = Blob.prototype;\r\n}\r\n\r\nmodule.exports = (function() {\r\n  if (blobSupported) {\r\n    return blobSupportsArrayBufferView ? Blob : BlobConstructor;\r\n  } else if (blobBuilderSupported) {\r\n    return BlobBuilderConstructor;\r\n  } else {\r\n    return undefined;\r\n  }\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9ibG9iL2luZGV4LmpzPzRkMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvYmxvYi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGUgYSBibG9iIGJ1aWxkZXIgZXZlbiB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxyXG4gKi9cclxuXHJcbnZhciBCbG9iQnVpbGRlciA9IHR5cGVvZiBCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIFdlYktpdEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IFdlYktpdEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgTVNCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNU0Jsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgTW96QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTW96QmxvYkJ1aWxkZXIgOiBcclxuICBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIHN1cHBvcnRlZFxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7XHJcbiAgICByZXR1cm4gYS5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIHN1cHBvcnRzIEFycmF5QnVmZmVyVmlld3NcclxuICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS5cclxuICovXHJcblxyXG52YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBiID0gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KFsxLDJdKV0pO1xyXG4gICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn0pKCk7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYkJ1aWxkZXIgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JCdWlsZGVyU3VwcG9ydGVkID0gQmxvYkJ1aWxkZXJcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuYXBwZW5kXHJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7XHJcblxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVyc1xyXG4gKiBVc2VkIGJ5IEJsb2JCdWlsZGVyIGNvbnN0cnVjdG9yIGFuZCBvbGQgYnJvd3NlcnMgdGhhdCBkaWRuJ3RcclxuICogc3VwcG9ydCBpdCBpbiB0aGUgQmxvYiBjb25zdHJ1Y3Rvci5cclxuICovXHJcblxyXG5mdW5jdGlvbiBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSkge1xyXG4gIHJldHVybiBhcnkubWFwKGZ1bmN0aW9uKGNodW5rKSB7XHJcbiAgICBpZiAoY2h1bmsuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtcclxuXHJcbiAgICAgIC8vIGlmIHRoaXMgaXMgYSBzdWJhcnJheSwgbWFrZSBhIGNvcHkgc28gd2Ugb25seVxyXG4gICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXJcclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IGJ1Zi5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGNvcHkgPSBuZXcgVWludDhBcnJheShjaHVuay5ieXRlTGVuZ3RoKTtcclxuICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTtcclxuICAgICAgICBidWYgPSBjb3B5LmJ1ZmZlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGJ1ZjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2h1bms7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gIHZhciBiYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xyXG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KS5mb3JFYWNoKGZ1bmN0aW9uKHBhcnQpIHtcclxuICAgIGJiLmFwcGVuZChwYXJ0KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xyXG4gIHJldHVybiBuZXcgQmxvYihtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSksIG9wdGlvbnMgfHwge30pO1xyXG59O1xyXG5cclxuaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJykge1xyXG4gIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbiAgQmxvYkNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEJsb2IucHJvdG90eXBlO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcclxuICBpZiAoYmxvYlN1cHBvcnRlZCkge1xyXG4gICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IEJsb2IgOiBCbG9iQ29uc3RydWN0b3I7XHJcbiAgfSBlbHNlIGlmIChibG9iQnVpbGRlclN1cHBvcnRlZCkge1xyXG4gICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59KSgpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/blob/index.js\n");

/***/ }),

/***/ "../api/lib/esm/api/api.js":
/*!*********************************!*\
  !*** ../api/lib/esm/api/api.js ***!
  \*********************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL2xpYi9lc20vYXBpL2FwaS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBpL2xpYi9lc20vYXBpL2FwaS5qcz85OTM4Il0sInNvdXJjZXNDb250ZW50IjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../api/lib/esm/api/api.js\n");

/***/ }),

/***/ "../api/lib/esm/api/app.js":
/*!*********************************!*\
  !*** ../api/lib/esm/api/app.js ***!
  \*********************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL2xpYi9lc20vYXBpL2FwcC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBpL2xpYi9lc20vYXBpL2FwcC5qcz9hYTc4Il0sInNvdXJjZXNDb250ZW50IjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../api/lib/esm/api/app.js\n");

/***/ }),

/***/ "../api/lib/esm/api/component.js":
/*!***************************************!*\
  !*** ../api/lib/esm/api/component.js ***!
  \***************************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL2xpYi9lc20vYXBpL2NvbXBvbmVudC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBpL2xpYi9lc20vYXBpL2NvbXBvbmVudC5qcz9iNzNhIl0sInNvdXJjZXNDb250ZW50IjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../api/lib/esm/api/component.js\n");

/***/ }),

/***/ "../api/lib/esm/api/context.js":
/*!*************************************!*\
  !*** ../api/lib/esm/api/context.js ***!
  \*************************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL2xpYi9lc20vYXBpL2NvbnRleHQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9jb250ZXh0LmpzPzdlNDAiXSwic291cmNlc0NvbnRlbnQiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../api/lib/esm/api/context.js\n");

/***/ }),

/***/ "../api/lib/esm/api/hooks.js":
/*!***********************************!*\
  !*** ../api/lib/esm/api/hooks.js ***!
  \***********************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL2xpYi9lc20vYXBpL2hvb2tzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcGkvbGliL2VzbS9hcGkvaG9va3MuanM/OGE0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../api/lib/esm/api/hooks.js\n");

/***/ }),

/***/ "../api/lib/esm/api/index.js":
/*!***********************************!*\
  !*** ../api/lib/esm/api/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"../api/lib/esm/api/api.js\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _api__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _api__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app */ \"../api/lib/esm/api/app.js\");\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_app__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _app__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _app__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component */ \"../api/lib/esm/api/component.js\");\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_component__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _component__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _component__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context */ \"../api/lib/esm/api/context.js\");\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_context__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _context__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _context__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks */ \"../api/lib/esm/api/hooks.js\");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_hooks__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _hooks__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _hooks__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */ \"../api/lib/esm/api/util.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_util__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _util__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _util__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9pbmRleC5qcz8zNWY0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0I7QUFDQTtBQUNNO0FBQ0Y7QUFDRjtBQUNEIiwiZmlsZSI6Ii4uL2FwaS9saWIvZXNtL2FwaS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbmV4cG9ydCAqIGZyb20gJy4vYXBwJztcbmV4cG9ydCAqIGZyb20gJy4vY29tcG9uZW50JztcbmV4cG9ydCAqIGZyb20gJy4vY29udGV4dCc7XG5leHBvcnQgKiBmcm9tICcuL2hvb2tzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbCc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../api/lib/esm/api/index.js\n");

/***/ }),

/***/ "../api/lib/esm/api/util.js":
/*!**********************************!*\
  !*** ../api/lib/esm/api/util.js ***!
  \**********************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL2xpYi9lc20vYXBpL3V0aWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS91dGlsLmpzPzdlYjMiXSwic291cmNlc0NvbnRlbnQiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../api/lib/esm/api/util.js\n");

/***/ }),

/***/ "../api/lib/esm/const.js":
/*!*******************************!*\
  !*** ../api/lib/esm/const.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HOOK_SETUP\": () => (/* binding */ HOOK_SETUP)\n/* harmony export */ });\nvar HOOK_SETUP = 'devtools-plugin:setup';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2NvbnN0LmpzPzE4MDUiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBT0EsR0FBSyxDQUFDLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyIsImZpbGUiOiIuLi9hcGkvbGliL2VzbS9jb25zdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBIT09LX1NFVFVQID0gJ2RldnRvb2xzLXBsdWdpbjpzZXR1cCc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../api/lib/esm/const.js\n");

/***/ }),

/***/ "../api/lib/esm/env.js":
/*!*****************************!*\
  !*** ../api/lib/esm/env.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getDevtoolsGlobalHook\": () => (/* binding */ getDevtoolsGlobalHook),\n/* harmony export */   \"getTarget\": () => (/* binding */ getTarget)\n/* harmony export */ });\nfunction getDevtoolsGlobalHook() {\n    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;\n}\nfunction getTarget() {\n    // @ts-ignore\n    return typeof navigator !== 'undefined'\n        ? window\n        : typeof __webpack_require__.g !== 'undefined'\n            ? __webpack_require__.g\n            : {};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2Vudi5qcz9jZGYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBUyxxQkFBcUIsR0FBRztBQUN4QyxJQUFJLE9BQU8sU0FBUyxFQUFFLENBQUMsNEJBQTRCLENBQUM7QUFDcEQsQ0FBQztBQUNNLFNBQVMsU0FBUyxHQUFHO0FBQzVCO0FBQ0EsSUFBSSxPQUFPLE9BQU8sU0FBUyxLQUFLLFdBQVc7QUFDM0MsVUFBVSxNQUFNO0FBQ2hCLFVBQVUsT0FBTyxxQkFBTSxLQUFLLFdBQVc7QUFDdkMsY0FBYyxxQkFBTTtBQUNwQixjQUFjLEVBQUUsQ0FBQztBQUNqQixDQUFDIiwiZmlsZSI6Ii4uL2FwaS9saWIvZXNtL2Vudi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXREZXZ0b29sc0dsb2JhbEhvb2soKSB7XG4gICAgcmV0dXJuIGdldFRhcmdldCgpLl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgICAgIDoge307XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../api/lib/esm/env.js\n");

/***/ }),

/***/ "../api/lib/esm/index.js":
/*!*******************************!*\
  !*** ../api/lib/esm/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setupDevtoolsPlugin\": () => (/* binding */ setupDevtoolsPlugin)\n/* harmony export */ });\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./env */ \"../api/lib/esm/env.js\");\n/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./const */ \"../api/lib/esm/const.js\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"../api/lib/esm/api/index.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _api__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"setupDevtoolsPlugin\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _api__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\nfunction setupDevtoolsPlugin(pluginDescriptor, setupFn) {\n    var hook = (0,_env__WEBPACK_IMPORTED_MODULE_1__.getDevtoolsGlobalHook)();\n    if (hook) {\n        hook.emit(_const__WEBPACK_IMPORTED_MODULE_2__.HOOK_SETUP, pluginDescriptor, setupFn);\n    }\n    else {\n        var target = (0,_env__WEBPACK_IMPORTED_MODULE_1__.getTarget)();\n        var list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];\n        list.push({\n            pluginDescriptor: pluginDescriptor,\n            setupFn: setupFn\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2luZGV4LmpzPzcyMDUiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBeUQ7QUFDcEI7QUFDZjtBQUNmLFNBQVMsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFO0FBQy9ELElBQUlBLEdBQUssQ0FBQyxJQUFJLEdBQUcsMkRBQXFCLEVBQUUsQ0FBQztBQUN6QyxJQUFJLElBQUksSUFBSSxFQUFFO0FBQ2QsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDhDQUFVLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekQsS0FBSztBQUNMLFNBQVM7QUFDVCxRQUFRQSxHQUFLLENBQUMsTUFBTSxHQUFHLCtDQUFTLEVBQUUsQ0FBQztBQUNuQyxRQUFRQSxHQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsR0FBRyxNQUFNLENBQUMsd0JBQXdCLElBQUksRUFBRSxDQUFDO0FBQzdGLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNsQiw4QkFBWSxnQkFBZ0I7QUFDNUIscUJBQVksT0FBTztBQUNuQixTQUFTLENBQUMsQ0FBQztBQUNYLEtBQUs7QUFDTCxDQUFDIiwiZmlsZSI6Ii4uL2FwaS9saWIvZXNtL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VGFyZ2V0LCBnZXREZXZ0b29sc0dsb2JhbEhvb2sgfSBmcm9tICcuL2Vudic7XG5pbXBvcnQgeyBIT09LX1NFVFVQIH0gZnJvbSAnLi9jb25zdCc7XG5leHBvcnQgKiBmcm9tICcuL2FwaSc7XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBEZXZ0b29sc1BsdWdpbihwbHVnaW5EZXNjcmlwdG9yLCBzZXR1cEZuKSB7XG4gICAgY29uc3QgaG9vayA9IGdldERldnRvb2xzR2xvYmFsSG9vaygpO1xuICAgIGlmIChob29rKSB7XG4gICAgICAgIGhvb2suZW1pdChIT09LX1NFVFVQLCBwbHVnaW5EZXNjcmlwdG9yLCBzZXR1cEZuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldCgpO1xuICAgICAgICBjb25zdCBsaXN0ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18gfHwgW107XG4gICAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgICAgICBwbHVnaW5EZXNjcmlwdG9yLFxuICAgICAgICAgICAgc2V0dXBGblxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../api/lib/esm/index.js\n");

/***/ }),

/***/ "../app-backend-api/lib/api.js":
/*!*************************************!*\
  !*** ../app-backend-api/lib/api.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DevtoolsPluginApiInstance = exports.DevtoolsApi = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar hooks_1 = __webpack_require__(/*! ./hooks */ \"../app-backend-api/lib/hooks.js\");\nvar backendOn;\nvar pluginOn = [];\nvar DevtoolsApi = function DevtoolsApi(bridge, ctx) {\n    this.bridge = bridge;\n    this.ctx = ctx;\n    if (!backendOn) {\n        backendOn = new hooks_1.DevtoolsHookable(ctx);\n    }\n};\n\nvar prototypeAccessors = { on: { configurable: true } };\nprototypeAccessors.on.get = function () {\n    return backendOn;\n};\nDevtoolsApi.prototype.callHook = async function callHook (eventType, payload, ctx) {\n        if ( ctx === void 0 ) ctx = this.ctx;\n\n    payload = await backendOn.callHandlers(eventType, payload, ctx);\n    for (var on of pluginOn) {\n        payload = await on.callHandlers(eventType, payload, ctx);\n    }\n    return payload;\n};\nDevtoolsApi.prototype.transformCall = async function transformCall (callName) {\n        var args = [], len = arguments.length - 1;\n        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n    var payload = await this.callHook(\"transformCall\" /* TRANSFORM_CALL */, {\n        callName: callName,\n        inArgs: args,\n        outArgs: args.slice()\n    });\n    return payload.outArgs;\n};\nDevtoolsApi.prototype.getAppRecordName = async function getAppRecordName (app, id) {\n    var payload = await this.callHook(\"getAppRecordName\" /* GET_APP_RECORD_NAME */, {\n        app: app,\n        name: null\n    });\n    if (payload.name) {\n        return payload.name;\n    }\n    else {\n        return (\"App \" + (id + 1));\n    }\n};\nDevtoolsApi.prototype.getAppRootInstance = async function getAppRootInstance (app) {\n    var payload = await this.callHook(\"getAppRootInstance\" /* GET_APP_ROOT_INSTANCE */, {\n        app: app,\n        root: null\n    });\n    return payload.root;\n};\nDevtoolsApi.prototype.registerApplication = async function registerApplication (app) {\n    await this.callHook(\"registerApplication\" /* REGISTER_APPLICATION */, {\n        app: app\n    });\n};\nDevtoolsApi.prototype.walkComponentTree = async function walkComponentTree (instance, maxDepth, filter) {\n        if ( maxDepth === void 0 ) maxDepth = -1;\n        if ( filter === void 0 ) filter = null;\n\n    var payload = await this.callHook(\"walkComponentTree\" /* WALK_COMPONENT_TREE */, {\n        componentInstance: instance,\n        componentTreeData: null,\n        maxDepth: maxDepth,\n        filter: filter\n    });\n    return payload.componentTreeData;\n};\nDevtoolsApi.prototype.visitComponentTree = async function visitComponentTree (instance, treeNode, filter, app) {\n        if ( filter === void 0 ) filter = null;\n\n    var payload = await this.callHook(\"visitComponentTree\" /* VISIT_COMPONENT_TREE */, {\n        app: app,\n        componentInstance: instance,\n        treeNode: treeNode,\n        filter: filter\n    });\n    return payload.treeNode;\n};\nDevtoolsApi.prototype.walkComponentParents = async function walkComponentParents (instance) {\n    var payload = await this.callHook(\"walkComponentParents\" /* WALK_COMPONENT_PARENTS */, {\n        componentInstance: instance,\n        parentInstances: []\n    });\n    return payload.parentInstances;\n};\nDevtoolsApi.prototype.inspectComponent = async function inspectComponent (instance, app) {\n    var payload = await this.callHook(\"inspectComponent\" /* INSPECT_COMPONENT */, {\n        app: app,\n        componentInstance: instance,\n        instanceData: null\n    });\n    return payload.instanceData;\n};\nDevtoolsApi.prototype.getComponentBounds = async function getComponentBounds (instance) {\n    var payload = await this.callHook(\"getComponentBounds\" /* GET_COMPONENT_BOUNDS */, {\n        componentInstance: instance,\n        bounds: null\n    });\n    return payload.bounds;\n};\nDevtoolsApi.prototype.getComponentName = async function getComponentName (instance) {\n    var payload = await this.callHook(\"getComponentName\" /* GET_COMPONENT_NAME */, {\n        componentInstance: instance,\n        name: null\n    });\n    return payload.name;\n};\nDevtoolsApi.prototype.getComponentInstances = async function getComponentInstances (app) {\n    var payload = await this.callHook(\"getComponentInstances\" /* GET_COMPONENT_INSTANCES */, {\n        app: app,\n        componentInstances: []\n    });\n    return payload.componentInstances;\n};\nDevtoolsApi.prototype.getElementComponent = async function getElementComponent (element) {\n    var payload = await this.callHook(\"getElementComponent\" /* GET_ELEMENT_COMPONENT */, {\n        element: element,\n        componentInstance: null\n    });\n    return payload.componentInstance;\n};\nDevtoolsApi.prototype.getComponentRootElements = async function getComponentRootElements (instance) {\n    var payload = await this.callHook(\"getComponentRootElements\" /* GET_COMPONENT_ROOT_ELEMENTS */, {\n        componentInstance: instance,\n        rootElements: []\n    });\n    return payload.rootElements;\n};\nDevtoolsApi.prototype.editComponentState = async function editComponentState (instance, dotPath, type, state, app) {\n    var arrayPath = dotPath.split('.');\n    var payload = await this.callHook(\"editComponentState\" /* EDIT_COMPONENT_STATE */, {\n        app: app,\n        componentInstance: instance,\n        path: arrayPath,\n        type: type,\n        state: state,\n        set: function (object, path, value, cb) {\n                if ( path === void 0 ) path = arrayPath;\n                if ( value === void 0 ) value = state.value;\n\n                return shared_utils_1.set(object, path, value, cb || createDefaultSetCallback(state));\n        }\n    });\n    return payload.componentInstance;\n};\nDevtoolsApi.prototype.getComponentDevtoolsOptions = async function getComponentDevtoolsOptions (instance) {\n    var payload = await this.callHook(\"getAppDevtoolsOptions\" /* GET_COMPONENT_DEVTOOLS_OPTIONS */, {\n        componentInstance: instance,\n        options: null\n    });\n    return payload.options || {};\n};\nDevtoolsApi.prototype.getComponentRenderCode = async function getComponentRenderCode (instance) {\n    var payload = await this.callHook(\"getComponentRenderCode\" /* GET_COMPONENT_RENDER_CODE */, {\n        componentInstance: instance,\n        code: null\n    });\n    return {\n        code: payload.code\n    };\n};\nDevtoolsApi.prototype.inspectTimelineEvent = async function inspectTimelineEvent (eventData, app) {\n    var payload = await this.callHook(\"inspectTimelineEvent\" /* INSPECT_TIMELINE_EVENT */, {\n        event: eventData.event,\n        layerId: eventData.layerId,\n        app: app,\n        data: eventData.event.data,\n        all: eventData.all\n    });\n    return payload.data;\n};\nDevtoolsApi.prototype.clearTimeline = async function clearTimeline () {\n    await this.callHook(\"timelineCleared\" /* TIMELINE_CLEARED */, {});\n};\nDevtoolsApi.prototype.getInspectorTree = async function getInspectorTree (inspectorId, app, filter) {\n    var payload = await this.callHook(\"getInspectorTree\" /* GET_INSPECTOR_TREE */, {\n        inspectorId: inspectorId,\n        app: app,\n        filter: filter,\n        rootNodes: []\n    });\n    return payload.rootNodes;\n};\nDevtoolsApi.prototype.getInspectorState = async function getInspectorState (inspectorId, app, nodeId) {\n    var payload = await this.callHook(\"getInspectorState\" /* GET_INSPECTOR_STATE */, {\n        inspectorId: inspectorId,\n        app: app,\n        nodeId: nodeId,\n        state: null\n    });\n    return payload.state;\n};\nDevtoolsApi.prototype.editInspectorState = async function editInspectorState (inspectorId, app, nodeId, dotPath, type, state) {\n    var arrayPath = dotPath.split('.');\n    await this.callHook(\"editInspectorState\" /* EDIT_INSPECTOR_STATE */, {\n        inspectorId: inspectorId,\n        app: app,\n        nodeId: nodeId,\n        path: arrayPath,\n        type: type,\n        state: state,\n        set: function (object, path, value, cb) {\n                if ( path === void 0 ) path = arrayPath;\n                if ( value === void 0 ) value = state.value;\n\n                return shared_utils_1.set(object, path, value, cb || createDefaultSetCallback(state));\n        }\n    });\n};\n\nObject.defineProperties( DevtoolsApi.prototype, prototypeAccessors );\nexports.DevtoolsApi = DevtoolsApi;\nfunction createDefaultSetCallback(state) {\n    return function (obj, field, value) {\n        if (state.remove || state.newKey) {\n            if (Array.isArray(obj)) {\n                obj.splice(field, 1);\n            }\n            else {\n                delete obj[field];\n            }\n        }\n        if (!state.remove) {\n            obj[state.newKey || field] = value;\n        }\n    };\n}\nvar DevtoolsPluginApiInstance = function DevtoolsPluginApiInstance(plugin, ctx) {\n    this.bridge = ctx.bridge;\n    this.ctx = ctx;\n    this.plugin = plugin;\n    this.on = new hooks_1.DevtoolsHookable(ctx, plugin);\n    pluginOn.push(this.on);\n};\n\nvar prototypeAccessors$1 = { enabled: { configurable: true } };\n// Plugin API\nDevtoolsPluginApiInstance.prototype.notifyComponentUpdate = async function notifyComponentUpdate (instance) {\n        var ref;\n\n        if ( instance === void 0 ) instance = null;\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.COMPONENTS))\n        { return; }\n    if (instance) {\n        (ref = this.ctx.hook).emit.apply(ref, [ shared_utils_1.HookEvents.COMPONENT_UPDATED ].concat( await this.ctx.api.transformCall(shared_utils_1.HookEvents.COMPONENT_UPDATED, instance) ));\n    }\n    else {\n        this.ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_UPDATED);\n    }\n};\nDevtoolsPluginApiInstance.prototype.addTimelineLayer = function addTimelineLayer (options) {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.TIMELINE))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.TIMELINE_LAYER_ADDED, options, this.plugin);\n    return true;\n};\nDevtoolsPluginApiInstance.prototype.addTimelineEvent = function addTimelineEvent (options) {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.TIMELINE))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.TIMELINE_EVENT_ADDED, options, this.plugin);\n    return true;\n};\nDevtoolsPluginApiInstance.prototype.addInspector = function addInspector (options) {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_ADD, options, this.plugin);\n    return true;\n};\nDevtoolsPluginApiInstance.prototype.sendInspectorTree = function sendInspectorTree (inspectorId) {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_TREE, inspectorId, this.plugin);\n    return true;\n};\nDevtoolsPluginApiInstance.prototype.sendInspectorState = function sendInspectorState (inspectorId) {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_STATE, inspectorId, this.plugin);\n    return true;\n};\nDevtoolsPluginApiInstance.prototype.selectInspectorNode = function selectInspectorNode (inspectorId, nodeId) {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SELECT_NODE, inspectorId, nodeId, this.plugin);\n    return true;\n};\nDevtoolsPluginApiInstance.prototype.getComponentBounds = function getComponentBounds (instance) {\n    return this.ctx.api.getComponentBounds(instance);\n};\nDevtoolsPluginApiInstance.prototype.getComponentName = function getComponentName (instance) {\n    return this.ctx.api.getComponentName(instance);\n};\nDevtoolsPluginApiInstance.prototype.getComponentInstances = function getComponentInstances (app) {\n    return this.ctx.api.getComponentInstances(app);\n};\nDevtoolsPluginApiInstance.prototype.highlightElement = function highlightElement (instance) {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.COMPONENTS))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_HIGHLIGHT, instance.__VUE_DEVTOOLS_UID__, this.plugin);\n    return true;\n};\nDevtoolsPluginApiInstance.prototype.unhighlightElement = function unhighlightElement () {\n    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.COMPONENTS))\n        { return false; }\n    this.ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_UNHIGHLIGHT, this.plugin);\n    return true;\n};\nprototypeAccessors$1.enabled.get = function () {\n    return shared_utils_1.hasPluginPermission(this.plugin.descriptor.id, shared_utils_1.PluginPermission.ENABLED);\n};\nDevtoolsPluginApiInstance.prototype.hasPermission = function hasPermission (permission) {\n    return shared_utils_1.hasPluginPermission(this.plugin.descriptor.id, permission);\n};\n\nObject.defineProperties( DevtoolsPluginApiInstance.prototype, prototypeAccessors$1 );\nexports.DevtoolsPluginApiInstance = DevtoolsPluginApiInstance;\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-api/lib/api.js\n");

/***/ }),

/***/ "../app-backend-api/lib/app-record.js":
/*!********************************************!*\
  !*** ../app-backend-api/lib/app-record.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=app-record.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvYXBwLXJlY29yZC5qcz9kMmRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQiLCJmaWxlIjoiLi4vYXBwLWJhY2tlbmQtYXBpL2xpYi9hcHAtcmVjb3JkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcmVjb3JkLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-api/lib/app-record.js\n");

/***/ }),

/***/ "../app-backend-api/lib/backend-context.js":
/*!*************************************************!*\
  !*** ../app-backend-api/lib/backend-context.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createBackendContext = void 0;\nvar api_1 = __webpack_require__(/*! ./api */ \"../app-backend-api/lib/api.js\");\nfunction createBackendContext(options) {\n    var ctx = {\n        bridge: options.bridge,\n        hook: options.hook,\n        api: null,\n        appRecords: [],\n        currentTab: null,\n        currentAppRecord: null,\n        currentInspectedComponentId: null,\n        plugins: [],\n        currentPlugin: null,\n        timelineLayers: [],\n        nextTimelineEventId: 0,\n        timelineEventMap: new Map(),\n        perfUniqueGroupId: 0,\n        customInspectors: []\n    };\n    ctx.api = new api_1.DevtoolsApi(options.bridge, ctx);\n    return ctx;\n}\nexports.createBackendContext = createBackendContext;\n//# sourceMappingURL=backend-context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvYmFja2VuZC1jb250ZXh0LmpzPzA5Y2UiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsNEJBQTRCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDdENBLEdBQUssQ0FBQyxLQUFLLEdBQUcsbUJBQU8sQ0FBQyw0Q0FBTyxDQUFDLENBQUM7QUFDL0IsU0FBUyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7QUFDdkMsSUFBSUEsR0FBSyxDQUFDLEdBQUcsR0FBRztBQUNoQixRQUFRLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtBQUM5QixRQUFRLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUMxQixRQUFRLEdBQUcsRUFBRSxJQUFJO0FBQ2pCLFFBQVEsVUFBVSxFQUFFLEVBQUU7QUFDdEIsUUFBUSxVQUFVLEVBQUUsSUFBSTtBQUN4QixRQUFRLGdCQUFnQixFQUFFLElBQUk7QUFDOUIsUUFBUSwyQkFBMkIsRUFBRSxJQUFJO0FBQ3pDLFFBQVEsT0FBTyxFQUFFLEVBQUU7QUFDbkIsUUFBUSxhQUFhLEVBQUUsSUFBSTtBQUMzQixRQUFRLGNBQWMsRUFBRSxFQUFFO0FBQzFCLFFBQVEsbUJBQW1CLEVBQUUsQ0FBQztBQUM5QixRQUFRLGdCQUFnQixFQUFFLElBQUksR0FBRyxFQUFFO0FBQ25DLFFBQVEsaUJBQWlCLEVBQUUsQ0FBQztBQUM1QixRQUFRLGdCQUFnQixFQUFFLEVBQUU7QUFDNUIsS0FBSyxDQUFDO0FBQ04sSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pELElBQUksT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBQ0QsNEJBQTRCLEdBQUcsb0JBQW9CLENBQUM7QUFDcEQiLCJmaWxlIjoiLi4vYXBwLWJhY2tlbmQtYXBpL2xpYi9iYWNrZW5kLWNvbnRleHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQmFja2VuZENvbnRleHQgPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCIuL2FwaVwiKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhY2tlbmRDb250ZXh0KG9wdGlvbnMpIHtcbiAgICBjb25zdCBjdHggPSB7XG4gICAgICAgIGJyaWRnZTogb3B0aW9ucy5icmlkZ2UsXG4gICAgICAgIGhvb2s6IG9wdGlvbnMuaG9vayxcbiAgICAgICAgYXBpOiBudWxsLFxuICAgICAgICBhcHBSZWNvcmRzOiBbXSxcbiAgICAgICAgY3VycmVudFRhYjogbnVsbCxcbiAgICAgICAgY3VycmVudEFwcFJlY29yZDogbnVsbCxcbiAgICAgICAgY3VycmVudEluc3BlY3RlZENvbXBvbmVudElkOiBudWxsLFxuICAgICAgICBwbHVnaW5zOiBbXSxcbiAgICAgICAgY3VycmVudFBsdWdpbjogbnVsbCxcbiAgICAgICAgdGltZWxpbmVMYXllcnM6IFtdLFxuICAgICAgICBuZXh0VGltZWxpbmVFdmVudElkOiAwLFxuICAgICAgICB0aW1lbGluZUV2ZW50TWFwOiBuZXcgTWFwKCksXG4gICAgICAgIHBlcmZVbmlxdWVHcm91cElkOiAwLFxuICAgICAgICBjdXN0b21JbnNwZWN0b3JzOiBbXVxuICAgIH07XG4gICAgY3R4LmFwaSA9IG5ldyBhcGlfMS5EZXZ0b29sc0FwaShvcHRpb25zLmJyaWRnZSwgY3R4KTtcbiAgICByZXR1cm4gY3R4O1xufVxuZXhwb3J0cy5jcmVhdGVCYWNrZW5kQ29udGV4dCA9IGNyZWF0ZUJhY2tlbmRDb250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2VuZC1jb250ZXh0LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-api/lib/backend-context.js\n");

/***/ }),

/***/ "../app-backend-api/lib/backend.js":
/*!*****************************************!*\
  !*** ../app-backend-api/lib/backend.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BuiltinBackendFeature = void 0;\nvar BuiltinBackendFeature;\n(function (BuiltinBackendFeature) {\n    BuiltinBackendFeature[\"COMPONENTS\"] = \"components\";\n    BuiltinBackendFeature[\"EVENTS\"] = \"events\";\n    BuiltinBackendFeature[\"VUEX\"] = \"vuex\";\n    BuiltinBackendFeature[\"FLUSH\"] = \"flush\";\n})(BuiltinBackendFeature = exports.BuiltinBackendFeature || (exports.BuiltinBackendFeature = {}));\n//# sourceMappingURL=backend.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvYmFja2VuZC5qcz82NWViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsNkJBQTZCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDdkMsSUFBSSxxQkFBcUIsQ0FBQztBQUMxQixDQUFDLFVBQVUscUJBQXFCLEVBQUU7QUFDbEMsSUFBSSxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxZQUFZLENBQUM7QUFDdkQsSUFBSSxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUM7QUFDL0MsSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7QUFDM0MsSUFBSSxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDN0MsQ0FBQyxDQUFDLENBQUMscUJBQXFCLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixJQUFJLENBQUMsNkJBQTZCLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsRyIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC1hcGkvbGliL2JhY2tlbmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVpbHRpbkJhY2tlbmRGZWF0dXJlID0gdm9pZCAwO1xudmFyIEJ1aWx0aW5CYWNrZW5kRmVhdHVyZTtcbihmdW5jdGlvbiAoQnVpbHRpbkJhY2tlbmRGZWF0dXJlKSB7XG4gICAgQnVpbHRpbkJhY2tlbmRGZWF0dXJlW1wiQ09NUE9ORU5UU1wiXSA9IFwiY29tcG9uZW50c1wiO1xuICAgIEJ1aWx0aW5CYWNrZW5kRmVhdHVyZVtcIkVWRU5UU1wiXSA9IFwiZXZlbnRzXCI7XG4gICAgQnVpbHRpbkJhY2tlbmRGZWF0dXJlW1wiVlVFWFwiXSA9IFwidnVleFwiO1xuICAgIEJ1aWx0aW5CYWNrZW5kRmVhdHVyZVtcIkZMVVNIXCJdID0gXCJmbHVzaFwiO1xufSkoQnVpbHRpbkJhY2tlbmRGZWF0dXJlID0gZXhwb3J0cy5CdWlsdGluQmFja2VuZEZlYXR1cmUgfHwgKGV4cG9ydHMuQnVpbHRpbkJhY2tlbmRGZWF0dXJlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhY2tlbmQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-api/lib/backend.js\n");

/***/ }),

/***/ "../app-backend-api/lib/global-hook.js":
/*!*********************************************!*\
  !*** ../app-backend-api/lib/global-hook.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/ban-types */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=global-hook.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvZ2xvYmFsLWhvb2suanM/YjJmNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQiLCJmaWxlIjoiLi4vYXBwLWJhY2tlbmQtYXBpL2xpYi9nbG9iYWwtaG9vay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlcyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsLWhvb2suanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-api/lib/global-hook.js\n");

/***/ }),

/***/ "../app-backend-api/lib/hooks.js":
/*!***************************************!*\
  !*** ../app-backend-api/lib/hooks.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DevtoolsHookable = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar DevtoolsHookable = function DevtoolsHookable(ctx, plugin) {\n    if ( plugin === void 0 ) plugin = null;\n\n    this.handlers = {};\n    this.ctx = ctx;\n    this.plugin = plugin;\n};\nDevtoolsHookable.prototype.hook = function hook (eventType, handler, pluginPermision) {\n        var this$1 = this;\n        if ( pluginPermision === void 0 ) pluginPermision = null;\n\n    var handlers = (this.handlers[eventType] = this.handlers[eventType] || []);\n    if (this.plugin) {\n        var originalHandler = handler;\n        handler = function () {\n                var args = [], len = arguments.length;\n                while ( len-- ) args[ len ] = arguments[ len ];\n\n            // Plugin permission\n            if (!shared_utils_1.hasPluginPermission(this$1.plugin.descriptor.id, shared_utils_1.PluginPermission.ENABLED) ||\n                (pluginPermision && !shared_utils_1.hasPluginPermission(this$1.plugin.descriptor.id, pluginPermision)))\n                { return; }\n            // App scope\n            if (!this$1.plugin.descriptor.disableAppScope &&\n                this$1.ctx.currentAppRecord.options.app !== this$1.plugin.descriptor.app)\n                { return; }\n            return originalHandler.apply(void 0, args);\n        };\n    }\n    handlers.push({\n        handler: handler,\n        plugin: this.ctx.currentPlugin\n    });\n};\nDevtoolsHookable.prototype.callHandlers = async function callHandlers (eventType, payload, ctx) {\n    if (this.handlers[eventType]) {\n        var handlers = this.handlers[eventType];\n        for (var i = 0; i < handlers.length; i++) {\n            var ref = handlers[i];\n                var handler = ref.handler;\n                var plugin = ref.plugin;\n            try {\n                await handler(payload, ctx);\n            }\n            catch (e) {\n                console.error((\"An error occured in hook \" + eventType + (plugin ? (\" registered by plugin \" + (plugin.descriptor.id)) : '')));\n                console.error(e);\n            }\n        }\n    }\n    return payload;\n};\nDevtoolsHookable.prototype.transformCall = function transformCall (handler) {\n    this.hook(\"transformCall\" /* TRANSFORM_CALL */, handler);\n};\nDevtoolsHookable.prototype.getAppRecordName = function getAppRecordName (handler) {\n    this.hook(\"getAppRecordName\" /* GET_APP_RECORD_NAME */, handler);\n};\nDevtoolsHookable.prototype.getAppRootInstance = function getAppRootInstance (handler) {\n    this.hook(\"getAppRootInstance\" /* GET_APP_ROOT_INSTANCE */, handler);\n};\nDevtoolsHookable.prototype.registerApplication = function registerApplication (handler) {\n    this.hook(\"registerApplication\" /* REGISTER_APPLICATION */, handler);\n};\nDevtoolsHookable.prototype.walkComponentTree = function walkComponentTree (handler) {\n    this.hook(\"walkComponentTree\" /* WALK_COMPONENT_TREE */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.visitComponentTree = function visitComponentTree (handler) {\n    this.hook(\"visitComponentTree\" /* VISIT_COMPONENT_TREE */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.walkComponentParents = function walkComponentParents (handler) {\n    this.hook(\"walkComponentParents\" /* WALK_COMPONENT_PARENTS */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.inspectComponent = function inspectComponent (handler) {\n    this.hook(\"inspectComponent\" /* INSPECT_COMPONENT */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.getComponentBounds = function getComponentBounds (handler) {\n    this.hook(\"getComponentBounds\" /* GET_COMPONENT_BOUNDS */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.getComponentName = function getComponentName (handler) {\n    this.hook(\"getComponentName\" /* GET_COMPONENT_NAME */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.getComponentInstances = function getComponentInstances (handler) {\n    this.hook(\"getComponentInstances\" /* GET_COMPONENT_INSTANCES */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.getElementComponent = function getElementComponent (handler) {\n    this.hook(\"getElementComponent\" /* GET_ELEMENT_COMPONENT */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.getComponentRootElements = function getComponentRootElements (handler) {\n    this.hook(\"getComponentRootElements\" /* GET_COMPONENT_ROOT_ELEMENTS */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.editComponentState = function editComponentState (handler) {\n    this.hook(\"editComponentState\" /* EDIT_COMPONENT_STATE */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.getComponentDevtoolsOptions = function getComponentDevtoolsOptions (handler) {\n    this.hook(\"getAppDevtoolsOptions\" /* GET_COMPONENT_DEVTOOLS_OPTIONS */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.getComponentRenderCode = function getComponentRenderCode (handler) {\n    this.hook(\"getComponentRenderCode\" /* GET_COMPONENT_RENDER_CODE */, handler, shared_utils_1.PluginPermission.COMPONENTS);\n};\nDevtoolsHookable.prototype.inspectTimelineEvent = function inspectTimelineEvent (handler) {\n    this.hook(\"inspectTimelineEvent\" /* INSPECT_TIMELINE_EVENT */, handler, shared_utils_1.PluginPermission.TIMELINE);\n};\nDevtoolsHookable.prototype.timelineCleared = function timelineCleared (handler) {\n    this.hook(\"timelineCleared\" /* TIMELINE_CLEARED */, handler, shared_utils_1.PluginPermission.TIMELINE);\n};\nDevtoolsHookable.prototype.getInspectorTree = function getInspectorTree (handler) {\n    this.hook(\"getInspectorTree\" /* GET_INSPECTOR_TREE */, handler, shared_utils_1.PluginPermission.CUSTOM_INSPECTOR);\n};\nDevtoolsHookable.prototype.getInspectorState = function getInspectorState (handler) {\n    this.hook(\"getInspectorState\" /* GET_INSPECTOR_STATE */, handler, shared_utils_1.PluginPermission.CUSTOM_INSPECTOR);\n};\nDevtoolsHookable.prototype.editInspectorState = function editInspectorState (handler) {\n    this.hook(\"editInspectorState\" /* EDIT_INSPECTOR_STATE */, handler, shared_utils_1.PluginPermission.CUSTOM_INSPECTOR);\n};\nexports.DevtoolsHookable = DevtoolsHookable;\n//# sourceMappingURL=hooks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-api/lib/hooks.js\n");

/***/ }),

/***/ "../app-backend-api/lib/index.js":
/*!***************************************!*\
  !*** ../app-backend-api/lib/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) { k2 = k; }\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) { k2 = k; }\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) { if (p !== \"default\" && !exports.hasOwnProperty(p)) { __createBinding(exports, m, p); } }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./api */ \"../app-backend-api/lib/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./app-record */ \"../app-backend-api/lib/app-record.js\"), exports);\n__exportStar(__webpack_require__(/*! ./backend */ \"../app-backend-api/lib/backend.js\"), exports);\n__exportStar(__webpack_require__(/*! ./backend-context */ \"../app-backend-api/lib/backend-context.js\"), exports);\n__exportStar(__webpack_require__(/*! ./global-hook */ \"../app-backend-api/lib/global-hook.js\"), exports);\n__exportStar(__webpack_require__(/*! ./hooks */ \"../app-backend-api/lib/hooks.js\"), exports);\n__exportStar(__webpack_require__(/*! ./plugin */ \"../app-backend-api/lib/plugin.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvaW5kZXguanM/M2YyMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUksZUFBZSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtBQUNoRyxJQUFJLElBQUksRUFBRSxLQUFLLFNBQVMsSUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFDO0FBQ2pDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekYsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtBQUM1QixJQUFJLElBQUksRUFBRSxLQUFLLFNBQVMsSUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFDO0FBQ2pDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0osSUFBSSxZQUFZLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRTtBQUN2RSxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFFLElBQUksQ0FBQyxLQUFLLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUUsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUM7QUFDdkcsQ0FBQyxDQUFDO0FBQ0YsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsWUFBWSxDQUFDLG1CQUFPLENBQUMsNENBQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLDBEQUFjLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvQyxZQUFZLENBQUMsbUJBQU8sQ0FBQyxvREFBVyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUMsWUFBWSxDQUFDLG1CQUFPLENBQUMsb0VBQW1CLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNwRCxZQUFZLENBQUMsbUJBQU8sQ0FBQyw0REFBZSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEQsWUFBWSxDQUFDLG1CQUFPLENBQUMsZ0RBQVMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzFDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLGtEQUFVLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC1hcGkvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hcHAtcmVjb3JkXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iYWNrZW5kXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iYWNrZW5kLWNvbnRleHRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dsb2JhbC1ob29rXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ob29rc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcGx1Z2luXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-api/lib/index.js\n");

/***/ }),

/***/ "../app-backend-api/lib/plugin.js":
/*!****************************************!*\
  !*** ../app-backend-api/lib/plugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvcGx1Z2luLmpzPzcyMTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC1hcGkvbGliL3BsdWdpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Z2luLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-api/lib/plugin.js\n");

/***/ }),

/***/ "../app-backend-core/lib/app.js":
/*!**************************************!*\
  !*** ../app-backend-core/lib/app.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._legacy_getAndRegisterApps = exports.removeApp = exports.sendApps = exports.waitForAppsRegistration = exports.getAppRecord = exports.getAppRecordId = exports.mapAppRecord = exports.selectApp = exports.registerApp = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar queue_1 = __webpack_require__(/*! ./util/queue */ \"../app-backend-core/lib/util/queue.js\");\nvar scan_1 = __webpack_require__(/*! ./legacy/scan */ \"../app-backend-core/lib/legacy/scan.js\");\nvar app_backend_vue1_1 = __webpack_require__(/*! @vue-devtools/app-backend-vue1 */ \"../app-backend-vue1/lib/index.js\");\nvar app_backend_vue2_1 = __webpack_require__(/*! @vue-devtools/app-backend-vue2 */ \"../app-backend-vue2/lib/index.js\");\nvar app_backend_vue3_1 = __webpack_require__(/*! @vue-devtools/app-backend-vue3 */ \"../app-backend-vue3/lib/index.js\");\nvar timeline_1 = __webpack_require__(/*! ./timeline */ \"../app-backend-core/lib/timeline.js\");\nvar availableBackends = [\n    app_backend_vue1_1.backend,\n    app_backend_vue2_1.backend,\n    app_backend_vue3_1.backend\n];\nvar enabledBackends = new Set();\nvar jobs = new queue_1.JobQueue();\nvar recordId = 0;\nvar appRecordPromises = new Map();\nasync function registerApp(options, ctx) {\n    return jobs.queue(function () { return registerAppJob(options, ctx); });\n}\nexports.registerApp = registerApp;\nasync function registerAppJob(options, ctx) {\n    var _a;\n    // Dedupe\n    if (ctx.appRecords.find(function (a) { return a.options === options; })) {\n        return;\n    }\n    var record;\n    var baseFrameworkVersion = parseInt(options.version.substr(0, options.version.indexOf('.')));\n    for (var i = 0; i < availableBackends.length; i++) {\n        var backend = availableBackends[i];\n        if (backend.frameworkVersion === baseFrameworkVersion) {\n            // Enabled backend\n            if (!enabledBackends.has(backend)) {\n                backend.setup(ctx.api);\n                enabledBackends.add(backend);\n            }\n            // Create app record\n            var rootInstance = await ctx.api.getAppRootInstance(options.app);\n            if (rootInstance) {\n                var id = getAppRecordId(options.app);\n                var name = await ctx.api.getAppRecordName(options.app, id);\n                var ref = await ctx.api.getComponentRootElements(rootInstance);\n                var el = ref[0];\n                record = {\n                    id: id,\n                    name: name,\n                    options: options,\n                    backend: backend,\n                    lastInspectedComponentId: null,\n                    instanceMap: new Map(),\n                    rootInstance: rootInstance,\n                    perfGroupIds: new Map(),\n                    iframe: document !== el.ownerDocument ? el.ownerDocument.location.pathname : null,\n                    meta: (_a = options.meta) !== null && _a !== void 0 ? _a : {}\n                };\n                options.app.__VUE_DEVTOOLS_APP_RECORD__ = record;\n                var rootId = (record.id) + \":root\";\n                record.instanceMap.set(rootId, record.rootInstance);\n                record.rootInstance.__VUE_DEVTOOLS_UID__ = rootId;\n                await ctx.api.registerApplication(record);\n                ctx.appRecords.push(record);\n                timeline_1.addBuiltinLayers(options.app, ctx);\n                ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_ADD, {\n                    appRecord: mapAppRecord(record)\n                });\n                if (backend.setupApp) {\n                    backend.setupApp(ctx.api, record);\n                }\n                if (appRecordPromises.has(options.app)) {\n                    for (var r of appRecordPromises.get(options.app)) {\n                        await r(record);\n                    }\n                }\n                // Auto select first app\n                if (ctx.currentAppRecord == null) {\n                    await selectApp(record, ctx);\n                }\n            }\n            else {\n                console.warn('[Vue devtools] No root instance found for app, it might have been unmounted', options.app);\n            }\n            break;\n        }\n    }\n}\nasync function selectApp(record, ctx) {\n    ctx.currentAppRecord = record;\n    ctx.currentInspectedComponentId = record.lastInspectedComponentId;\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_SELECTED, {\n        id: record.id,\n        lastInspectedComponentId: record.lastInspectedComponentId\n    });\n}\nexports.selectApp = selectApp;\nfunction mapAppRecord(record) {\n    return {\n        id: record.id,\n        name: record.name,\n        version: record.options.version,\n        iframe: record.iframe\n    };\n}\nexports.mapAppRecord = mapAppRecord;\nfunction getAppRecordId(app) {\n    if (app.__VUE_DEVTOOLS_APP_RECORD_ID__ != null) {\n        return app.__VUE_DEVTOOLS_APP_RECORD_ID__;\n    }\n    var id = recordId++;\n    app.__VUE_DEVTOOLS_APP_RECORD_ID__ = id;\n    return id;\n}\nexports.getAppRecordId = getAppRecordId;\nasync function getAppRecord(app, ctx) {\n    var record = ctx.appRecords.find(function (ar) { return ar.options.app === app; });\n    if (record) {\n        return record;\n    }\n    return new Promise(function (resolve, reject) {\n        var timedOut = false;\n        var timer = setTimeout(function () {\n            timedOut = true;\n            reject(new Error((\"Timed out getting app record for app \" + app)));\n        }, 2000);\n        var resolvers = appRecordPromises.get(app);\n        if (!resolvers) {\n            resolvers = [];\n            appRecordPromises.set(app, resolvers);\n        }\n        resolvers.push(function (record) {\n            if (!timedOut) {\n                clearTimeout(timer);\n                resolve(record);\n            }\n        });\n    });\n}\nexports.getAppRecord = getAppRecord;\nfunction waitForAppsRegistration() {\n    return jobs.queue(async function () { });\n}\nexports.waitForAppsRegistration = waitForAppsRegistration;\nasync function sendApps(ctx) {\n    var appRecords = [];\n    for (var appRecord of ctx.appRecords) {\n        if (!(await ctx.api.getComponentDevtoolsOptions(appRecord.rootInstance)).hide) {\n            appRecords.push(appRecord);\n        }\n    }\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_LIST, {\n        apps: appRecords.map(mapAppRecord)\n    });\n}\nexports.sendApps = sendApps;\nasync function removeApp(app, ctx) {\n    try {\n        var appRecord = await getAppRecord(app, ctx);\n        if (appRecord) {\n            var index = ctx.appRecords.indexOf(appRecord);\n            if (index !== -1)\n                { ctx.appRecords.splice(index, 1); }\n            timeline_1.removeLayersForApp(app, ctx);\n            ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_REMOVE, { id: appRecord.id });\n        }\n    }\n    catch (e) {\n        if (true) {\n            console.error(e);\n        }\n    }\n}\nexports.removeApp = removeApp;\n// eslint-disable-next-line camelcase\nasync function _legacy_getAndRegisterApps(Vue, ctx) {\n    var apps = scan_1.scan();\n    apps.forEach(function (app) {\n        registerApp({\n            app: app,\n            types: {},\n            version: Vue.version,\n            meta: {\n                Vue: Vue\n            }\n        }, ctx);\n    });\n}\nexports._legacy_getAndRegisterApps = _legacy_getAndRegisterApps;\n//# sourceMappingURL=app.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/app.js\n");

/***/ }),

/***/ "../app-backend-core/lib/component-pick.js":
/*!*************************************************!*\
  !*** ../app-backend-core/lib/component-pick.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar highlighter_1 = __webpack_require__(/*! ./highlighter */ \"../app-backend-core/lib/highlighter.js\");\nvar ComponentPicker = function ComponentPicker(ctx) {\n    this.ctx = ctx;\n    this.bindMethods();\n};\n/**\n * Adds event listeners for mouseover and mouseup\n */\nComponentPicker.prototype.startSelecting = function startSelecting () {\n    if (!shared_utils_1.isBrowser)\n        { return; }\n    window.addEventListener('mouseover', this.elementMouseOver, true);\n    window.addEventListener('click', this.elementClicked, true);\n    window.addEventListener('mouseout', this.cancelEvent, true);\n    window.addEventListener('mouseenter', this.cancelEvent, true);\n    window.addEventListener('mouseleave', this.cancelEvent, true);\n    window.addEventListener('mousedown', this.cancelEvent, true);\n    window.addEventListener('mouseup', this.cancelEvent, true);\n};\n/**\n * Removes event listeners\n */\nComponentPicker.prototype.stopSelecting = function stopSelecting () {\n    if (!shared_utils_1.isBrowser)\n        { return; }\n    window.removeEventListener('mouseover', this.elementMouseOver, true);\n    window.removeEventListener('click', this.elementClicked, true);\n    window.removeEventListener('mouseout', this.cancelEvent, true);\n    window.removeEventListener('mouseenter', this.cancelEvent, true);\n    window.removeEventListener('mouseleave', this.cancelEvent, true);\n    window.removeEventListener('mousedown', this.cancelEvent, true);\n    window.removeEventListener('mouseup', this.cancelEvent, true);\n    highlighter_1.unHighlight();\n};\n/**\n * Highlights a component on element mouse over\n */\nComponentPicker.prototype.elementMouseOver = async function elementMouseOver (e) {\n    this.cancelEvent(e);\n    var el = e.target;\n    if (el) {\n        this.selectedInstance = await this.ctx.api.getElementComponent(el);\n    }\n    highlighter_1.unHighlight();\n    if (this.selectedInstance) {\n        highlighter_1.highlight(this.selectedInstance, this.ctx);\n    }\n};\n/**\n * Selects an instance in the component view\n */\nComponentPicker.prototype.elementClicked = async function elementClicked (e) {\n    this.cancelEvent(e);\n    if (this.selectedInstance) {\n        var parentInstances = await this.ctx.api.walkComponentParents(this.selectedInstance);\n        this.ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_PICK, { id: this.selectedInstance.__VUE_DEVTOOLS_UID__, parentIds: parentInstances.map(function (i) { return i.__VUE_DEVTOOLS_UID__; }) });\n    }\n    else {\n        this.ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_PICK_CANCELED, null);\n    }\n    this.stopSelecting();\n};\n/**\n * Cancel a mouse event\n */\nComponentPicker.prototype.cancelEvent = function cancelEvent (e) {\n    e.stopImmediatePropagation();\n    e.preventDefault();\n};\n/**\n * Bind class methods to the class scope to avoid rebind for event listeners\n */\nComponentPicker.prototype.bindMethods = function bindMethods () {\n    this.startSelecting = this.startSelecting.bind(this);\n    this.stopSelecting = this.stopSelecting.bind(this);\n    this.elementMouseOver = this.elementMouseOver.bind(this);\n    this.elementClicked = this.elementClicked.bind(this);\n};\nexports.default = ComponentPicker;\n//# sourceMappingURL=component-pick.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL2NvbXBvbmVudC1waWNrLmpzPzlmZTAiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOURBLEdBQUssQ0FBQyxjQUFjLEdBQUcsbUJBQU8sQ0FBQyxnRUFBNEIsQ0FBQyxDQUFDO0FBQzdEQSxHQUFLLENBQUMsYUFBYSxHQUFHLG1CQUFPLENBQUMsNkRBQWUsQ0FBQyxDQUFDO0FBQy9DLElBQU0sZUFBZSxHQUNqQix3QkFBVyxDQUFDLEdBQUcsRUFBRTtBQUNyQixJQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3ZCLElBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLEVBQUM7QUFDRDtBQUNKLENBQUs7QUFDTCxDQUFLOzBCQUNELHlDQUFjLEdBQUc7QUFDckIsSUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVM7QUFDckMsVUFBWSxTQUFPO0FBQ25CLElBQVEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDMUUsSUFBUSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEUsSUFBUSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEUsSUFBUSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEUsSUFBUSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEUsSUFBUSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDckUsSUFBUSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDL0QsRUFBQztBQUNEO0FBQ0osQ0FBSztBQUNMLENBQUs7MEJBQ0QsdUNBQWEsR0FBRztBQUNwQixJQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUztBQUNyQyxVQUFZLFNBQU87QUFDbkIsSUFBUSxNQUFNLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM3RSxJQUFRLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RSxJQUFRLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RSxJQUFRLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RSxJQUFRLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RSxJQUFRLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN4RSxJQUFRLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0RSxJQUFRLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNoQyxFQUFDO0FBQ0Q7QUFDSixDQUFLO0FBQ0wsQ0FBSztBQUNELDBCQUFNLG1EQUFnQixDQUFDLENBQUMsRUFBRTtBQUM5QixJQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUIsSUFBUUEsR0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzVCLElBQVEsSUFBSSxFQUFFLEVBQUU7QUFDaEIsUUFBWSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvRSxJQUFRLENBQUM7QUFDVCxJQUFRLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNwQyxJQUFRLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO0FBQ25DLFFBQVksYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JFLElBQVEsQ0FBQztBQUNMLEVBQUM7QUFDRDtBQUNKLENBQUs7QUFDTCxDQUFLO0FBQ0QsMEJBQU0sK0NBQWMsQ0FBQyxDQUFDLEVBQUU7QUFDNUIsSUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVCLElBQVEsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDbkMsUUFBWUEsR0FBSyxDQUFDLGVBQWUsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ25HLFFBQVksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxlQUFlLENBQUMsR0FBRyxXQUFDLEVBQUMsVUFBSSxDQUFDLENBQUMsdUJBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdk0sSUFBUSxDQUFDO0FBQ1QsSUFBUSxLQUFLO0FBQ2IsUUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNyRyxJQUFRLENBQUM7QUFDVCxJQUFRLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN6QixFQUFDO0FBQ0Q7QUFDSixDQUFLO0FBQ0wsQ0FBSzswQkFDRCxtQ0FBVyxDQUFDLENBQUMsRUFBRTtBQUNuQixJQUFRLENBQUMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0FBQ3JDLElBQVEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3ZCLEVBQUM7QUFDRDtBQUNKLENBQUs7QUFDTCxDQUFLOzBCQUNELG1DQUFXLEdBQUc7QUFDbEIsSUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdELElBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzRCxJQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pFLElBQVEsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6RCxFQUNIO0FBQ0QsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUNsQyIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC1jb3JlL2xpYi9jb21wb25lbnQtcGljay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2hhcmVkX3V0aWxzXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9zaGFyZWQtdXRpbHNcIik7XG5jb25zdCBoaWdobGlnaHRlcl8xID0gcmVxdWlyZShcIi4vaGlnaGxpZ2h0ZXJcIik7XG5jbGFzcyBDb21wb25lbnRQaWNrZXIge1xuICAgIGNvbnN0cnVjdG9yKGN0eCkge1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgdGhpcy5iaW5kTWV0aG9kcygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyBmb3IgbW91c2VvdmVyIGFuZCBtb3VzZXVwXG4gICAgICovXG4gICAgc3RhcnRTZWxlY3RpbmcoKSB7XG4gICAgICAgIGlmICghc2hhcmVkX3V0aWxzXzEuaXNCcm93c2VyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgdGhpcy5lbGVtZW50TW91c2VPdmVyLCB0cnVlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5lbGVtZW50Q2xpY2tlZCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHRoaXMuY2FuY2VsRXZlbnQsIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMuY2FuY2VsRXZlbnQsIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuY2FuY2VsRXZlbnQsIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5jYW5jZWxFdmVudCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5jYW5jZWxFdmVudCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzXG4gICAgICovXG4gICAgc3RvcFNlbGVjdGluZygpIHtcbiAgICAgICAgaWYgKCFzaGFyZWRfdXRpbHNfMS5pc0Jyb3dzZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLmVsZW1lbnRNb3VzZU92ZXIsIHRydWUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmVsZW1lbnRDbGlja2VkLCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgdGhpcy5jYW5jZWxFdmVudCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5jYW5jZWxFdmVudCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5jYW5jZWxFdmVudCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNhbmNlbEV2ZW50LCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmNhbmNlbEV2ZW50LCB0cnVlKTtcbiAgICAgICAgaGlnaGxpZ2h0ZXJfMS51bkhpZ2hsaWdodCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWdobGlnaHRzIGEgY29tcG9uZW50IG9uIGVsZW1lbnQgbW91c2Ugb3ZlclxuICAgICAqL1xuICAgIGFzeW5jIGVsZW1lbnRNb3VzZU92ZXIoZSkge1xuICAgICAgICB0aGlzLmNhbmNlbEV2ZW50KGUpO1xuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0O1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbnN0YW5jZSA9IGF3YWl0IHRoaXMuY3R4LmFwaS5nZXRFbGVtZW50Q29tcG9uZW50KGVsKTtcbiAgICAgICAgfVxuICAgICAgICBoaWdobGlnaHRlcl8xLnVuSGlnaGxpZ2h0KCk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodGVyXzEuaGlnaGxpZ2h0KHRoaXMuc2VsZWN0ZWRJbnN0YW5jZSwgdGhpcy5jdHgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgYW4gaW5zdGFuY2UgaW4gdGhlIGNvbXBvbmVudCB2aWV3XG4gICAgICovXG4gICAgYXN5bmMgZWxlbWVudENsaWNrZWQoZSkge1xuICAgICAgICB0aGlzLmNhbmNlbEV2ZW50KGUpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEluc3RhbmNlKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRJbnN0YW5jZXMgPSBhd2FpdCB0aGlzLmN0eC5hcGkud2Fsa0NvbXBvbmVudFBhcmVudHModGhpcy5zZWxlY3RlZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmJyaWRnZS5zZW5kKHNoYXJlZF91dGlsc18xLkJyaWRnZUV2ZW50cy5UT19GUk9OVF9DT01QT05FTlRfUElDSywgeyBpZDogdGhpcy5zZWxlY3RlZEluc3RhbmNlLl9fVlVFX0RFVlRPT0xTX1VJRF9fLCBwYXJlbnRJZHM6IHBhcmVudEluc3RhbmNlcy5tYXAoaSA9PiBpLl9fVlVFX0RFVlRPT0xTX1VJRF9fKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmJyaWRnZS5zZW5kKHNoYXJlZF91dGlsc18xLkJyaWRnZUV2ZW50cy5UT19GUk9OVF9DT01QT05FTlRfUElDS19DQU5DRUxFRCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9wU2VsZWN0aW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbCBhIG1vdXNlIGV2ZW50XG4gICAgICovXG4gICAgY2FuY2VsRXZlbnQoZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJpbmQgY2xhc3MgbWV0aG9kcyB0byB0aGUgY2xhc3Mgc2NvcGUgdG8gYXZvaWQgcmViaW5kIGZvciBldmVudCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBiaW5kTWV0aG9kcygpIHtcbiAgICAgICAgdGhpcy5zdGFydFNlbGVjdGluZyA9IHRoaXMuc3RhcnRTZWxlY3RpbmcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdG9wU2VsZWN0aW5nID0gdGhpcy5zdG9wU2VsZWN0aW5nLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZWxlbWVudE1vdXNlT3ZlciA9IHRoaXMuZWxlbWVudE1vdXNlT3Zlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmVsZW1lbnRDbGlja2VkID0gdGhpcy5lbGVtZW50Q2xpY2tlZC5iaW5kKHRoaXMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudFBpY2tlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC1waWNrLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-core/lib/component-pick.js\n");

/***/ }),

/***/ "../app-backend-core/lib/component.js":
/*!********************************************!*\
  !*** ../app-backend-core/lib/component.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getComponentInstance = exports.getComponentId = exports.editComponentState = exports.sendEmptyComponentData = exports.markSelectedInstance = exports.sendSelectedComponentData = exports.sendComponentTreeData = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar app_1 = __webpack_require__(/*! ./app */ \"../app-backend-core/lib/app.js\");\nvar MAX_$VM = 10;\nvar $vmQueue = [];\nasync function sendComponentTreeData(appRecord, instanceId, filter, maxDepth, ctx) {\n    if ( filter === void 0 ) filter = '';\n    if ( maxDepth === void 0 ) maxDepth = null;\n\n    if (!instanceId || appRecord !== ctx.currentAppRecord)\n        { return; }\n    var instance = getComponentInstance(appRecord, instanceId, ctx);\n    if (!instance) {\n        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_TREE, {\n            instanceId: instanceId,\n            treeData: null,\n            notFound: true\n        });\n    }\n    else {\n        if (filter)\n            { filter = filter.toLowerCase(); }\n        if (maxDepth == null) {\n            maxDepth = instance === ctx.currentAppRecord.rootInstance ? 2 : 1;\n        }\n        var payload = {\n            instanceId: instanceId,\n            treeData: shared_utils_1.stringify(await ctx.api.walkComponentTree(instance, maxDepth, filter))\n        };\n        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_TREE, payload);\n    }\n}\nexports.sendComponentTreeData = sendComponentTreeData;\nasync function sendSelectedComponentData(appRecord, instanceId, ctx) {\n    if (!instanceId || appRecord !== ctx.currentAppRecord)\n        { return; }\n    markSelectedInstance(instanceId, ctx);\n    var instance = getComponentInstance(appRecord, instanceId, ctx);\n    if (!instance) {\n        sendEmptyComponentData(instanceId, ctx);\n    }\n    else {\n        // Expose instance on window\n        if (typeof window !== 'undefined') {\n            var win = window;\n            win.$vm = instance;\n            // $vm0, $vm1, $vm2, ...\n            if ($vmQueue[0] !== instance) {\n                if ($vmQueue.length >= MAX_$VM) {\n                    $vmQueue.pop();\n                }\n                for (var i = $vmQueue.length; i > 0; i--) {\n                    win[(\"$vm\" + i)] = $vmQueue[i] = $vmQueue[i - 1];\n                }\n                win.$vm0 = $vmQueue[0] = instance;\n            }\n        }\n        if (true) {\n            console.log('inspect', instance);\n        }\n        var parentInstances = await ctx.api.walkComponentParents(instance);\n        var payload = {\n            instanceId: instanceId,\n            data: shared_utils_1.stringify(await ctx.api.inspectComponent(instance, ctx.currentAppRecord.options.app)),\n            parentIds: parentInstances.map(function (i) { return i.__VUE_DEVTOOLS_UID__; })\n        };\n        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_SELECTED_DATA, payload);\n    }\n}\nexports.sendSelectedComponentData = sendSelectedComponentData;\nfunction markSelectedInstance(instanceId, ctx) {\n    ctx.currentInspectedComponentId = instanceId;\n    ctx.currentAppRecord.lastInspectedComponentId = instanceId;\n}\nexports.markSelectedInstance = markSelectedInstance;\nfunction sendEmptyComponentData(instanceId, ctx) {\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_SELECTED_DATA, {\n        instanceId: instanceId,\n        data: null\n    });\n}\nexports.sendEmptyComponentData = sendEmptyComponentData;\nasync function editComponentState(instanceId, dotPath, type, state, ctx) {\n    if (!instanceId)\n        { return; }\n    var instance = getComponentInstance(ctx.currentAppRecord, instanceId, ctx);\n    if (instance) {\n        if ('value' in state && state.value != null) {\n            state.value = shared_utils_1.parse(state.value, true);\n        }\n        await ctx.api.editComponentState(instance, dotPath, type, state, ctx.currentAppRecord.options.app);\n        await sendSelectedComponentData(ctx.currentAppRecord, instanceId, ctx);\n    }\n}\nexports.editComponentState = editComponentState;\nasync function getComponentId(app, uid, ctx) {\n    try {\n        var appRecord = await app_1.getAppRecord(app, ctx);\n        if (!appRecord)\n            { return null; }\n        return ((appRecord.id) + \":\" + (uid === 0 ? 'root' : uid));\n    }\n    catch (e) {\n        if (true) {\n            console.error(e);\n        }\n        return null;\n    }\n}\nexports.getComponentId = getComponentId;\nfunction getComponentInstance(appRecord, instanceId, ctx) {\n    if (instanceId === '_root') {\n        instanceId = (appRecord.id) + \":root\";\n    }\n    var instance = appRecord.instanceMap.get(instanceId);\n    if (!instance && \"development\" !== 'production') {\n        console.warn((\"Instance uid=\" + instanceId + \" not found\"));\n    }\n    return instance;\n}\nexports.getComponentInstance = getComponentInstance;\n//# sourceMappingURL=component.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL2NvbXBvbmVudC5qcz82NjY2Il0sIm5hbWVzIjpbImNvbnN0IiwibGV0Il0sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELDRCQUE0QixHQUFHLHNCQUFzQixHQUFHLDBCQUEwQixHQUFHLDhCQUE4QixHQUFHLDRCQUE0QixHQUFHLGlDQUFpQyxHQUFHLDZCQUE2QixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ2hPQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLEtBQUssR0FBRyxtQkFBTyxDQUFDLDZDQUFPLENBQUMsQ0FBQztBQUMvQkEsR0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDbkJBLEdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLGVBQWUscUJBQXFCLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFXLEVBQUUsUUFBZSxFQUFFLEdBQUcsRUFBRTttQ0FBN0IsR0FBRzt1Q0FBWSxHQUFHO0FBQVk7QUFDaEcsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsS0FBSyxHQUFHLENBQUMsZ0JBQWdCO0FBQ3pELFVBQVEsU0FBTztBQUNmLElBQUlBLEdBQUssQ0FBQyxRQUFRLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0RSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDbkIsUUFBUSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLHVCQUF1QixFQUFFO0FBQzdFLHdCQUFZLFVBQVU7QUFDdEIsWUFBWSxRQUFRLEVBQUUsSUFBSTtBQUMxQixZQUFZLFFBQVEsRUFBRSxJQUFJO0FBQzFCLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsS0FBSztBQUNMLFNBQVM7QUFDVCxRQUFRLElBQUksTUFBTTtBQUNsQixjQUFZLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUM7QUFDMUMsUUFBUSxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7QUFDOUIsWUFBWSxRQUFRLEdBQUcsUUFBUSxLQUFLLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5RSxTQUFTO0FBQ1QsUUFBUUEsR0FBSyxDQUFDLE9BQU8sR0FBRztBQUN4Qix3QkFBWSxVQUFVO0FBQ3RCLFlBQVksUUFBUSxFQUFFLGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0csU0FBUyxDQUFDO0FBQ1YsUUFBUSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RGLEtBQUs7QUFDTCxDQUFDO0FBQ0QsNkJBQTZCLEdBQUcscUJBQXFCLENBQUM7QUFDdEQsZUFBZSx5QkFBeUIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRTtBQUNyRSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxLQUFLLEdBQUcsQ0FBQyxnQkFBZ0I7QUFDekQsVUFBUSxTQUFPO0FBQ2YsSUFBSSxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDMUMsSUFBSUEsR0FBSyxDQUFDLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNuQixRQUFRLHNCQUFzQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRCxLQUFLO0FBQ0wsU0FBUztBQUNUO0FBQ0EsUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFZQSxHQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUMvQixZQUFZLEdBQUcsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDO0FBQy9CO0FBQ0EsWUFBWSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7QUFDMUMsZ0JBQWdCLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxPQUFPLEVBQUU7QUFDaEQsb0JBQW9CLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNuQyxpQkFBaUI7QUFDakIsZ0JBQWdCLEtBQUtDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFELG9CQUFvQixHQUFHLENBQUMsU0FBTSxFQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNuRSxpQkFBaUI7QUFDakIsZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUNsRCxhQUFhO0FBQ2IsU0FBUztBQUNULFFBQVEsSUFBSSxJQUFxQyxFQUFFO0FBQ25ELFlBQVksT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDN0MsU0FBUztBQUNULFFBQVFELEdBQUssQ0FBQyxlQUFlLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdFLFFBQVFBLEdBQUssQ0FBQyxPQUFPLEdBQUc7QUFDeEIsd0JBQVksVUFBVTtBQUN0QixZQUFZLElBQUksRUFBRSxjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0SCxZQUFZLFNBQVMsRUFBRSxlQUFlLENBQUMsR0FBRyxXQUFDLEVBQUMsVUFBSSxDQUFDLENBQUMsdUJBQW9CLENBQUM7QUFDdkUsU0FBUyxDQUFDO0FBQ1YsUUFBUSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLGdDQUFnQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9GLEtBQUs7QUFDTCxDQUFDO0FBQ0QsaUNBQWlDLEdBQUcseUJBQXlCLENBQUM7QUFDOUQsU0FBUyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0FBQy9DLElBQUksR0FBRyxDQUFDLDJCQUEyQixHQUFHLFVBQVUsQ0FBQztBQUNqRCxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsR0FBRyxVQUFVLENBQUM7QUFDL0QsQ0FBQztBQUNELDRCQUE0QixHQUFHLG9CQUFvQixDQUFDO0FBQ3BELFNBQVMsc0JBQXNCLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtBQUNqRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsZ0NBQWdDLEVBQUU7QUFDbEYsb0JBQVEsVUFBVTtBQUNsQixRQUFRLElBQUksRUFBRSxJQUFJO0FBQ2xCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUNELDhCQUE4QixHQUFHLHNCQUFzQixDQUFDO0FBQ3hELGVBQWUsa0JBQWtCLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUN6RSxJQUFJLElBQUksQ0FBQyxVQUFVO0FBQ25CLFVBQVEsU0FBTztBQUNmLElBQUlBLEdBQUssQ0FBQyxRQUFRLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqRixJQUFJLElBQUksUUFBUSxFQUFFO0FBQ2xCLFFBQVEsSUFBSSxPQUFPLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFlBQVksS0FBSyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEUsU0FBUztBQUNULFFBQVEsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNHLFFBQVEsTUFBTSx5QkFBeUIsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQy9FLEtBQUs7QUFDTCxDQUFDO0FBQ0QsMEJBQTBCLEdBQUcsa0JBQWtCLENBQUM7QUFDaEQsZUFBZSxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDN0MsSUFBSSxJQUFJO0FBQ1IsUUFBUUEsR0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdELFFBQVEsSUFBSSxDQUFDLFNBQVM7QUFDdEIsY0FBWSxPQUFPLElBQUksR0FBQztBQUN4QixRQUFRLFNBQVUsU0FBUyxDQUFDLEdBQUUsVUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDN0QsS0FBSztBQUNMLElBQUksT0FBTyxDQUFDLEVBQUU7QUFDZCxRQUFRLElBQUksSUFBcUMsRUFBRTtBQUNuRCxZQUFZLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsU0FBUztBQUNULFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsS0FBSztBQUNMLENBQUM7QUFDRCxzQkFBc0IsR0FBRyxjQUFjLENBQUM7QUFDeEMsU0FBUyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRTtBQUMxRCxJQUFJLElBQUksVUFBVSxLQUFLLE9BQU8sRUFBRTtBQUNoQyxRQUFRLFVBQVUsSUFBTSxTQUFTLENBQUMsR0FBRSxVQUFPLENBQUM7QUFDNUMsS0FBSztBQUNMLElBQUlBLEdBQUssQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDM0QsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLGFBQW9CLEtBQUssWUFBWSxFQUFFO0FBQzVELFFBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBZ0IsVUFBVSxnQkFBWSxDQUFDLENBQUM7QUFDN0QsS0FBSztBQUNMLElBQUksT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUNELDRCQUE0QixHQUFHLG9CQUFvQixDQUFDO0FBQ3BEIiwiZmlsZSI6Ii4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL2NvbXBvbmVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDb21wb25lbnRJbnN0YW5jZSA9IGV4cG9ydHMuZ2V0Q29tcG9uZW50SWQgPSBleHBvcnRzLmVkaXRDb21wb25lbnRTdGF0ZSA9IGV4cG9ydHMuc2VuZEVtcHR5Q29tcG9uZW50RGF0YSA9IGV4cG9ydHMubWFya1NlbGVjdGVkSW5zdGFuY2UgPSBleHBvcnRzLnNlbmRTZWxlY3RlZENvbXBvbmVudERhdGEgPSBleHBvcnRzLnNlbmRDb21wb25lbnRUcmVlRGF0YSA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xuY29uc3QgYXBwXzEgPSByZXF1aXJlKFwiLi9hcHBcIik7XG5jb25zdCBNQVhfJFZNID0gMTA7XG5jb25zdCAkdm1RdWV1ZSA9IFtdO1xuYXN5bmMgZnVuY3Rpb24gc2VuZENvbXBvbmVudFRyZWVEYXRhKGFwcFJlY29yZCwgaW5zdGFuY2VJZCwgZmlsdGVyID0gJycsIG1heERlcHRoID0gbnVsbCwgY3R4KSB7XG4gICAgaWYgKCFpbnN0YW5jZUlkIHx8IGFwcFJlY29yZCAhPT0gY3R4LmN1cnJlbnRBcHBSZWNvcmQpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldENvbXBvbmVudEluc3RhbmNlKGFwcFJlY29yZCwgaW5zdGFuY2VJZCwgY3R4KTtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgIGN0eC5icmlkZ2Uuc2VuZChzaGFyZWRfdXRpbHNfMS5CcmlkZ2VFdmVudHMuVE9fRlJPTlRfQ09NUE9ORU5UX1RSRUUsIHtcbiAgICAgICAgICAgIGluc3RhbmNlSWQsXG4gICAgICAgICAgICB0cmVlRGF0YTogbnVsbCxcbiAgICAgICAgICAgIG5vdEZvdW5kOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGZpbHRlcilcbiAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAobWF4RGVwdGggPT0gbnVsbCkge1xuICAgICAgICAgICAgbWF4RGVwdGggPSBpbnN0YW5jZSA9PT0gY3R4LmN1cnJlbnRBcHBSZWNvcmQucm9vdEluc3RhbmNlID8gMiA6IDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIGluc3RhbmNlSWQsXG4gICAgICAgICAgICB0cmVlRGF0YTogc2hhcmVkX3V0aWxzXzEuc3RyaW5naWZ5KGF3YWl0IGN0eC5hcGkud2Fsa0NvbXBvbmVudFRyZWUoaW5zdGFuY2UsIG1heERlcHRoLCBmaWx0ZXIpKVxuICAgICAgICB9O1xuICAgICAgICBjdHguYnJpZGdlLnNlbmQoc2hhcmVkX3V0aWxzXzEuQnJpZGdlRXZlbnRzLlRPX0ZST05UX0NPTVBPTkVOVF9UUkVFLCBwYXlsb2FkKTtcbiAgICB9XG59XG5leHBvcnRzLnNlbmRDb21wb25lbnRUcmVlRGF0YSA9IHNlbmRDb21wb25lbnRUcmVlRGF0YTtcbmFzeW5jIGZ1bmN0aW9uIHNlbmRTZWxlY3RlZENvbXBvbmVudERhdGEoYXBwUmVjb3JkLCBpbnN0YW5jZUlkLCBjdHgpIHtcbiAgICBpZiAoIWluc3RhbmNlSWQgfHwgYXBwUmVjb3JkICE9PSBjdHguY3VycmVudEFwcFJlY29yZClcbiAgICAgICAgcmV0dXJuO1xuICAgIG1hcmtTZWxlY3RlZEluc3RhbmNlKGluc3RhbmNlSWQsIGN0eCk7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDb21wb25lbnRJbnN0YW5jZShhcHBSZWNvcmQsIGluc3RhbmNlSWQsIGN0eCk7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICBzZW5kRW1wdHlDb21wb25lbnREYXRhKGluc3RhbmNlSWQsIGN0eCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBFeHBvc2UgaW5zdGFuY2Ugb24gd2luZG93XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc3Qgd2luID0gd2luZG93O1xuICAgICAgICAgICAgd2luLiR2bSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgLy8gJHZtMCwgJHZtMSwgJHZtMiwgLi4uXG4gICAgICAgICAgICBpZiAoJHZtUXVldWVbMF0gIT09IGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR2bVF1ZXVlLmxlbmd0aCA+PSBNQVhfJFZNKSB7XG4gICAgICAgICAgICAgICAgICAgICR2bVF1ZXVlLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gJHZtUXVldWUubGVuZ3RoOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbltgJHZtJHtpfWBdID0gJHZtUXVldWVbaV0gPSAkdm1RdWV1ZVtpIC0gMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpbi4kdm0wID0gJHZtUXVldWVbMF0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2luc3BlY3QnLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50SW5zdGFuY2VzID0gYXdhaXQgY3R4LmFwaS53YWxrQ29tcG9uZW50UGFyZW50cyhpbnN0YW5jZSk7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICBpbnN0YW5jZUlkLFxuICAgICAgICAgICAgZGF0YTogc2hhcmVkX3V0aWxzXzEuc3RyaW5naWZ5KGF3YWl0IGN0eC5hcGkuaW5zcGVjdENvbXBvbmVudChpbnN0YW5jZSwgY3R4LmN1cnJlbnRBcHBSZWNvcmQub3B0aW9ucy5hcHApKSxcbiAgICAgICAgICAgIHBhcmVudElkczogcGFyZW50SW5zdGFuY2VzLm1hcChpID0+IGkuX19WVUVfREVWVE9PTFNfVUlEX18pXG4gICAgICAgIH07XG4gICAgICAgIGN0eC5icmlkZ2Uuc2VuZChzaGFyZWRfdXRpbHNfMS5CcmlkZ2VFdmVudHMuVE9fRlJPTlRfQ09NUE9ORU5UX1NFTEVDVEVEX0RBVEEsIHBheWxvYWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuc2VuZFNlbGVjdGVkQ29tcG9uZW50RGF0YSA9IHNlbmRTZWxlY3RlZENvbXBvbmVudERhdGE7XG5mdW5jdGlvbiBtYXJrU2VsZWN0ZWRJbnN0YW5jZShpbnN0YW5jZUlkLCBjdHgpIHtcbiAgICBjdHguY3VycmVudEluc3BlY3RlZENvbXBvbmVudElkID0gaW5zdGFuY2VJZDtcbiAgICBjdHguY3VycmVudEFwcFJlY29yZC5sYXN0SW5zcGVjdGVkQ29tcG9uZW50SWQgPSBpbnN0YW5jZUlkO1xufVxuZXhwb3J0cy5tYXJrU2VsZWN0ZWRJbnN0YW5jZSA9IG1hcmtTZWxlY3RlZEluc3RhbmNlO1xuZnVuY3Rpb24gc2VuZEVtcHR5Q29tcG9uZW50RGF0YShpbnN0YW5jZUlkLCBjdHgpIHtcbiAgICBjdHguYnJpZGdlLnNlbmQoc2hhcmVkX3V0aWxzXzEuQnJpZGdlRXZlbnRzLlRPX0ZST05UX0NPTVBPTkVOVF9TRUxFQ1RFRF9EQVRBLCB7XG4gICAgICAgIGluc3RhbmNlSWQsXG4gICAgICAgIGRhdGE6IG51bGxcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2VuZEVtcHR5Q29tcG9uZW50RGF0YSA9IHNlbmRFbXB0eUNvbXBvbmVudERhdGE7XG5hc3luYyBmdW5jdGlvbiBlZGl0Q29tcG9uZW50U3RhdGUoaW5zdGFuY2VJZCwgZG90UGF0aCwgdHlwZSwgc3RhdGUsIGN0eCkge1xuICAgIGlmICghaW5zdGFuY2VJZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q29tcG9uZW50SW5zdGFuY2UoY3R4LmN1cnJlbnRBcHBSZWNvcmQsIGluc3RhbmNlSWQsIGN0eCk7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGlmICgndmFsdWUnIGluIHN0YXRlICYmIHN0YXRlLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gc2hhcmVkX3V0aWxzXzEucGFyc2Uoc3RhdGUudmFsdWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGN0eC5hcGkuZWRpdENvbXBvbmVudFN0YXRlKGluc3RhbmNlLCBkb3RQYXRoLCB0eXBlLCBzdGF0ZSwgY3R4LmN1cnJlbnRBcHBSZWNvcmQub3B0aW9ucy5hcHApO1xuICAgICAgICBhd2FpdCBzZW5kU2VsZWN0ZWRDb21wb25lbnREYXRhKGN0eC5jdXJyZW50QXBwUmVjb3JkLCBpbnN0YW5jZUlkLCBjdHgpO1xuICAgIH1cbn1cbmV4cG9ydHMuZWRpdENvbXBvbmVudFN0YXRlID0gZWRpdENvbXBvbmVudFN0YXRlO1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q29tcG9uZW50SWQoYXBwLCB1aWQsIGN0eCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFwcFJlY29yZCA9IGF3YWl0IGFwcF8xLmdldEFwcFJlY29yZChhcHAsIGN0eCk7XG4gICAgICAgIGlmICghYXBwUmVjb3JkKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBgJHthcHBSZWNvcmQuaWR9OiR7dWlkID09PSAwID8gJ3Jvb3QnIDogdWlkfWA7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0Q29tcG9uZW50SWQgPSBnZXRDb21wb25lbnRJZDtcbmZ1bmN0aW9uIGdldENvbXBvbmVudEluc3RhbmNlKGFwcFJlY29yZCwgaW5zdGFuY2VJZCwgY3R4KSB7XG4gICAgaWYgKGluc3RhbmNlSWQgPT09ICdfcm9vdCcpIHtcbiAgICAgICAgaW5zdGFuY2VJZCA9IGAke2FwcFJlY29yZC5pZH06cm9vdGA7XG4gICAgfVxuICAgIGNvbnN0IGluc3RhbmNlID0gYXBwUmVjb3JkLmluc3RhbmNlTWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICBpZiAoIWluc3RhbmNlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBJbnN0YW5jZSB1aWQ9JHtpbnN0YW5jZUlkfSBub3QgZm91bmRgKTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxuZXhwb3J0cy5nZXRDb21wb25lbnRJbnN0YW5jZSA9IGdldENvbXBvbmVudEluc3RhbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-core/lib/component.js\n");

/***/ }),

/***/ "../app-backend-core/lib/global-hook.js":
/*!**********************************************!*\
  !*** ../app-backend-core/lib/global-hook.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hook = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\n// hook should have been injected before this executes.\nexports.hook = shared_utils_1.target.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n//# sourceMappingURL=global-hook.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL2dsb2JhbC1ob29rLmpzPzM2N2MiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3RCQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3RDtBQUNBLFlBQVksR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLDRCQUE0QixDQUFDO0FBQ2xFIiwiZmlsZSI6Ii4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL2dsb2JhbC1ob29rLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhvb2sgPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL3NoYXJlZC11dGlsc1wiKTtcbi8vIGhvb2sgc2hvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBiZWZvcmUgdGhpcyBleGVjdXRlcy5cbmV4cG9ydHMuaG9vayA9IHNoYXJlZF91dGlsc18xLnRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsLWhvb2suanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-core/lib/global-hook.js\n");

/***/ }),

/***/ "../app-backend-core/lib/highlighter.js":
/*!**********************************************!*\
  !*** ../app-backend-core/lib/highlighter.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unHighlight = exports.highlight = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar queue_1 = __webpack_require__(/*! ./util/queue */ \"../app-backend-core/lib/util/queue.js\");\nvar overlay;\nvar overlayContent;\nvar currentInstance;\nfunction createOverlay() {\n    if (overlay || !shared_utils_1.isBrowser)\n        { return; }\n    overlay = document.createElement('div');\n    overlay.style.backgroundColor = 'rgba(65, 184, 131, 0.35)';\n    overlay.style.position = 'fixed';\n    overlay.style.zIndex = '99999999999998';\n    overlay.style.pointerEvents = 'none';\n    overlay.style.borderRadius = '3px';\n    overlayContent = document.createElement('div');\n    overlayContent.style.position = 'fixed';\n    overlayContent.style.zIndex = '99999999999999';\n    overlayContent.style.pointerEvents = 'none';\n    overlayContent.style.backgroundColor = 'white';\n    overlayContent.style.fontFamily = 'monospace';\n    overlayContent.style.fontSize = '11px';\n    overlayContent.style.padding = '4px 8px';\n    overlayContent.style.borderRadius = '3px';\n    overlayContent.style.color = '#333';\n    overlayContent.style.textAlign = 'center';\n    overlayContent.style.border = 'rgba(65, 184, 131, 0.5) 1px solid';\n    overlayContent.style.backgroundClip = 'padding-box';\n}\n// Use a job queue to preserve highlight/unhighlight calls order\n// This prevents \"sticky\" highlights that are not removed because highlight is async\nvar jobQueue = new queue_1.JobQueue();\nasync function highlight(instance, ctx) {\n    await jobQueue.queue(async function () {\n        if (!instance)\n            { return; }\n        var bounds = await ctx.api.getComponentBounds(instance);\n        if (bounds) {\n            createOverlay();\n            // Name\n            var name = (await ctx.api.getComponentName(instance)) || 'Anonymous';\n            var pre = document.createElement('span');\n            pre.style.opacity = '0.6';\n            pre.innerText = '<';\n            var text = document.createElement('span');\n            text.style.fontWeight = 'bold';\n            text.style.color = '#09ab56';\n            text.innerText = name;\n            var post = document.createElement('span');\n            post.style.opacity = '0.6';\n            post.innerText = '>';\n            // Size\n            var size = document.createElement('span');\n            size.style.opacity = '0.5';\n            size.style.marginLeft = '6px';\n            size.appendChild(document.createTextNode((Math.round(bounds.width * 100) / 100).toString()));\n            var multiply = document.createElement('span');\n            multiply.style.marginLeft = multiply.style.marginRight = '2px';\n            multiply.innerText = '×';\n            size.appendChild(multiply);\n            size.appendChild(document.createTextNode((Math.round(bounds.height * 100) / 100).toString()));\n            currentInstance = instance;\n            await showOverlay(bounds, [pre, text, post, size]);\n        }\n        startUpdateTimer(ctx);\n    });\n}\nexports.highlight = highlight;\nasync function unHighlight() {\n    await jobQueue.queue(async function () {\n        var _a, _b;\n        (_a = overlay === null || overlay === void 0 ? void 0 : overlay.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(overlay);\n        (_b = overlayContent === null || overlayContent === void 0 ? void 0 : overlayContent.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(overlayContent);\n        currentInstance = null;\n        stopUpdateTimer();\n    });\n}\nexports.unHighlight = unHighlight;\nfunction showOverlay(bounds, children) {\n    if ( children === void 0 ) children = null;\n\n    if (!shared_utils_1.isBrowser || !children.length)\n        { return; }\n    positionOverlay(bounds);\n    document.body.appendChild(overlay);\n    overlayContent.innerHTML = '';\n    children.forEach(function (child) { return overlayContent.appendChild(child); });\n    document.body.appendChild(overlayContent);\n    positionOverlayContent(bounds);\n}\nfunction positionOverlay(ref) {\n    var width = ref.width; if ( width === void 0 ) width = 0;\n    var height = ref.height; if ( height === void 0 ) height = 0;\n    var top = ref.top; if ( top === void 0 ) top = 0;\n    var left = ref.left; if ( left === void 0 ) left = 0;\n\n    overlay.style.width = Math.round(width) + 'px';\n    overlay.style.height = Math.round(height) + 'px';\n    overlay.style.left = Math.round(left) + 'px';\n    overlay.style.top = Math.round(top) + 'px';\n}\nfunction positionOverlayContent(ref) {\n    var wifth = ref.wifth; if ( wifth === void 0 ) wifth = 0;\n    var height = ref.height; if ( height === void 0 ) height = 0;\n    var top = ref.top; if ( top === void 0 ) top = 0;\n    var left = ref.left; if ( left === void 0 ) left = 0;\n\n    // Content position (prevents overflow)\n    var contentWidth = overlayContent.offsetWidth;\n    var contentHeight = overlayContent.offsetHeight;\n    var contentLeft = left;\n    if (contentLeft < 0) {\n        contentLeft = 0;\n    }\n    else if (contentLeft + contentWidth > window.innerWidth) {\n        contentLeft = window.innerWidth - contentWidth;\n    }\n    var contentTop = top - contentHeight - 2;\n    if (contentTop < 0) {\n        contentTop = top + height + 2;\n    }\n    if (contentTop < 0) {\n        contentTop = 0;\n    }\n    else if (contentTop + contentHeight > window.innerHeight) {\n        contentTop = window.innerHeight - contentHeight;\n    }\n    overlayContent.style.left = ~~contentLeft + 'px';\n    overlayContent.style.top = ~~contentTop + 'px';\n}\nasync function updateOverlay(ctx) {\n    if (currentInstance) {\n        var bounds = await ctx.api.getComponentBounds(currentInstance);\n        if (bounds) {\n            var sizeEl = overlayContent.children.item(3);\n            var widthEl = sizeEl.childNodes[0];\n            widthEl.textContent = (Math.round(bounds.width * 100) / 100).toString();\n            var heightEl = sizeEl.childNodes[2];\n            heightEl.textContent = (Math.round(bounds.height * 100) / 100).toString();\n            positionOverlay(bounds);\n            positionOverlayContent(bounds);\n        }\n    }\n}\nvar updateTimer;\nfunction startUpdateTimer(ctx) {\n    stopUpdateTimer();\n    updateTimer = setInterval(function () {\n        jobQueue.queue(async function () {\n            await updateOverlay(ctx);\n        });\n    }, 1000 / 30); // 30fps\n}\nfunction stopUpdateTimer() {\n    clearInterval(updateTimer);\n}\n//# sourceMappingURL=highlighter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/highlighter.js\n");

/***/ }),

/***/ "../app-backend-core/lib/index.js":
/*!****************************************!*\
  !*** ../app-backend-core/lib/index.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initBackend = void 0;\nvar app_backend_api_1 = __webpack_require__(/*! @vue-devtools/app-backend-api */ \"../app-backend-api/lib/index.js\");\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar global_hook_1 = __webpack_require__(/*! ./global-hook */ \"../app-backend-core/lib/global-hook.js\");\nvar subscriptions_1 = __webpack_require__(/*! ./util/subscriptions */ \"../app-backend-core/lib/util/subscriptions.js\");\nvar highlighter_1 = __webpack_require__(/*! ./highlighter */ \"../app-backend-core/lib/highlighter.js\");\nvar timeline_1 = __webpack_require__(/*! ./timeline */ \"../app-backend-core/lib/timeline.js\");\nvar component_pick_1 = __importDefault(__webpack_require__(/*! ./component-pick */ \"../app-backend-core/lib/component-pick.js\"));\nvar component_1 = __webpack_require__(/*! ./component */ \"../app-backend-core/lib/component.js\");\nvar plugin_1 = __webpack_require__(/*! ./plugin */ \"../app-backend-core/lib/plugin.js\");\nvar app_1 = __webpack_require__(/*! ./app */ \"../app-backend-core/lib/app.js\");\nvar inspector_1 = __webpack_require__(/*! ./inspector */ \"../app-backend-core/lib/inspector.js\");\nvar timeline_screenshot_1 = __webpack_require__(/*! ./timeline-screenshot */ \"../app-backend-core/lib/timeline-screenshot.js\");\nvar perf_1 = __webpack_require__(/*! ./perf */ \"../app-backend-core/lib/perf.js\");\nvar page_config_1 = __webpack_require__(/*! ./page-config */ \"../app-backend-core/lib/page-config.js\");\nvar ctx = (_a = shared_utils_1.target.__vdevtools_ctx) !== null && _a !== void 0 ? _a : null;\nvar connected = (_b = shared_utils_1.target.__vdevtools_connected) !== null && _b !== void 0 ? _b : false;\nasync function initBackend(bridge) {\n    await shared_utils_1.initSharedData({\n        bridge: bridge,\n        persist: false\n    });\n    page_config_1.initOnPageConfig();\n    if (!connected) {\n        // connected = false\n        ctx = shared_utils_1.target.__vdevtools_ctx = app_backend_api_1.createBackendContext({\n            bridge: bridge,\n            hook: global_hook_1.hook\n        });\n        if (global_hook_1.hook.Vue) {\n            connect();\n            app_1._legacy_getAndRegisterApps(global_hook_1.hook.Vue, ctx);\n        }\n        else {\n            global_hook_1.hook.once(shared_utils_1.HookEvents.INIT, function (Vue) {\n                app_1._legacy_getAndRegisterApps(Vue, ctx);\n            });\n        }\n        global_hook_1.hook.on(shared_utils_1.HookEvents.APP_ADD, async function (app) {\n            await app_1.registerApp(app, ctx);\n            // Will init connect\n            global_hook_1.hook.emit(shared_utils_1.HookEvents.INIT);\n        });\n        // Add apps that already sent init\n        if (global_hook_1.hook.apps.length) {\n            global_hook_1.hook.apps.forEach(function (app) {\n                app_1.registerApp(app, ctx);\n                connect();\n            });\n        }\n    }\n    else {\n        ctx.bridge = bridge;\n        connectBridge();\n    }\n}\nexports.initBackend = initBackend;\nasync function connect() {\n    if (connected) {\n        return;\n    }\n    connected = shared_utils_1.target.__vdevtools_connected = true;\n    await app_1.waitForAppsRegistration();\n    connectBridge();\n    ctx.currentTab = shared_utils_1.BuiltinTabs.COMPONENTS;\n    // Apps\n    global_hook_1.hook.on(shared_utils_1.HookEvents.APP_UNMOUNT, function (app) {\n        app_1.removeApp(app, ctx);\n    });\n    // Components\n    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_UPDATED, async function (app, uid, parentUid, component) {\n        try {\n            var id;\n            var appRecord;\n            if (app && uid != null) {\n                id = await component_1.getComponentId(app, uid, ctx);\n                appRecord = await app_1.getAppRecord(app, ctx);\n            }\n            else {\n                id = ctx.currentInspectedComponentId;\n                appRecord = ctx.currentAppRecord;\n            }\n            // Update component inspector\n            if (id && subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.SELECTED_COMPONENT_DATA, function (sub) { return sub.payload.instanceId === id; })) {\n                component_1.sendSelectedComponentData(appRecord, id, ctx);\n            }\n            // Update tree (tags)\n            if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === id; })) {\n                component_1.sendComponentTreeData(appRecord, id, appRecord.componentFilter, 0, ctx);\n            }\n        }\n        catch (e) {\n            if (true) {\n                console.error(e);\n            }\n        }\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_ADDED, async function (app, uid, parentUid, component) {\n        try {\n            var id = await component_1.getComponentId(app, uid, ctx);\n            var appRecord = await app_1.getAppRecord(app, ctx);\n            if (component) {\n                if (component.__VUE_DEVTOOLS_UID__ == null) {\n                    component.__VUE_DEVTOOLS_UID__ = id;\n                }\n                if (!appRecord.instanceMap.has(id)) {\n                    appRecord.instanceMap.set(id, component);\n                }\n            }\n            var parentId = await component_1.getComponentId(app, parentUid, ctx);\n            if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === parentId; })) {\n                requestAnimationFrame(function () {\n                    component_1.sendComponentTreeData(appRecord, parentId, appRecord.componentFilter, null, ctx);\n                });\n            }\n            if (ctx.currentInspectedComponentId === id) {\n                component_1.sendSelectedComponentData(appRecord, id, ctx);\n            }\n        }\n        catch (e) {\n            if (true) {\n                console.error(e);\n            }\n        }\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_REMOVED, async function (app, uid, parentUid, component) {\n        try {\n            var appRecord = await app_1.getAppRecord(app, ctx);\n            var parentId = await component_1.getComponentId(app, parentUid, ctx);\n            if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === parentId; })) {\n                requestAnimationFrame(async function () {\n                    try {\n                        component_1.sendComponentTreeData(await app_1.getAppRecord(app, ctx), parentId, appRecord.componentFilter, null, ctx);\n                    }\n                    catch (e) {\n                        if (true) {\n                            console.error(e);\n                        }\n                    }\n                });\n            }\n            var id = await component_1.getComponentId(app, uid, ctx);\n            if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.SELECTED_COMPONENT_DATA, function (sub) { return sub.payload.instanceId === id; })) {\n                component_1.sendEmptyComponentData(id, ctx);\n            }\n            appRecord.instanceMap.delete(id);\n        }\n        catch (e) {\n            if (true) {\n                console.error(e);\n            }\n        }\n    });\n    // Component perf\n    global_hook_1.hook.on(shared_utils_1.HookEvents.PERFORMANCE_START, function (app, uid, vm, type, time) {\n        perf_1.performanceMarkStart(app, uid, vm, type, time, ctx);\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.PERFORMANCE_END, function (app, uid, vm, type, time) {\n        perf_1.performanceMarkEnd(app, uid, vm, type, time, ctx);\n    });\n    perf_1.handleAddPerformanceTag(ctx);\n    // Highlighter\n    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_HIGHLIGHT, function (instanceId) {\n        highlighter_1.highlight(ctx.currentAppRecord.instanceMap.get(instanceId), ctx);\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_UNHIGHLIGHT, function () {\n        highlighter_1.unHighlight();\n    });\n    // Timeline\n    timeline_1.setupTimeline(ctx);\n    global_hook_1.hook.on(shared_utils_1.HookEvents.TIMELINE_LAYER_ADDED, function (options, plugin) {\n        ctx.timelineLayers.push(Object.assign({}, options,\n            {app: plugin.descriptor.app,\n            plugin: plugin,\n            events: []}));\n        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_LAYER_ADD, {});\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.TIMELINE_EVENT_ADDED, function (options, plugin) {\n        timeline_1.addTimelineEvent(options, plugin.descriptor.app, ctx);\n    });\n    // Custom inspectors\n    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_ADD, function (options, plugin) {\n        ctx.customInspectors.push(Object.assign({}, options,\n            {app: plugin.descriptor.app,\n            plugin: plugin,\n            treeFilter: '',\n            selectedNodeId: null}));\n        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_ADD, {});\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_TREE, function (inspectorId, plugin) {\n        var inspector = inspector_1.getInspector(inspectorId, plugin.descriptor.app, ctx);\n        if (inspector) {\n            inspector_1.sendInspectorTree(inspector, ctx);\n        }\n        else {\n            console.error((\"Inspector \" + inspectorId + \" not found\"));\n        }\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_STATE, function (inspectorId, plugin) {\n        var inspector = inspector_1.getInspector(inspectorId, plugin.descriptor.app, ctx);\n        if (inspector) {\n            inspector_1.sendInspectorState(inspector, ctx);\n        }\n        else {\n            console.error((\"Inspector \" + inspectorId + \" not found\"));\n        }\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SELECT_NODE, async function (inspectorId, nodeId, plugin) {\n        var inspector = inspector_1.getInspector(inspectorId, plugin.descriptor.app, ctx);\n        if (inspector) {\n            await inspector_1.selectInspectorNode(inspector, nodeId, ctx);\n        }\n        else {\n            console.error((\"Inspector \" + inspectorId + \" not found\"));\n        }\n    });\n    // Plugins\n    plugin_1.addPreviouslyRegisteredPlugins(ctx);\n    plugin_1.addQueuedPlugins(ctx);\n    global_hook_1.hook.on(shared_utils_1.HookEvents.SETUP_DEVTOOLS_PLUGIN, function (pluginDescriptor, setupFn) {\n        plugin_1.addPlugin(pluginDescriptor, setupFn, ctx);\n    });\n    // Legacy flush\n    global_hook_1.hook.off('flush');\n    global_hook_1.hook.on('flush', function () {\n        var _a;\n        if ((_a = ctx.currentAppRecord) === null || _a === void 0 ? void 0 : _a.backend.availableFeatures.includes(app_backend_api_1.BuiltinBackendFeature.FLUSH)) {\n            component_1.sendComponentTreeData(ctx.currentAppRecord, '_root', ctx.currentAppRecord.componentFilter, null, ctx);\n            if (ctx.currentInspectedComponentId) {\n                component_1.sendSelectedComponentData(ctx.currentAppRecord, ctx.currentInspectedComponentId, ctx);\n            }\n        }\n    });\n}\nfunction connectBridge() {\n    // Subscriptions\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_SUBSCRIBE, function (ref) {\n        var type = ref.type;\n        var payload = ref.payload;\n\n        subscriptions_1.subscribe(type, payload);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_UNSUBSCRIBE, function (ref) {\n        var type = ref.type;\n        var payload = ref.payload;\n\n        subscriptions_1.unsubscribe(type, payload);\n    });\n    // Tabs\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TAB_SWITCH, async function (tab) {\n        ctx.currentTab = tab;\n        await highlighter_1.unHighlight();\n    });\n    // Apps\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_APP_LIST, function () {\n        app_1.sendApps(ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_APP_SELECT, async function (id) {\n        if (id == null)\n            { return; }\n        var record = ctx.appRecords.find(function (r) { return r.id === id; });\n        if (!record) {\n            console.error((\"App with id \" + id + \" not found\"));\n        }\n        else {\n            await app_1.selectApp(record, ctx);\n        }\n    });\n    // Components\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_TREE, function (ref) {\n        var instanceId = ref.instanceId;\n        var filter = ref.filter;\n\n        ctx.currentAppRecord.componentFilter = filter;\n        component_1.sendComponentTreeData(ctx.currentAppRecord, instanceId, filter, null, ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_SELECTED_DATA, function (instanceId) {\n        component_1.sendSelectedComponentData(ctx.currentAppRecord, instanceId, ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_EDIT_STATE, function (ref) {\n        var instanceId = ref.instanceId;\n        var dotPath = ref.dotPath;\n        var type = ref.type;\n        var value = ref.value;\n        var newKey = ref.newKey;\n        var remove = ref.remove;\n\n        component_1.editComponentState(instanceId, dotPath, type, { value: value, newKey: newKey, remove: remove }, ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_INSPECT_DOM, async function (ref) {\n        var instanceId = ref.instanceId;\n\n        var instance = component_1.getComponentInstance(ctx.currentAppRecord, instanceId, ctx);\n        if (instance) {\n            var ref$1 = await ctx.api.getComponentRootElements(instance);\n            var el = ref$1[0];\n            if (el) {\n                // @ts-ignore\n                window.__VUE_DEVTOOLS_INSPECT_TARGET__ = el;\n                ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_INSPECT_DOM, null);\n            }\n        }\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_SCROLL_TO, async function (ref) {\n        var instanceId = ref.instanceId;\n\n        var instance = component_1.getComponentInstance(ctx.currentAppRecord, instanceId, ctx);\n        if (instance) {\n            var ref$1 = await ctx.api.getComponentRootElements(instance);\n            var el = ref$1[0];\n            if (el) {\n                if (typeof el.scrollIntoView === 'function') {\n                    el.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'center',\n                        inline: 'center'\n                    });\n                }\n                else {\n                    // Handle nodes that don't implement scrollIntoView\n                    var bounds = await ctx.api.getComponentBounds(instance);\n                    var scrollTarget = document.createElement('div');\n                    scrollTarget.style.position = 'absolute';\n                    scrollTarget.style.width = (bounds.width) + \"px\";\n                    scrollTarget.style.height = (bounds.height) + \"px\";\n                    scrollTarget.style.top = (bounds.top) + \"px\";\n                    scrollTarget.style.left = (bounds.left) + \"px\";\n                    document.body.appendChild(scrollTarget);\n                    scrollTarget.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'center',\n                        inline: 'center'\n                    });\n                    setTimeout(function () {\n                        document.body.removeChild(scrollTarget);\n                    }, 2000);\n                }\n                highlighter_1.highlight(instance, ctx);\n                setTimeout(function () {\n                    highlighter_1.unHighlight();\n                }, 2000);\n            }\n        }\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_RENDER_CODE, async function (ref) {\n        var instanceId = ref.instanceId;\n\n        var instance = component_1.getComponentInstance(ctx.currentAppRecord, instanceId, ctx);\n        if (instance) {\n            var ref$1 = await ctx.api.getComponentRenderCode(instance);\n            var code = ref$1.code;\n            ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_RENDER_CODE, {\n                instanceId: instanceId,\n                code: code\n            });\n        }\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_STATE_ACTION, async function (ref) {\n        var value = ref.value;\n        var actionIndex = ref.actionIndex;\n\n        var rawAction = value._custom.actions[actionIndex];\n        var action = shared_utils_1.revive(rawAction === null || rawAction === void 0 ? void 0 : rawAction.action);\n        if (action) {\n            try {\n                await action();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        else {\n            console.warn((\"Couldn't revive action \" + actionIndex + \" from\"), value);\n        }\n    });\n    // Highlighter\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_MOUSE_OVER, function (instanceId) {\n        highlighter_1.highlight(ctx.currentAppRecord.instanceMap.get(instanceId), ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_MOUSE_OUT, function () {\n        highlighter_1.unHighlight();\n    });\n    // Component picker\n    var componentPicker = new component_pick_1.default(ctx);\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_PICK, function () {\n        componentPicker.startSelecting();\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_PICK_CANCELED, function () {\n        componentPicker.stopSelecting();\n    });\n    // Timeline\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_LAYER_LIST, function () {\n        timeline_1.sendTimelineLayers(ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_SHOW_SCREENSHOT, function (ref) {\n        var screenshot = ref.screenshot;\n\n        timeline_screenshot_1.showScreenshot(screenshot, ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_CLEAR, async function () {\n        await timeline_1.clearTimeline(ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_EVENT_DATA, async function (ref) {\n        var id = ref.id;\n\n        await timeline_1.sendTimelineEventData(id, ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_LAYER_LOAD_EVENTS, function (ref) {\n        var appId = ref.appId;\n        var layerId = ref.layerId;\n\n        timeline_1.sendTimelineLayerEvents(appId, layerId, ctx);\n    });\n    // Custom inspectors\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_LIST, function () {\n        inspector_1.sendCustomInspectors(ctx);\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_TREE, function (ref) {\n        var inspectorId = ref.inspectorId;\n        var appId = ref.appId;\n        var treeFilter = ref.treeFilter;\n\n        var inspector = inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);\n        if (inspector) {\n            inspector.treeFilter = treeFilter;\n            inspector_1.sendInspectorTree(inspector, ctx);\n        }\n        else {\n            console.error((\"Inspector \" + inspectorId + \" not found\"));\n        }\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_STATE, function (ref) {\n        var inspectorId = ref.inspectorId;\n        var appId = ref.appId;\n        var nodeId = ref.nodeId;\n\n        var inspector = inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);\n        if (inspector) {\n            inspector.selectedNodeId = nodeId;\n            inspector_1.sendInspectorState(inspector, ctx);\n        }\n        else {\n            console.error((\"Inspector \" + inspectorId + \" not found\"));\n        }\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_EDIT_STATE, async function (ref) {\n        var inspectorId = ref.inspectorId;\n        var appId = ref.appId;\n        var nodeId = ref.nodeId;\n        var path = ref.path;\n        var type = ref.type;\n        var payload = ref.payload;\n\n        var inspector = inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);\n        if (inspector) {\n            await inspector_1.editInspectorState(inspector, nodeId, path, type, payload, ctx);\n            inspector.selectedNodeId = nodeId;\n            await inspector_1.sendInspectorState(inspector, ctx);\n        }\n        else {\n            console.error((\"Inspector \" + inspectorId + \" not found\"));\n        }\n    });\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_ACTION, async function (ref) {\n        var inspectorId = ref.inspectorId;\n        var appId = ref.appId;\n        var actionIndex = ref.actionIndex;\n\n        var inspector = inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);\n        if (inspector) {\n            var action = inspector.actions[actionIndex];\n            try {\n                await action.action();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        else {\n            console.error((\"Inspector \" + inspectorId + \" not found\"));\n        }\n    });\n    // Misc\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_LOG, function (payload) {\n        var value = payload.value;\n        if (payload.serialized) {\n            value = shared_utils_1.parse(value, payload.revive);\n        }\n        else if (payload.revive) {\n            value = shared_utils_1.revive(value);\n        }\n        console[payload.level](value);\n    });\n    // Plugins\n    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_DEVTOOLS_PLUGIN_LIST, function () {\n        plugin_1.sendPluginList(ctx);\n    });\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/index.js\n");

/***/ }),

/***/ "../app-backend-core/lib/inspector.js":
/*!********************************************!*\
  !*** ../app-backend-core/lib/inspector.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.selectInspectorNode = exports.sendCustomInspectors = exports.editInspectorState = exports.sendInspectorState = exports.sendInspectorTree = exports.getInspectorWithAppId = exports.getInspector = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar app_1 = __webpack_require__(/*! ./app */ \"../app-backend-core/lib/app.js\");\nfunction getInspector(inspectorId, app, ctx) {\n    return ctx.customInspectors.find(function (i) { return i.id === inspectorId && i.app === app; });\n}\nexports.getInspector = getInspector;\nfunction getInspectorWithAppId(inspectorId, appId, ctx) {\n    return ctx.customInspectors.find(function (i) { return i.id === inspectorId && app_1.getAppRecordId(i.app) === appId; });\n}\nexports.getInspectorWithAppId = getInspectorWithAppId;\nasync function sendInspectorTree(inspector, ctx) {\n    var rootNodes = await ctx.api.getInspectorTree(inspector.id, inspector.app, inspector.treeFilter);\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_TREE, {\n        appId: app_1.getAppRecordId(inspector.app),\n        inspectorId: inspector.id,\n        rootNodes: rootNodes\n    });\n}\nexports.sendInspectorTree = sendInspectorTree;\nasync function sendInspectorState(inspector, ctx) {\n    var state = inspector.selectedNodeId ? await ctx.api.getInspectorState(inspector.id, inspector.app, inspector.selectedNodeId) : null;\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_STATE, {\n        appId: app_1.getAppRecordId(inspector.app),\n        inspectorId: inspector.id,\n        state: shared_utils_1.stringify(state)\n    });\n}\nexports.sendInspectorState = sendInspectorState;\nasync function editInspectorState(inspector, nodeId, dotPath, type, state, ctx) {\n    await ctx.api.editInspectorState(inspector.id, inspector.app, nodeId, dotPath, type, Object.assign({}, state,\n        {value: state.value != null ? shared_utils_1.parse(state.value, true) : state.value}));\n}\nexports.editInspectorState = editInspectorState;\nasync function sendCustomInspectors(ctx) {\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_LIST, {\n        inspectors: ctx.customInspectors.map(function (i) {\n            var _a;\n            return ({\n                id: i.id,\n                appId: app_1.getAppRecordId(i.app),\n                pluginId: i.plugin.descriptor.id,\n                label: i.label,\n                icon: i.icon,\n                treeFilterPlaceholder: i.treeFilterPlaceholder,\n                stateFilterPlaceholder: i.stateFilterPlaceholder,\n                noSelectionText: i.noSelectionText,\n                actions: (_a = i.actions) === null || _a === void 0 ? void 0 : _a.map(function (a) { return ({\n                    icon: a.icon,\n                    tooltip: a.tooltip\n                }); })\n            });\n        })\n    });\n}\nexports.sendCustomInspectors = sendCustomInspectors;\nasync function selectInspectorNode(inspector, nodeId, ctx) {\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_SELECT_NODE, {\n        appId: app_1.getAppRecordId(inspector.app),\n        inspectorId: inspector.id,\n        nodeId: nodeId\n    });\n}\nexports.selectInspectorNode = selectInspectorNode;\n//# sourceMappingURL=inspector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/inspector.js\n");

/***/ }),

/***/ "../app-backend-core/lib/legacy/scan.js":
/*!**********************************************!*\
  !*** ../app-backend-core/lib/legacy/scan.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.scan = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar rootInstances = [];\nvar rootUID = 0;\n/**\n * Scan the page for root level Vue instances.\n */\nfunction scan() {\n    rootInstances.length = 0;\n    var inFragment = false;\n    var currentFragment = null;\n    // eslint-disable-next-line no-inner-declarations\n    function processInstance(instance) {\n        if (instance) {\n            if (rootInstances.indexOf(instance.$root) === -1) {\n                instance = instance.$root;\n            }\n            if (instance._isFragment) {\n                inFragment = true;\n                currentFragment = instance;\n            }\n            // respect Vue.config.devtools option\n            var baseVue = instance.constructor;\n            while (baseVue.super) {\n                baseVue = baseVue.super;\n            }\n            if (baseVue.config && baseVue.config.devtools) {\n                // give a unique id to root instance so we can\n                // 'namespace' its children\n                if (typeof instance.__VUE_DEVTOOLS_ROOT_UID__ === 'undefined') {\n                    instance.__VUE_DEVTOOLS_ROOT_UID__ = ++rootUID;\n                }\n                rootInstances.push(instance);\n            }\n            return true;\n        }\n    }\n    if (shared_utils_1.isBrowser) {\n        var walkDocument = function (document) {\n            walk(document, function (node) {\n                if (inFragment) {\n                    if (node === currentFragment._fragmentEnd) {\n                        inFragment = false;\n                        currentFragment = null;\n                    }\n                    return true;\n                }\n                var instance = node.__vue__;\n                return processInstance(instance);\n            });\n        };\n        walkDocument(document);\n        var iframes = document.querySelectorAll('iframe');\n        for (var iframe of iframes) {\n            try {\n                walkDocument(iframe.contentDocument);\n            }\n            catch (e) {\n                // Ignore\n            }\n        }\n    }\n    else {\n        if (Array.isArray(shared_utils_1.target.__VUE_ROOT_INSTANCES__)) {\n            shared_utils_1.target.__VUE_ROOT_INSTANCES__.map(processInstance);\n        }\n    }\n    return rootInstances;\n}\nexports.scan = scan;\n/**\n * DOM walk helper\n *\n * @param {NodeList} nodes\n * @param {Function} fn\n */\nfunction walk(node, fn) {\n    if (node.childNodes) {\n        for (var i = 0, l = node.childNodes.length; i < l; i++) {\n            var child = node.childNodes[i];\n            var stop = fn(child);\n            if (!stop) {\n                walk(child, fn);\n            }\n        }\n    }\n    // also walk shadow DOM\n    if (node.shadowRoot) {\n        walk(node.shadowRoot, fn);\n    }\n}\n//# sourceMappingURL=scan.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL2xlZ2FjeS9zY2FuLmpzPzllNWQiXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3RCQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7QUFDekJDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLFNBQVMsSUFBSSxHQUFHO0FBQ2hCLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDN0IsSUFBSUEsR0FBRyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFDM0IsSUFBSUEsR0FBRyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDL0I7QUFDQSxJQUFJLFNBQVMsZUFBZSxDQUFDLFFBQVEsRUFBRTtBQUN2QyxRQUFRLElBQUksUUFBUSxFQUFFO0FBQ3RCLFlBQVksSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUM5RCxnQkFBZ0IsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDMUMsYUFBYTtBQUNiLFlBQVksSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO0FBQ3RDLGdCQUFnQixVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ2xDLGdCQUFnQixlQUFlLEdBQUcsUUFBUSxDQUFDO0FBQzNDLGFBQWE7QUFDYjtBQUNBLFlBQVlBLEdBQUcsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztBQUMvQyxZQUFZLE9BQU8sT0FBTyxDQUFDLEtBQUssRUFBRTtBQUNsQyxnQkFBZ0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDeEMsYUFBYTtBQUNiLFlBQVksSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO0FBQzNEO0FBQ0E7QUFDQSxnQkFBZ0IsSUFBSSxPQUFPLFFBQVEsQ0FBQyx5QkFBeUIsS0FBSyxXQUFXLEVBQUU7QUFDL0Usb0JBQW9CLFFBQVEsQ0FBQyx5QkFBeUIsR0FBRyxFQUFFLE9BQU8sQ0FBQztBQUNuRSxpQkFBaUI7QUFDakIsZ0JBQWdCLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0MsYUFBYTtBQUNiLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULEtBQUs7QUFDTCxJQUFJLElBQUksY0FBYyxDQUFDLFNBQVMsRUFBRTtBQUNsQyxRQUFRRCxHQUFLLENBQUMsWUFBWSxhQUFHLFNBQVEsQ0FBSTtBQUN6QyxZQUFZLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxJQUFJLEVBQUU7QUFDM0MsZ0JBQWdCLElBQUksVUFBVSxFQUFFO0FBQ2hDLG9CQUFvQixJQUFJLElBQUksS0FBSyxlQUFlLENBQUMsWUFBWSxFQUFFO0FBQy9ELHdCQUF3QixVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzNDLHdCQUF3QixlQUFlLEdBQUcsSUFBSSxDQUFDO0FBQy9DLHFCQUFxQjtBQUNyQixvQkFBb0IsT0FBTyxJQUFJLENBQUM7QUFDaEMsaUJBQWlCO0FBQ2pCLGdCQUFnQkEsR0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzlDLGdCQUFnQixPQUFPLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqRCxhQUFhLENBQUMsQ0FBQztBQUNmLFNBQVMsQ0FBQztBQUNWLFFBQVEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLFFBQVFBLEdBQUssQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVELFFBQVEsS0FBS0EsR0FBSyxDQUFDLE1BQU0sSUFBSSxPQUFPLEVBQUU7QUFDdEMsWUFBWSxJQUFJO0FBQ2hCLGdCQUFnQixZQUFZLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3JELGFBQWE7QUFDYixZQUFZLE9BQU8sQ0FBQyxFQUFFO0FBQ3RCO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0wsU0FBUztBQUNULFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsRUFBRTtBQUN6RSxZQUFZLGNBQWMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzlFLFNBQVM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBQ0QsWUFBWSxHQUFHLElBQUksQ0FBQztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQ3hCLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ3pCLFFBQVEsS0FBS0MsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDaEUsWUFBWUQsR0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLFlBQVlBLEdBQUssQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLFlBQVksSUFBSSxDQUFDLElBQUksRUFBRTtBQUN2QixnQkFBZ0IsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoQyxhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ3pCLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbEMsS0FBSztBQUNMLENBQUM7QUFDRCIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC1jb3JlL2xpYi9sZWdhY3kvc2Nhbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2FuID0gdm9pZCAwO1xuY29uc3Qgc2hhcmVkX3V0aWxzXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9zaGFyZWQtdXRpbHNcIik7XG5jb25zdCByb290SW5zdGFuY2VzID0gW107XG5sZXQgcm9vdFVJRCA9IDA7XG4vKipcbiAqIFNjYW4gdGhlIHBhZ2UgZm9yIHJvb3QgbGV2ZWwgVnVlIGluc3RhbmNlcy5cbiAqL1xuZnVuY3Rpb24gc2NhbigpIHtcbiAgICByb290SW5zdGFuY2VzLmxlbmd0aCA9IDA7XG4gICAgbGV0IGluRnJhZ21lbnQgPSBmYWxzZTtcbiAgICBsZXQgY3VycmVudEZyYWdtZW50ID0gbnVsbDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0luc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHJvb3RJbnN0YW5jZXMuaW5kZXhPZihpbnN0YW5jZS4kcm9vdCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS4kcm9vdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5faXNGcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIGluRnJhZ21lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRGcmFnbWVudCA9IGluc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVzcGVjdCBWdWUuY29uZmlnLmRldnRvb2xzIG9wdGlvblxuICAgICAgICAgICAgbGV0IGJhc2VWdWUgPSBpbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIHdoaWxlIChiYXNlVnVlLnN1cGVyKSB7XG4gICAgICAgICAgICAgICAgYmFzZVZ1ZSA9IGJhc2VWdWUuc3VwZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmFzZVZ1ZS5jb25maWcgJiYgYmFzZVZ1ZS5jb25maWcuZGV2dG9vbHMpIHtcbiAgICAgICAgICAgICAgICAvLyBnaXZlIGEgdW5pcXVlIGlkIHRvIHJvb3QgaW5zdGFuY2Ugc28gd2UgY2FuXG4gICAgICAgICAgICAgICAgLy8gJ25hbWVzcGFjZScgaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5fX1ZVRV9ERVZUT09MU19ST09UX1VJRF9fID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5fX1ZVRV9ERVZUT09MU19ST09UX1VJRF9fID0gKytyb290VUlEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb290SW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNoYXJlZF91dGlsc18xLmlzQnJvd3Nlcikge1xuICAgICAgICBjb25zdCB3YWxrRG9jdW1lbnQgPSBkb2N1bWVudCA9PiB7XG4gICAgICAgICAgICB3YWxrKGRvY3VtZW50LCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChpbkZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlID09PSBjdXJyZW50RnJhZ21lbnQuX2ZyYWdtZW50RW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbkZyYWdtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5vZGUuX192dWVfXztcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0luc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB3YWxrRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgICAgICBjb25zdCBpZnJhbWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaWZyYW1lJyk7XG4gICAgICAgIGZvciAoY29uc3QgaWZyYW1lIG9mIGlmcmFtZXMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgd2Fsa0RvY3VtZW50KGlmcmFtZS5jb250ZW50RG9jdW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX1JPT1RfSU5TVEFOQ0VTX18pKSB7XG4gICAgICAgICAgICBzaGFyZWRfdXRpbHNfMS50YXJnZXQuX19WVUVfUk9PVF9JTlNUQU5DRVNfXy5tYXAocHJvY2Vzc0luc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcm9vdEluc3RhbmNlcztcbn1cbmV4cG9ydHMuc2NhbiA9IHNjYW47XG4vKipcbiAqIERPTSB3YWxrIGhlbHBlclxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiB3YWxrKG5vZGUsIGZuKSB7XG4gICAgaWYgKG5vZGUuY2hpbGROb2Rlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZE5vZGVzW2ldO1xuICAgICAgICAgICAgY29uc3Qgc3RvcCA9IGZuKGNoaWxkKTtcbiAgICAgICAgICAgIGlmICghc3RvcCkge1xuICAgICAgICAgICAgICAgIHdhbGsoY2hpbGQsIGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhbHNvIHdhbGsgc2hhZG93IERPTVxuICAgIGlmIChub2RlLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgd2Fsayhub2RlLnNoYWRvd1Jvb3QsIGZuKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-core/lib/legacy/scan.js\n");

/***/ }),

/***/ "../app-backend-core/lib/page-config.js":
/*!**********************************************!*\
  !*** ../app-backend-core/lib/page-config.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initOnPageConfig = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar shared_data_1 = __importDefault(__webpack_require__(/*! @vue-devtools/shared-utils/lib/shared-data */ \"../shared-utils/lib/shared-data.js\"));\nfunction initOnPageConfig() {\n    // User project devtools config\n    if (Object.hasOwnProperty.call(shared_utils_1.target, 'VUE_DEVTOOLS_CONFIG')) {\n        var config = shared_utils_1.target.VUE_DEVTOOLS_CONFIG;\n        // Open in editor\n        if (Object.hasOwnProperty.call(config, 'openInEditorHost')) {\n            shared_data_1.default.openInEditorHost = config.openInEditorHost;\n        }\n    }\n}\nexports.initOnPageConfig = initOnPageConfig;\n//# sourceMappingURL=page-config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL3BhZ2UtY29uZmlnLmpzPzljOGMiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSSxlQUFlLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsR0FBRyxFQUFFO0FBQ3ZFLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzlELENBQUMsQ0FBQztBQUNGLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELHdCQUF3QixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ2xDQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsbUJBQU8sQ0FBQyxzRkFBNEMsQ0FBQyxDQUFDLENBQUM7QUFDN0YsU0FBUyxnQkFBZ0IsR0FBRztBQUM1QjtBQUNBLElBQUksSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLHFCQUFxQixDQUFDLEVBQUU7QUFDbEYsUUFBUUEsR0FBSyxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDO0FBQ2pFO0FBQ0EsUUFBUSxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxFQUFFO0FBQ3BFLFlBQVksYUFBYSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7QUFDN0UsU0FBUztBQUNULEtBQUs7QUFDTCxDQUFDO0FBQ0Qsd0JBQXdCLEdBQUcsZ0JBQWdCLENBQUM7QUFDNUMiLCJmaWxlIjoiLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvcGFnZS1jb25maWcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5pdE9uUGFnZUNvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xuY29uc3Qgc2hhcmVkX2RhdGFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9zaGFyZWQtdXRpbHMvbGliL3NoYXJlZC1kYXRhXCIpKTtcbmZ1bmN0aW9uIGluaXRPblBhZ2VDb25maWcoKSB7XG4gICAgLy8gVXNlciBwcm9qZWN0IGRldnRvb2xzIGNvbmZpZ1xuICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChzaGFyZWRfdXRpbHNfMS50YXJnZXQsICdWVUVfREVWVE9PTFNfQ09ORklHJykpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gc2hhcmVkX3V0aWxzXzEudGFyZ2V0LlZVRV9ERVZUT09MU19DT05GSUc7XG4gICAgICAgIC8vIE9wZW4gaW4gZWRpdG9yXG4gICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdvcGVuSW5FZGl0b3JIb3N0JykpIHtcbiAgICAgICAgICAgIHNoYXJlZF9kYXRhXzEuZGVmYXVsdC5vcGVuSW5FZGl0b3JIb3N0ID0gY29uZmlnLm9wZW5JbkVkaXRvckhvc3Q7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmluaXRPblBhZ2VDb25maWcgPSBpbml0T25QYWdlQ29uZmlnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZS1jb25maWcuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-core/lib/page-config.js\n");

/***/ }),

/***/ "../app-backend-core/lib/perf.js":
/*!***************************************!*\
  !*** ../app-backend-core/lib/perf.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.handleAddPerformanceTag = exports.performanceMarkEnd = exports.performanceMarkStart = void 0;\nvar shared_data_1 = __importDefault(__webpack_require__(/*! @vue-devtools/shared-utils/lib/shared-data */ \"../shared-utils/lib/shared-data.js\"));\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar timeline_1 = __webpack_require__(/*! ./timeline */ \"../app-backend-core/lib/timeline.js\");\nvar app_1 = __webpack_require__(/*! ./app */ \"../app-backend-core/lib/app.js\");\nvar component_1 = __webpack_require__(/*! ./component */ \"../app-backend-core/lib/component.js\");\nvar subscriptions_1 = __webpack_require__(/*! ./util/subscriptions */ \"../app-backend-core/lib/util/subscriptions.js\");\nasync function performanceMarkStart(app, uid, instance, type, time, ctx) {\n    try {\n        if (!shared_data_1.default.performanceMonitoringEnabled)\n            { return; }\n        var appRecord = await app_1.getAppRecord(app, ctx);\n        var componentName = await ctx.api.getComponentName(instance);\n        var groupId = ctx.perfUniqueGroupId++;\n        var groupKey = uid + \"-\" + type;\n        appRecord.perfGroupIds.set(groupKey, { groupId: groupId, time: time });\n        timeline_1.addTimelineEvent({\n            layerId: 'performance',\n            event: {\n                time: time,\n                data: {\n                    component: componentName,\n                    type: type,\n                    measure: 'start'\n                },\n                title: componentName,\n                subtitle: type,\n                groupId: groupId\n            }\n        }, app, ctx);\n    }\n    catch (e) {\n        if (true) {\n            console.error(e);\n        }\n    }\n}\nexports.performanceMarkStart = performanceMarkStart;\nasync function performanceMarkEnd(app, uid, instance, type, time, ctx) {\n    try {\n        if (!shared_data_1.default.performanceMonitoringEnabled)\n            { return; }\n        var appRecord = await app_1.getAppRecord(app, ctx);\n        var componentName = await ctx.api.getComponentName(instance);\n        var groupKey = uid + \"-\" + type;\n        var ref = appRecord.perfGroupIds.get(groupKey);\n        var groupId = ref.groupId;\n        var startTime = ref.time;\n        var duration = time - startTime;\n        timeline_1.addTimelineEvent({\n            layerId: 'performance',\n            event: {\n                time: time,\n                data: {\n                    component: componentName,\n                    type: type,\n                    measure: 'end',\n                    duration: {\n                        _custom: {\n                            type: 'Duration',\n                            value: duration,\n                            display: (duration + \" ms\")\n                        }\n                    }\n                },\n                title: componentName,\n                subtitle: type,\n                groupId: groupId\n            }\n        }, app, ctx);\n        // Mark on component\n        var tooSlow = duration > 10;\n        if (tooSlow || instance.__VUE_DEVTOOLS_SLOW__) {\n            var change = false;\n            if (tooSlow && !instance.__VUE_DEVTOOLS_SLOW__) {\n                instance.__VUE_DEVTOOLS_SLOW__ = {\n                    duration: null,\n                    measures: {}\n                };\n            }\n            var data = instance.__VUE_DEVTOOLS_SLOW__;\n            if (tooSlow && (data.duration == null || data.duration < duration)) {\n                data.duration = duration;\n                change = true;\n            }\n            if (data.measures[type] == null || data.measures[type] < duration) {\n                data.measures[type] = duration;\n                change = true;\n            }\n            if (change) {\n                // Update component tree\n                var id = await component_1.getComponentId(app, uid, ctx);\n                if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === id; })) {\n                    requestAnimationFrame(function () {\n                        component_1.sendComponentTreeData(appRecord, id, ctx.currentAppRecord.componentFilter, null, ctx);\n                    });\n                }\n            }\n        }\n    }\n    catch (e) {\n        if (true) {\n            console.error(e);\n        }\n    }\n}\nexports.performanceMarkEnd = performanceMarkEnd;\nfunction handleAddPerformanceTag(ctx) {\n    ctx.api.on.visitComponentTree(function (payload) {\n        if (payload.componentInstance.__VUE_DEVTOOLS_SLOW__) {\n            var ref = payload.componentInstance.__VUE_DEVTOOLS_SLOW__;\n            var duration = ref.duration;\n            var measures = ref.measures;\n            var tooltip = '<div class=\"grid grid-cols-2 gap-2 font-mono text-xs\">';\n            for (var type in measures) {\n                var d = measures[type];\n                tooltip += \"<div>\" + type + \"</div><div class=\\\"text-right text-black rounded px-1 \" + (d > 30 ? 'bg-red-400' : d > 10 ? 'bg-yellow-400' : 'bg-green-400') + \"\\\">\" + d + \" ms</div>\";\n            }\n            tooltip += '</div>';\n            payload.treeNode.tags.push({\n                backgroundColor: duration > 30 ? 0xF87171 : 0xFBBF24,\n                textColor: 0x000000,\n                label: (duration + \" ms\"),\n                tooltip: tooltip\n            });\n        }\n    });\n}\nexports.handleAddPerformanceTag = handleAddPerformanceTag;\n//# sourceMappingURL=perf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/perf.js\n");

/***/ }),

/***/ "../app-backend-core/lib/plugin.js":
/*!*****************************************!*\
  !*** ../app-backend-core/lib/plugin.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializePlugin = exports.sendPluginList = exports.addPreviouslyRegisteredPlugins = exports.addQueuedPlugins = exports.addPlugin = void 0;\nvar app_backend_api_1 = __webpack_require__(/*! @vue-devtools/app-backend-api */ \"../app-backend-api/lib/index.js\");\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar app_1 = __webpack_require__(/*! ./app */ \"../app-backend-core/lib/app.js\");\nfunction addPlugin(pluginDescriptor, setupFn, ctx) {\n    var plugin = {\n        descriptor: pluginDescriptor,\n        setupFn: setupFn,\n        error: null\n    };\n    ctx.currentPlugin = plugin;\n    try {\n        var api = new app_backend_api_1.DevtoolsPluginApiInstance(plugin, ctx);\n        setupFn(api);\n    }\n    catch (e) {\n        plugin.error = e;\n        console.error(e);\n    }\n    ctx.currentPlugin = null;\n    ctx.plugins.push(plugin);\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_DEVTOOLS_PLUGIN_ADD, {\n        plugin: serializePlugin(plugin)\n    });\n    var targetList = shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__ = shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__ || [];\n    targetList.push({\n        pluginDescriptor: pluginDescriptor,\n        setupFn: setupFn\n    });\n}\nexports.addPlugin = addPlugin;\nasync function addQueuedPlugins(ctx) {\n    if (shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__ && Array.isArray(shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__)) {\n        for (var plugin of shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__) {\n            addPlugin(plugin.pluginDescriptor, plugin.setupFn, ctx);\n        }\n        shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__ = null;\n    }\n}\nexports.addQueuedPlugins = addQueuedPlugins;\nasync function addPreviouslyRegisteredPlugins(ctx) {\n    if (shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__ && Array.isArray(shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__)) {\n        for (var plugin of shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__) {\n            addPlugin(plugin.pluginDescriptor, plugin.setupFn, ctx);\n        }\n    }\n}\nexports.addPreviouslyRegisteredPlugins = addPreviouslyRegisteredPlugins;\nfunction sendPluginList(ctx) {\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_DEVTOOLS_PLUGIN_LIST, {\n        plugins: ctx.plugins.map(function (p) { return serializePlugin(p); })\n    });\n}\nexports.sendPluginList = sendPluginList;\nfunction serializePlugin(plugin) {\n    return {\n        id: plugin.descriptor.id,\n        label: plugin.descriptor.label,\n        appId: app_1.getAppRecordId(plugin.descriptor.app),\n        packageName: plugin.descriptor.packageName,\n        homepage: plugin.descriptor.homepage,\n        logo: plugin.descriptor.logo,\n        componentStateTypes: plugin.descriptor.componentStateTypes\n    };\n}\nexports.serializePlugin = serializePlugin;\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL3BsdWdpbi5qcz82NTRkIl0sIm5hbWVzIjpbImNvbnN0Il0sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELHVCQUF1QixHQUFHLHNCQUFzQixHQUFHLHNDQUFzQyxHQUFHLHdCQUF3QixHQUFHLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ2xKQSxHQUFLLENBQUMsaUJBQWlCLEdBQUcsbUJBQU8sQ0FBQyxzRUFBK0IsQ0FBQyxDQUFDO0FBQ25FQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLEtBQUssR0FBRyxtQkFBTyxDQUFDLDZDQUFPLENBQUMsQ0FBQztBQUMvQixTQUFTLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFO0FBQ25ELElBQUlBLEdBQUssQ0FBQyxNQUFNLEdBQUc7QUFDbkIsUUFBUSxVQUFVLEVBQUUsZ0JBQWdCO0FBQ3BDLGlCQUFRLE9BQU87QUFDZixRQUFRLEtBQUssRUFBRSxJQUFJO0FBQ25CLEtBQUssQ0FBQztBQUNOLElBQUksR0FBRyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFDL0IsSUFBSSxJQUFJO0FBQ1IsUUFBUUEsR0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqRixRQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQixLQUFLO0FBQ0wsSUFBSSxPQUFPLENBQUMsRUFBRTtBQUNkLFFBQVEsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDekIsUUFBUSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLEtBQUs7QUFDTCxJQUFJLEdBQUcsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzdCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLDRCQUE0QixFQUFFO0FBQzlFLFFBQVEsTUFBTSxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUM7QUFDdkMsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJQSxHQUFLLENBQUMsVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsbUNBQW1DLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxtQ0FBbUMsSUFBSSxFQUFFLENBQUM7QUFDbkosSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQ3BCLDBCQUFRLGdCQUFnQjtBQUN4QixpQkFBUSxPQUFPO0FBQ2YsS0FBSyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBQ0QsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0FBQzlCLGVBQWUsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO0FBQ3JDLElBQUksSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLHdCQUF3QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO0FBQ3pILFFBQVEsS0FBS0EsR0FBSyxDQUFDLE1BQU0sSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFO0FBQzdFLFlBQVksU0FBUyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFNBQVM7QUFDVCxRQUFRLGNBQWMsQ0FBQyxNQUFNLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO0FBQzlELEtBQUs7QUFDTCxDQUFDO0FBQ0Qsd0JBQXdCLEdBQUcsZ0JBQWdCLENBQUM7QUFDNUMsZUFBZSw4QkFBOEIsQ0FBQyxHQUFHLEVBQUU7QUFDbkQsSUFBSSxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsbUNBQW1DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxDQUFDLEVBQUU7QUFDL0ksUUFBUSxLQUFLQSxHQUFLLENBQUMsTUFBTSxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsbUNBQW1DLEVBQUU7QUFDeEYsWUFBWSxTQUFTLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEUsU0FBUztBQUNULEtBQUs7QUFDTCxDQUFDO0FBQ0Qsc0NBQXNDLEdBQUcsOEJBQThCLENBQUM7QUFDeEUsU0FBUyxjQUFjLENBQUMsR0FBRyxFQUFFO0FBQzdCLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyw2QkFBNkIsRUFBRTtBQUMvRSxRQUFRLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsV0FBQyxFQUFDLFVBQUksZUFBZSxDQUFDLENBQUMsSUFBQyxDQUFDO0FBQ3pELEtBQUssQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUNELHNCQUFzQixHQUFHLGNBQWMsQ0FBQztBQUN4QyxTQUFTLGVBQWUsQ0FBQyxNQUFNLEVBQUU7QUFDakMsSUFBSSxPQUFPO0FBQ1gsUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ2hDLFFBQVEsS0FBSyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSztBQUN0QyxRQUFRLEtBQUssRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO0FBQzFELFFBQVEsV0FBVyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVztBQUNsRCxRQUFRLFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVE7QUFDNUMsUUFBUSxJQUFJLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJO0FBQ3BDLFFBQVEsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUI7QUFDbEUsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNELHVCQUF1QixHQUFHLGVBQWUsQ0FBQztBQUMxQyIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC1jb3JlL2xpYi9wbHVnaW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VyaWFsaXplUGx1Z2luID0gZXhwb3J0cy5zZW5kUGx1Z2luTGlzdCA9IGV4cG9ydHMuYWRkUHJldmlvdXNseVJlZ2lzdGVyZWRQbHVnaW5zID0gZXhwb3J0cy5hZGRRdWV1ZWRQbHVnaW5zID0gZXhwb3J0cy5hZGRQbHVnaW4gPSB2b2lkIDA7XG5jb25zdCBhcHBfYmFja2VuZF9hcGlfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL2FwcC1iYWNrZW5kLWFwaVwiKTtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xuY29uc3QgYXBwXzEgPSByZXF1aXJlKFwiLi9hcHBcIik7XG5mdW5jdGlvbiBhZGRQbHVnaW4ocGx1Z2luRGVzY3JpcHRvciwgc2V0dXBGbiwgY3R4KSB7XG4gICAgY29uc3QgcGx1Z2luID0ge1xuICAgICAgICBkZXNjcmlwdG9yOiBwbHVnaW5EZXNjcmlwdG9yLFxuICAgICAgICBzZXR1cEZuLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gICAgY3R4LmN1cnJlbnRQbHVnaW4gPSBwbHVnaW47XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYXBpID0gbmV3IGFwcF9iYWNrZW5kX2FwaV8xLkRldnRvb2xzUGx1Z2luQXBpSW5zdGFuY2UocGx1Z2luLCBjdHgpO1xuICAgICAgICBzZXR1cEZuKGFwaSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHBsdWdpbi5lcnJvciA9IGU7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICAgIGN0eC5jdXJyZW50UGx1Z2luID0gbnVsbDtcbiAgICBjdHgucGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgY3R4LmJyaWRnZS5zZW5kKHNoYXJlZF91dGlsc18xLkJyaWRnZUV2ZW50cy5UT19GUk9OVF9ERVZUT09MU19QTFVHSU5fQURELCB7XG4gICAgICAgIHBsdWdpbjogc2VyaWFsaXplUGx1Z2luKHBsdWdpbilcbiAgICB9KTtcbiAgICBjb25zdCB0YXJnZXRMaXN0ID0gc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1JFR0lTVEVSRURfUExVR0lOU19fID0gc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1JFR0lTVEVSRURfUExVR0lOU19fIHx8IFtdO1xuICAgIHRhcmdldExpc3QucHVzaCh7XG4gICAgICAgIHBsdWdpbkRlc2NyaXB0b3IsXG4gICAgICAgIHNldHVwRm5cbiAgICB9KTtcbn1cbmV4cG9ydHMuYWRkUGx1Z2luID0gYWRkUGx1Z2luO1xuYXN5bmMgZnVuY3Rpb24gYWRkUXVldWVkUGx1Z2lucyhjdHgpIHtcbiAgICBpZiAoc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyAmJiBBcnJheS5pc0FycmF5KHNoYXJlZF91dGlsc18xLnRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18pKSB7XG4gICAgICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHNoYXJlZF91dGlsc18xLnRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18pIHtcbiAgICAgICAgICAgIGFkZFBsdWdpbihwbHVnaW4ucGx1Z2luRGVzY3JpcHRvciwgcGx1Z2luLnNldHVwRm4sIGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyA9IG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5hZGRRdWV1ZWRQbHVnaW5zID0gYWRkUXVldWVkUGx1Z2lucztcbmFzeW5jIGZ1bmN0aW9uIGFkZFByZXZpb3VzbHlSZWdpc3RlcmVkUGx1Z2lucyhjdHgpIHtcbiAgICBpZiAoc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1JFR0lTVEVSRURfUExVR0lOU19fICYmIEFycmF5LmlzQXJyYXkoc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1JFR0lTVEVSRURfUExVR0lOU19fKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiBzaGFyZWRfdXRpbHNfMS50YXJnZXQuX19WVUVfREVWVE9PTFNfUkVHSVNURVJFRF9QTFVHSU5TX18pIHtcbiAgICAgICAgICAgIGFkZFBsdWdpbihwbHVnaW4ucGx1Z2luRGVzY3JpcHRvciwgcGx1Z2luLnNldHVwRm4sIGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmFkZFByZXZpb3VzbHlSZWdpc3RlcmVkUGx1Z2lucyA9IGFkZFByZXZpb3VzbHlSZWdpc3RlcmVkUGx1Z2lucztcbmZ1bmN0aW9uIHNlbmRQbHVnaW5MaXN0KGN0eCkge1xuICAgIGN0eC5icmlkZ2Uuc2VuZChzaGFyZWRfdXRpbHNfMS5CcmlkZ2VFdmVudHMuVE9fRlJPTlRfREVWVE9PTFNfUExVR0lOX0xJU1QsIHtcbiAgICAgICAgcGx1Z2luczogY3R4LnBsdWdpbnMubWFwKHAgPT4gc2VyaWFsaXplUGx1Z2luKHApKVxuICAgIH0pO1xufVxuZXhwb3J0cy5zZW5kUGx1Z2luTGlzdCA9IHNlbmRQbHVnaW5MaXN0O1xuZnVuY3Rpb24gc2VyaWFsaXplUGx1Z2luKHBsdWdpbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBwbHVnaW4uZGVzY3JpcHRvci5pZCxcbiAgICAgICAgbGFiZWw6IHBsdWdpbi5kZXNjcmlwdG9yLmxhYmVsLFxuICAgICAgICBhcHBJZDogYXBwXzEuZ2V0QXBwUmVjb3JkSWQocGx1Z2luLmRlc2NyaXB0b3IuYXBwKSxcbiAgICAgICAgcGFja2FnZU5hbWU6IHBsdWdpbi5kZXNjcmlwdG9yLnBhY2thZ2VOYW1lLFxuICAgICAgICBob21lcGFnZTogcGx1Z2luLmRlc2NyaXB0b3IuaG9tZXBhZ2UsXG4gICAgICAgIGxvZ286IHBsdWdpbi5kZXNjcmlwdG9yLmxvZ28sXG4gICAgICAgIGNvbXBvbmVudFN0YXRlVHlwZXM6IHBsdWdpbi5kZXNjcmlwdG9yLmNvbXBvbmVudFN0YXRlVHlwZXNcbiAgICB9O1xufVxuZXhwb3J0cy5zZXJpYWxpemVQbHVnaW4gPSBzZXJpYWxpemVQbHVnaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVnaW4uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-core/lib/plugin.js\n");

/***/ }),

/***/ "../app-backend-core/lib/timeline-builtins.js":
/*!****************************************************!*\
  !*** ../app-backend-core/lib/timeline-builtins.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.builtinLayers = void 0;\nexports.builtinLayers = [\n    {\n        id: 'mouse',\n        label: 'Mouse',\n        color: 0xA451AF,\n        screenshotOverlayRender: function screenshotOverlayRender(event, ref) {\n            var events = ref.events;\n\n            var samePositionEvent = events.find(function (e) { return e !== event && e.renderMeta.textEl && e.data.x === event.data.x && e.data.y === event.data.y; });\n            if (samePositionEvent) {\n                var text$1 = document.createElement('div');\n                text$1.innerText = event.data.type;\n                samePositionEvent.renderMeta.textEl.appendChild(text$1);\n                return false;\n            }\n            var div = document.createElement('div');\n            div.style.position = 'absolute';\n            div.style.left = (event.data.x - 4) + \"px\";\n            div.style.top = (event.data.y - 4) + \"px\";\n            div.style.width = '8px';\n            div.style.height = '8px';\n            div.style.borderRadius = '100%';\n            div.style.backgroundColor = 'rgba(164, 81, 175, 0.5)';\n            var text = document.createElement('div');\n            text.innerText = event.data.type;\n            text.style.color = '#541e5b';\n            text.style.fontFamily = 'monospace';\n            text.style.fontSize = '9px';\n            text.style.position = 'absolute';\n            text.style.left = '10px';\n            text.style.top = '10px';\n            text.style.padding = '1px';\n            text.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';\n            text.style.borderRadius = '3px';\n            div.appendChild(text);\n            event.renderMeta.textEl = text;\n            return div;\n        }\n    },\n    {\n        id: 'keyboard',\n        label: 'Keyboard',\n        color: 0x8151AF\n    },\n    {\n        id: 'component-event',\n        label: 'Component events',\n        color: 0x41B883,\n        screenshotOverlayRender: function (event, ref) {\n            var events = ref.events;\n\n            if (!event.meta.bounds || events.some(function (e) { return e !== event && e.layerId === event.layerId && e.renderMeta.drawn && (e.meta.componentId === event.meta.componentId || (e.meta.bounds.left === event.meta.bounds.left &&\n                e.meta.bounds.top === event.meta.bounds.top &&\n                e.meta.bounds.width === event.meta.bounds.width &&\n                e.meta.bounds.height === event.meta.bounds.height)); })) {\n                return false;\n            }\n            var div = document.createElement('div');\n            div.style.position = 'absolute';\n            div.style.left = (event.meta.bounds.left - 4) + \"px\";\n            div.style.top = (event.meta.bounds.top - 4) + \"px\";\n            div.style.width = (event.meta.bounds.width) + \"px\";\n            div.style.height = (event.meta.bounds.height) + \"px\";\n            div.style.borderRadius = '8px';\n            div.style.borderStyle = 'solid';\n            div.style.borderWidth = '4px';\n            div.style.borderColor = 'rgba(65, 184, 131, 0.5)';\n            div.style.textAlign = 'center';\n            div.style.display = 'flex';\n            div.style.alignItems = 'center';\n            div.style.justifyContent = 'center';\n            div.style.overflow = 'hidden';\n            var text = document.createElement('div');\n            text.style.color = '#267753';\n            text.style.fontFamily = 'monospace';\n            text.style.fontSize = '9px';\n            text.style.padding = '1px';\n            text.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';\n            text.style.borderRadius = '3px';\n            text.innerText = event.data.event;\n            div.appendChild(text);\n            event.renderMeta.drawn = true;\n            return div;\n        }\n    },\n    {\n        id: 'performance',\n        label: 'Performance',\n        color: 0x41b86a,\n        groupsOnly: true,\n        skipScreenshots: true,\n        ignoreNoDurationGroups: true\n    }\n];\n//# sourceMappingURL=timeline-builtins.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/timeline-builtins.js\n");

/***/ }),

/***/ "../app-backend-core/lib/timeline-screenshot.js":
/*!******************************************************!*\
  !*** ../app-backend-core/lib/timeline-screenshot.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.showScreenshot = void 0;\nvar queue_1 = __webpack_require__(/*! ./util/queue */ \"../app-backend-core/lib/util/queue.js\");\nvar timeline_builtins_1 = __webpack_require__(/*! ./timeline-builtins */ \"../app-backend-core/lib/timeline-builtins.js\");\nvar overlay;\nvar image;\nvar container;\nvar jobQueue = new queue_1.JobQueue();\nasync function showScreenshot(screenshot, ctx) {\n    await jobQueue.queue(async function () {\n        if (screenshot) {\n            if (!container) {\n                createElements();\n            }\n            image.src = screenshot.image;\n            clearContent();\n            var events = screenshot.events.map(function (id) { return ctx.timelineEventMap.get(id); }).filter(Boolean).map(function (eventData) { return ({\n                layer: timeline_builtins_1.builtinLayers.concat(ctx.timelineLayers).find(function (layer) { return layer.id === eventData.layerId; }),\n                event: Object.assign({}, eventData.event,\n                    {layerId: eventData.layerId,\n                    renderMeta: {}})\n            }); });\n            var renderContext = {\n                screenshot: screenshot,\n                events: events.map(function (ref) {\n                    var event = ref.event;\n\n                    return event;\n            }),\n                index: 0\n            };\n            for (var i = 0; i < events.length; i++) {\n                var ref = events[i];\n                var layer = ref.layer;\n                var event = ref.event;\n                if (layer.screenshotOverlayRender) {\n                    renderContext.index = i;\n                    try {\n                        var result = await layer.screenshotOverlayRender(event, renderContext);\n                        if (result !== false) {\n                            if (typeof result === 'string') {\n                                container.innerHTML += result;\n                            }\n                            else {\n                                container.appendChild(result);\n                            }\n                        }\n                    }\n                    catch (e) {\n                        console.error(e);\n                    }\n                }\n            }\n            showElement();\n        }\n        else {\n            hideElement();\n        }\n    });\n}\nexports.showScreenshot = showScreenshot;\nfunction createElements() {\n    overlay = document.createElement('div');\n    overlay.style.position = 'fixed';\n    overlay.style.zIndex = '9999999999999';\n    overlay.style.pointerEvents = 'none';\n    overlay.style.left = '0';\n    overlay.style.top = '0';\n    overlay.style.width = '100vw';\n    overlay.style.height = '100vh';\n    overlay.style.backgroundColor = 'rgba(0,0,0,0.5)';\n    overlay.style.overflow = 'hidden';\n    var imageBox = document.createElement('div');\n    imageBox.style.position = 'relative';\n    overlay.appendChild(imageBox);\n    image = document.createElement('img');\n    imageBox.appendChild(image);\n    container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.left = '0';\n    container.style.top = '0';\n    imageBox.appendChild(container);\n    var style = document.createElement('style');\n    style.innerHTML = '.__vuedevtools_no-scroll { overflow: hidden; }';\n    document.head.appendChild(style);\n}\nfunction showElement() {\n    if (!overlay.parentNode) {\n        document.body.appendChild(overlay);\n        document.body.classList.add('__vuedevtools_no-scroll');\n    }\n}\nfunction hideElement() {\n    if (overlay && overlay.parentNode) {\n        overlay.parentNode.removeChild(overlay);\n        document.body.classList.remove('__vuedevtools_no-scroll');\n        clearContent();\n    }\n}\nfunction clearContent() {\n    while (container.firstChild) {\n        container.removeChild(container.lastChild);\n    }\n}\n//# sourceMappingURL=timeline-screenshot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL3RpbWVsaW5lLXNjcmVlbnNob3QuanM/YTRkNSJdLCJuYW1lcyI6WyJjb25zdCIsImxldCJdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxzQkFBc0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNoQ0EsR0FBSyxDQUFDLE9BQU8sR0FBRyxtQkFBTyxDQUFDLDJEQUFjLENBQUMsQ0FBQztBQUN4Q0EsR0FBSyxDQUFDLG1CQUFtQixHQUFHLG1CQUFPLENBQUMseUVBQXFCLENBQUMsQ0FBQztBQUMzREMsR0FBRyxDQUFDLE9BQU8sQ0FBQztBQUNaQSxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ1ZBLEdBQUcsQ0FBQyxTQUFTLENBQUM7QUFDZEQsR0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN4QyxlQUFlLGNBQWMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0FBQy9DLElBQUksTUFBTSxRQUFRLENBQUMsS0FBSyxDQUFDLGVBQU0sR0FBTTtBQUNyQyxRQUFRLElBQUksVUFBVSxFQUFFO0FBQ3hCLFlBQVksSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUM1QixnQkFBZ0IsY0FBYyxFQUFFLENBQUM7QUFDakMsYUFBYTtBQUNiLFlBQVksS0FBSyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO0FBQ3pDLFlBQVksWUFBWSxFQUFFLENBQUM7QUFDM0IsWUFBWUEsR0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBQyxHQUFFLFVBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLFdBQUMsVUFBUyxVQUFJLENBQUM7QUFDdkgsZ0JBQWdCLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLFdBQUMsTUFBSyxVQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssU0FBUyxDQUFDLFVBQU8sQ0FBQztBQUNqSSxnQkFBZ0IsS0FBSyxFQUFFLGtCQUNBLFNBQVMsQ0FBQyxLQUFLO0FBQ3RDLHFCQUFvQixPQUFPLEVBQUUsU0FBUyxDQUFDLE9BQU87QUFDOUMsb0JBQW9CLFVBQVUsRUFBRSxHQUFFLENBQ2pCO0FBQ2pCLGFBQWEsSUFBQyxDQUFDLENBQUM7QUFDaEIsWUFBWUEsR0FBSyxDQUFDLGFBQWEsR0FBRztBQUNsQyw0QkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLFVBQUMsSUFBVSxHQUFQOzs7MkJBQVk7YUFBSyxDQUFDO0FBQ3hELGdCQUFnQixLQUFLLEVBQUUsQ0FBQztBQUN4QixhQUFhLENBQUM7QUFDZCxZQUFZLEtBQUtDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3BELHVCQUFzQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUF6QjtnQkFBTyxzQkFBb0I7QUFDbkQsZ0JBQWdCLElBQUksS0FBSyxDQUFDLHVCQUF1QixFQUFFO0FBQ25ELG9CQUFvQixhQUFhLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUM1QyxvQkFBb0IsSUFBSTtBQUN4Qix3QkFBd0JELEdBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ2pHLHdCQUF3QixJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUU7QUFDOUMsNEJBQTRCLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO0FBQzVELGdDQUFnQyxTQUFTLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQztBQUM5RCw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBQ2pDLGdDQUFnQyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlELDZCQUE2QjtBQUM3Qix5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLG9CQUFvQixPQUFPLENBQUMsRUFBRTtBQUM5Qix3QkFBd0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QyxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixZQUFZLFdBQVcsRUFBRSxDQUFDO0FBQzFCLFNBQVM7QUFDVCxhQUFhO0FBQ2IsWUFBWSxXQUFXLEVBQUUsQ0FBQztBQUMxQixTQUFTO0FBQ1QsS0FBSyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBQ0Qsc0JBQXNCLEdBQUcsY0FBYyxDQUFDO0FBQ3hDLFNBQVMsY0FBYyxHQUFHO0FBQzFCLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7QUFDckMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUM7QUFDM0MsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFDekMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7QUFDN0IsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDNUIsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDbEMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDbkMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztBQUN0RCxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUN0QyxJQUFJQSxHQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkQsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDekMsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUMsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDMUMsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7QUFDL0IsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDOUIsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLElBQUlBLEdBQUssQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNsRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEdBQUcsZ0RBQWdELENBQUM7QUFDdkUsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBQ0QsU0FBUyxXQUFXLEdBQUc7QUFDdkIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtBQUM3QixRQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFFBQVEsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDL0QsS0FBSztBQUNMLENBQUM7QUFDRCxTQUFTLFdBQVcsR0FBRztBQUN2QixJQUFJLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7QUFDdkMsUUFBUSxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRCxRQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ2xFLFFBQVEsWUFBWSxFQUFFLENBQUM7QUFDdkIsS0FBSztBQUNMLENBQUM7QUFDRCxTQUFTLFlBQVksR0FBRztBQUN4QixJQUFJLE9BQU8sU0FBUyxDQUFDLFVBQVUsRUFBRTtBQUNqQyxRQUFRLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25ELEtBQUs7QUFDTCxDQUFDO0FBQ0QiLCJmaWxlIjoiLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvdGltZWxpbmUtc2NyZWVuc2hvdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaG93U2NyZWVuc2hvdCA9IHZvaWQgMDtcbmNvbnN0IHF1ZXVlXzEgPSByZXF1aXJlKFwiLi91dGlsL3F1ZXVlXCIpO1xuY29uc3QgdGltZWxpbmVfYnVpbHRpbnNfMSA9IHJlcXVpcmUoXCIuL3RpbWVsaW5lLWJ1aWx0aW5zXCIpO1xubGV0IG92ZXJsYXk7XG5sZXQgaW1hZ2U7XG5sZXQgY29udGFpbmVyO1xuY29uc3Qgam9iUXVldWUgPSBuZXcgcXVldWVfMS5Kb2JRdWV1ZSgpO1xuYXN5bmMgZnVuY3Rpb24gc2hvd1NjcmVlbnNob3Qoc2NyZWVuc2hvdCwgY3R4KSB7XG4gICAgYXdhaXQgam9iUXVldWUucXVldWUoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoc2NyZWVuc2hvdCkge1xuICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gc2NyZWVuc2hvdC5pbWFnZTtcbiAgICAgICAgICAgIGNsZWFyQ29udGVudCgpO1xuICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gc2NyZWVuc2hvdC5ldmVudHMubWFwKGlkID0+IGN0eC50aW1lbGluZUV2ZW50TWFwLmdldChpZCkpLmZpbHRlcihCb29sZWFuKS5tYXAoZXZlbnREYXRhID0+ICh7XG4gICAgICAgICAgICAgICAgbGF5ZXI6IHRpbWVsaW5lX2J1aWx0aW5zXzEuYnVpbHRpbkxheWVycy5jb25jYXQoY3R4LnRpbWVsaW5lTGF5ZXJzKS5maW5kKGxheWVyID0+IGxheWVyLmlkID09PSBldmVudERhdGEubGF5ZXJJZCksXG4gICAgICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZXZlbnREYXRhLmV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBsYXllcklkOiBldmVudERhdGEubGF5ZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyTWV0YToge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJDb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgIHNjcmVlbnNob3QsXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBldmVudHMubWFwKCh7IGV2ZW50IH0pID0+IGV2ZW50KSxcbiAgICAgICAgICAgICAgICBpbmRleDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBsYXllciwgZXZlbnQgfSA9IGV2ZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobGF5ZXIuc2NyZWVuc2hvdE92ZXJsYXlSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ29udGV4dC5pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsYXllci5zY3JlZW5zaG90T3ZlcmxheVJlbmRlcihldmVudCwgcmVuZGVyQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MICs9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3dFbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoaWRlRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnNob3dTY3JlZW5zaG90ID0gc2hvd1NjcmVlbnNob3Q7XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50cygpIHtcbiAgICBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgb3ZlcmxheS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgb3ZlcmxheS5zdHlsZS56SW5kZXggPSAnOTk5OTk5OTk5OTk5OSc7XG4gICAgb3ZlcmxheS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgIG92ZXJsYXkuc3R5bGUubGVmdCA9ICcwJztcbiAgICBvdmVybGF5LnN0eWxlLnRvcCA9ICcwJztcbiAgICBvdmVybGF5LnN0eWxlLndpZHRoID0gJzEwMHZ3JztcbiAgICBvdmVybGF5LnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gICAgb3ZlcmxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLDAsMCwwLjUpJztcbiAgICBvdmVybGF5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgY29uc3QgaW1hZ2VCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBpbWFnZUJveC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgb3ZlcmxheS5hcHBlbmRDaGlsZChpbWFnZUJveCk7XG4gICAgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBpbWFnZUJveC5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBjb250YWluZXIuc3R5bGUubGVmdCA9ICcwJztcbiAgICBjb250YWluZXIuc3R5bGUudG9wID0gJzAnO1xuICAgIGltYWdlQm94LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlLmlubmVySFRNTCA9ICcuX192dWVkZXZ0b29sc19uby1zY3JvbGwgeyBvdmVyZmxvdzogaGlkZGVuOyB9JztcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbmZ1bmN0aW9uIHNob3dFbGVtZW50KCkge1xuICAgIGlmICghb3ZlcmxheS5wYXJlbnROb2RlKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnX192dWVkZXZ0b29sc19uby1zY3JvbGwnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoaWRlRWxlbWVudCgpIHtcbiAgICBpZiAob3ZlcmxheSAmJiBvdmVybGF5LnBhcmVudE5vZGUpIHtcbiAgICAgICAgb3ZlcmxheS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG92ZXJsYXkpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ19fdnVlZGV2dG9vbHNfbm8tc2Nyb2xsJyk7XG4gICAgICAgIGNsZWFyQ29udGVudCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFyQ29udGVudCgpIHtcbiAgICB3aGlsZSAoY29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVsaW5lLXNjcmVlbnNob3QuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-core/lib/timeline-screenshot.js\n");

/***/ }),

/***/ "../app-backend-core/lib/timeline.js":
/*!*******************************************!*\
  !*** ../app-backend-core/lib/timeline.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sendTimelineLayerEvents = exports.removeLayersForApp = exports.sendTimelineEventData = exports.clearTimeline = exports.addTimelineEvent = exports.sendTimelineLayers = exports.addBuiltinLayers = exports.setupTimeline = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar global_hook_1 = __webpack_require__(/*! ./global-hook */ \"../app-backend-core/lib/global-hook.js\");\nvar app_1 = __webpack_require__(/*! ./app */ \"../app-backend-core/lib/app.js\");\nvar timeline_builtins_1 = __webpack_require__(/*! ./timeline-builtins */ \"../app-backend-core/lib/timeline-builtins.js\");\nfunction setupTimeline(ctx) {\n    setupBuiltinLayers(ctx);\n}\nexports.setupTimeline = setupTimeline;\nfunction addBuiltinLayers(app, ctx) {\n    for (var layerDef of timeline_builtins_1.builtinLayers) {\n        ctx.timelineLayers.push(Object.assign({}, layerDef,\n            {app: app,\n            plugin: null,\n            events: []}));\n    }\n}\nexports.addBuiltinLayers = addBuiltinLayers;\nfunction setupBuiltinLayers(ctx) {\n    ['mousedown', 'mouseup', 'click', 'dblclick'].forEach(function (eventType) {\n        // @ts-ignore\n        window.addEventListener(eventType, function (event) {\n            addTimelineEvent({\n                layerId: 'mouse',\n                event: {\n                    time: Date.now(),\n                    data: {\n                        type: eventType,\n                        x: event.clientX,\n                        y: event.clientY\n                    },\n                    title: eventType\n                }\n            }, null, ctx);\n        }, {\n            capture: true,\n            passive: true\n        });\n    });\n    ['keyup', 'keydown', 'keypress'].forEach(function (eventType) {\n        // @ts-ignore\n        window.addEventListener(eventType, function (event) {\n            addTimelineEvent({\n                layerId: 'keyboard',\n                event: {\n                    time: Date.now(),\n                    data: {\n                        type: eventType,\n                        key: event.key,\n                        ctrlKey: event.ctrlKey,\n                        shiftKey: event.shiftKey,\n                        altKey: event.altKey,\n                        metaKey: event.metaKey\n                    },\n                    title: event.key\n                }\n            }, null, ctx);\n        }, {\n            capture: true,\n            passive: true\n        });\n    });\n    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_EMIT, async function (app, instance, event, params) {\n        try {\n            var appRecord = await app_1.getAppRecord(app, ctx);\n            var componentId = (appRecord.id) + \":\" + (instance.uid);\n            var componentDisplay = (await ctx.api.getComponentName(instance)) || '<i>Unknown Component</i>';\n            addTimelineEvent({\n                layerId: 'component-event',\n                event: {\n                    time: Date.now(),\n                    data: {\n                        component: {\n                            _custom: {\n                                type: 'component-definition',\n                                display: componentDisplay\n                            }\n                        },\n                        event: event,\n                        params: params\n                    },\n                    title: event,\n                    subtitle: (\"by \" + componentDisplay),\n                    meta: {\n                        componentId: componentId,\n                        bounds: await ctx.api.getComponentBounds(instance)\n                    }\n                }\n            }, app, ctx);\n        }\n        catch (e) {\n            if (true) {\n                console.error(e);\n            }\n        }\n    });\n}\nasync function sendTimelineLayers(ctx) {\n    var _a, _b;\n    var layers = [];\n    for (var layer of ctx.timelineLayers) {\n        try {\n            layers.push({\n                id: layer.id,\n                label: layer.label,\n                color: layer.color,\n                appId: layer.app ? (_a = (await app_1.getAppRecord(layer.app, ctx))) === null || _a === void 0 ? void 0 : _a.id : null,\n                pluginId: (_b = layer.plugin) === null || _b === void 0 ? void 0 : _b.descriptor.id,\n                groupsOnly: layer.groupsOnly,\n                skipScreenshots: layer.skipScreenshots,\n                ignoreNoDurationGroups: layer.ignoreNoDurationGroups\n            });\n        }\n        catch (e) {\n            if (true) {\n                console.error(e);\n            }\n        }\n    }\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_LAYER_LIST, {\n        layers: layers\n    });\n}\nexports.sendTimelineLayers = sendTimelineLayers;\nfunction addTimelineEvent(options, app, ctx) {\n    var appId = app && app_1.getAppRecordId(app);\n    var isAllApps = options.all || !app || appId == null;\n    var id = ctx.nextTimelineEventId++;\n    var eventData = Object.assign({}, {id: id},\n        options,\n        {all: isAllApps});\n    ctx.timelineEventMap.set(eventData.id, eventData);\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_EVENT, {\n        appId: eventData.all ? 'all' : appId,\n        layerId: eventData.layerId,\n        event: mapTimelineEvent(eventData)\n    });\n    var layer = ctx.timelineLayers.find(function (l) { return (isAllApps || l.app === app) && l.id === options.layerId; });\n    if (layer) {\n        layer.events.push(eventData);\n    }\n}\nexports.addTimelineEvent = addTimelineEvent;\nfunction mapTimelineEvent(eventData) {\n    return {\n        id: eventData.id,\n        time: eventData.event.time,\n        logType: eventData.event.logType,\n        groupId: eventData.event.groupId,\n        title: eventData.event.title,\n        subtitle: eventData.event.subtitle\n    };\n}\nasync function clearTimeline(ctx) {\n    ctx.timelineEventMap.clear();\n    for (var layer of ctx.timelineLayers) {\n        layer.events = [];\n    }\n    await ctx.api.clearTimeline();\n}\nexports.clearTimeline = clearTimeline;\nasync function sendTimelineEventData(id, ctx) {\n    var data = null;\n    var eventData = ctx.timelineEventMap.get(id);\n    if (eventData) {\n        data = await ctx.api.inspectTimelineEvent(eventData, ctx.currentAppRecord.options.app);\n        data = shared_utils_1.stringify(data);\n    }\n    else if (true) {\n        console.warn((\"Event \" + id + \" not found\"), ctx.timelineEventMap.keys());\n    }\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_EVENT_DATA, {\n        eventId: id,\n        data: data\n    });\n}\nexports.sendTimelineEventData = sendTimelineEventData;\nfunction removeLayersForApp(app, ctx) {\n    var layers = ctx.timelineLayers.filter(function (l) { return l.app === app; });\n    for (var layer of layers) {\n        var index = ctx.timelineLayers.indexOf(layer);\n        if (index !== -1)\n            { ctx.timelineLayers.splice(index, 1); }\n        for (var e of layer.events) {\n            ctx.timelineEventMap.delete(e.id);\n        }\n    }\n}\nexports.removeLayersForApp = removeLayersForApp;\nfunction sendTimelineLayerEvents(appId, layerId, ctx) {\n    var _a;\n    var app = (_a = ctx.appRecords.find(function (ar) { return ar.id === appId; })) === null || _a === void 0 ? void 0 : _a.options.app;\n    if (!app)\n        { return; }\n    var layer = ctx.timelineLayers.find(function (l) { return l.app === app && l.id === layerId; });\n    if (!layer)\n        { return; }\n    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_LAYER_LOAD_EVENTS, {\n        appId: appId,\n        layerId: layerId,\n        events: layer.events.map(function (e) { return mapTimelineEvent(e); })\n    });\n}\nexports.sendTimelineLayerEvents = sendTimelineLayerEvents;\n//# sourceMappingURL=timeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/timeline.js\n");

/***/ }),

/***/ "../app-backend-core/lib/toast.js":
/*!****************************************!*\
  !*** ../app-backend-core/lib/toast.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.installToast = void 0;\nfunction installToast() {\n    // @TODO\n}\nexports.installToast = installToast;\n//# sourceMappingURL=toast.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL3RvYXN0LmpzPzAwMmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxvQkFBb0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM5QixTQUFTLFlBQVksR0FBRztBQUN4QjtBQUNBLENBQUM7QUFDRCxvQkFBb0IsR0FBRyxZQUFZLENBQUM7QUFDcEMiLCJmaWxlIjoiLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvdG9hc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5zdGFsbFRvYXN0ID0gdm9pZCAwO1xuZnVuY3Rpb24gaW5zdGFsbFRvYXN0KCkge1xuICAgIC8vIEBUT0RPXG59XG5leHBvcnRzLmluc3RhbGxUb2FzdCA9IGluc3RhbGxUb2FzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvYXN0LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-core/lib/toast.js\n");

/***/ }),

/***/ "../app-backend-core/lib/util/queue.js":
/*!*********************************************!*\
  !*** ../app-backend-core/lib/util/queue.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JobQueue = void 0;\nvar JobQueue = function JobQueue() {\n    this.jobs = [];\n};\nJobQueue.prototype.queue = function queue (job) {\n        var this$1 = this;\n\n    return new Promise(function (resolve) {\n        var onDone = function () {\n            this$1.currentJob = null;\n            var nextJob = this$1.jobs.shift();\n            if (nextJob) {\n                nextJob();\n            }\n            resolve();\n        };\n        var run = function () {\n            this$1.currentJob = job;\n            return job().then(onDone);\n        };\n        if (this$1.currentJob) {\n            this$1.jobs.push(function () { return run(); });\n        }\n        else {\n            run();\n        }\n    });\n};\nexports.JobQueue = JobQueue;\n//# sourceMappingURL=queue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL3V0aWwvcXVldWUuanM/NGI2ZCJdLCJuYW1lcyI6WyJjb25zdCIsInRoaXMiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDMUIsSUFBTSxRQUFRLEdBQ1YsaUJBQVcsR0FBRztBQUNsQixJQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ25CLEVBQUM7bUJBQ0QsdUJBQUssQ0FBQyxHQUFHLEVBQUU7O0FBQUM7QUFDaEIsSUFBUSxPQUFPLElBQUksT0FBTyxXQUFDLFFBQU8sQ0FBSTtBQUN0QyxRQUFZQSxHQUFLLENBQUMsTUFBTSxZQUFHLEdBQU07QUFDakMsWUFBZ0JDLE1BQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3ZDLFlBQWdCRCxHQUFLLENBQUMsT0FBTyxHQUFHQyxNQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xELFlBQWdCLElBQUksT0FBTyxFQUFFO0FBQzdCLGdCQUFvQixPQUFPLEVBQUUsQ0FBQztBQUM5QixZQUFnQixDQUFDO0FBQ2pCLFlBQWdCLE9BQU8sRUFBRSxDQUFDO0FBQzFCLFFBQVksQ0FBQyxDQUFDO0FBQ2QsUUFBWUQsR0FBSyxDQUFDLEdBQUcsWUFBRyxHQUFNO0FBQzlCLFlBQWdCQyxNQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUN0QyxZQUFnQixPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxQyxRQUFZLENBQUMsQ0FBQztBQUNkLFFBQVksSUFBSUEsTUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNqQyxZQUFnQkEsTUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQUMsWUFBTSxHQUFHLEtBQUUsQ0FBQyxDQUFDO0FBQzVDLFFBQVksQ0FBQztBQUNiLFFBQVksS0FBSztBQUNqQixZQUFnQixHQUFHLEVBQUUsQ0FBQztBQUN0QixRQUFZLENBQUM7QUFDYixJQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1AsRUFDSDtBQUNELGdCQUFnQixHQUFHLFFBQVEsQ0FBQztBQUM1QiIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC1jb3JlL2xpYi91dGlsL3F1ZXVlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkpvYlF1ZXVlID0gdm9pZCAwO1xuY2xhc3MgSm9iUXVldWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmpvYnMgPSBbXTtcbiAgICB9XG4gICAgcXVldWUoam9iKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9uRG9uZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRKb2IgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRKb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dEpvYikge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Sm9iKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBydW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Sm9iID0gam9iO1xuICAgICAgICAgICAgICAgIHJldHVybiBqb2IoKS50aGVuKG9uRG9uZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEpvYikge1xuICAgICAgICAgICAgICAgIHRoaXMuam9icy5wdXNoKCgpID0+IHJ1bigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkpvYlF1ZXVlID0gSm9iUXVldWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWV1ZS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../app-backend-core/lib/util/queue.js\n");

/***/ }),

/***/ "../app-backend-core/lib/util/subscriptions.js":
/*!*****************************************************!*\
  !*** ../app-backend-core/lib/util/subscriptions.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSubscribed = exports.unsubscribe = exports.subscribe = void 0;\nvar activeSubs = new Map();\nfunction getSubs(type) {\n    var subs = activeSubs.get(type);\n    if (!subs) {\n        subs = [];\n        activeSubs.set(type, subs);\n    }\n    return subs;\n}\nfunction subscribe(type, payload) {\n    var rawPayload = JSON.stringify(payload);\n    getSubs(type).push({\n        payload: payload,\n        rawPayload: rawPayload\n    });\n}\nexports.subscribe = subscribe;\nfunction unsubscribe(type, payload) {\n    var rawPayload = JSON.stringify(payload);\n    var subs = getSubs(type);\n    var index = subs.findIndex(function (sub) { return sub.rawPayload === rawPayload; });\n    if (index !== -1) {\n        subs.splice(index, 1);\n    }\n}\nexports.unsubscribe = unsubscribe;\nfunction isSubscribed(type, predicate) {\n    if ( predicate === void 0 ) predicate = function () { return true; };\n\n    return getSubs(type).some(predicate);\n}\nexports.isSubscribed = isSubscribed;\n//# sourceMappingURL=subscriptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL3V0aWwvc3Vic2NyaXB0aW9ucy5qcz9mNGY0Il0sIm5hbWVzIjpbImNvbnN0IiwibGV0Il0sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELG9CQUFvQixHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3hFQSxHQUFLLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDN0IsU0FBUyxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ3ZCLElBQUlDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDZixRQUFRLElBQUksR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBUSxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuQyxLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBQ0QsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtBQUNsQyxJQUFJRCxHQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0MsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3ZCLGlCQUFRLE9BQU87QUFDZixvQkFBUSxVQUFVO0FBQ2xCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUNELGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixTQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3BDLElBQUlBLEdBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQyxJQUFJQSxHQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixJQUFJQSxHQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLFdBQUMsSUFBRyxVQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssYUFBVSxDQUFDLENBQUM7QUFDdkUsSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtBQUN0QixRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlCLEtBQUs7QUFDTCxDQUFDO0FBQ0QsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO0FBQ2xDLFNBQVMsWUFBWSxDQUFDLElBQUksRUFBRSxTQUFzQixFQUFFO3lDQUFmLFlBQUcsWUFBTTtBQUFPO0FBQ3JELElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFDRCxvQkFBb0IsR0FBRyxZQUFZLENBQUM7QUFDcEMiLCJmaWxlIjoiLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvdXRpbC9zdWJzY3JpcHRpb25zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzU3Vic2NyaWJlZCA9IGV4cG9ydHMudW5zdWJzY3JpYmUgPSBleHBvcnRzLnN1YnNjcmliZSA9IHZvaWQgMDtcbmNvbnN0IGFjdGl2ZVN1YnMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRTdWJzKHR5cGUpIHtcbiAgICBsZXQgc3VicyA9IGFjdGl2ZVN1YnMuZ2V0KHR5cGUpO1xuICAgIGlmICghc3Vicykge1xuICAgICAgICBzdWJzID0gW107XG4gICAgICAgIGFjdGl2ZVN1YnMuc2V0KHR5cGUsIHN1YnMpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vicztcbn1cbmZ1bmN0aW9uIHN1YnNjcmliZSh0eXBlLCBwYXlsb2FkKSB7XG4gICAgY29uc3QgcmF3UGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpO1xuICAgIGdldFN1YnModHlwZSkucHVzaCh7XG4gICAgICAgIHBheWxvYWQsXG4gICAgICAgIHJhd1BheWxvYWRcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuZnVuY3Rpb24gdW5zdWJzY3JpYmUodHlwZSwgcGF5bG9hZCkge1xuICAgIGNvbnN0IHJhd1BheWxvYWQgPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkKTtcbiAgICBjb25zdCBzdWJzID0gZ2V0U3Vicyh0eXBlKTtcbiAgICBjb25zdCBpbmRleCA9IHN1YnMuZmluZEluZGV4KHN1YiA9PiBzdWIucmF3UGF5bG9hZCA9PT0gcmF3UGF5bG9hZCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBzdWJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuZXhwb3J0cy51bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuZnVuY3Rpb24gaXNTdWJzY3JpYmVkKHR5cGUsIHByZWRpY2F0ZSA9ICgpID0+IHRydWUpIHtcbiAgICByZXR1cm4gZ2V0U3Vicyh0eXBlKS5zb21lKHByZWRpY2F0ZSk7XG59XG5leHBvcnRzLmlzU3Vic2NyaWJlZCA9IGlzU3Vic2NyaWJlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmlwdGlvbnMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-core/lib/util/subscriptions.js\n");

/***/ }),

/***/ "../app-backend-vue1/lib/index.js":
/*!****************************************!*\
  !*** ../app-backend-vue1/lib/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.backend = void 0;\nvar app_backend_api_1 = __webpack_require__(/*! @vue-devtools/app-backend-api */ \"../app-backend-api/lib/index.js\");\nexports.backend = {\n    frameworkVersion: 1,\n    availableFeatures: [\n        app_backend_api_1.BuiltinBackendFeature.COMPONENTS\n    ],\n    setup: function setup(api) {\n        // @TODO\n    }\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTEvbGliL2luZGV4LmpzPzlmNGUiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3pCQSxHQUFLLENBQUMsaUJBQWlCLEdBQUcsbUJBQU8sQ0FBQyxzRUFBK0IsQ0FBQyxDQUFDO0FBQ25FLGVBQWUsR0FBRztBQUNsQixJQUFJLGdCQUFnQixFQUFFLENBQUM7QUFDdkIsSUFBSSxpQkFBaUIsRUFBRTtBQUN2QixRQUFRLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLFVBQVU7QUFDMUQsS0FBSztBQUNMLElBQUkscUJBQUssQ0FBQyxHQUFHLEVBQUU7QUFDZjtBQUNBLEtBQUs7QUFDTCxDQUFDLENBQUM7QUFDRiIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC12dWUxL2xpYi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iYWNrZW5kID0gdm9pZCAwO1xuY29uc3QgYXBwX2JhY2tlbmRfYXBpXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9hcHAtYmFja2VuZC1hcGlcIik7XG5leHBvcnRzLmJhY2tlbmQgPSB7XG4gICAgZnJhbWV3b3JrVmVyc2lvbjogMSxcbiAgICBhdmFpbGFibGVGZWF0dXJlczogW1xuICAgICAgICBhcHBfYmFja2VuZF9hcGlfMS5CdWlsdGluQmFja2VuZEZlYXR1cmUuQ09NUE9ORU5UU1xuICAgIF0sXG4gICAgc2V0dXAoYXBpKSB7XG4gICAgICAgIC8vIEBUT0RPXG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-vue1/lib/index.js\n");

/***/ }),

/***/ "../app-backend-vue2/lib/components/data.js":
/*!**************************************************!*\
  !*** ../app-backend-vue2/lib/components/data.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.editState = exports.findInstanceOrVnode = exports.getInstanceName = exports.reduceStateList = exports.getCustomInstanceDetails = exports.getInstanceDetails = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar shared_data_1 = __importDefault(__webpack_require__(/*! @vue-devtools/shared-utils/lib/shared-data */ \"../shared-utils/lib/shared-data.js\"));\nvar tree_1 = __webpack_require__(/*! ./tree */ \"../app-backend-vue2/lib/components/tree.js\");\n/**\n * Get the detailed information of an inspected instance.\n */\nfunction getInstanceDetails(instance) {\n    var _a, _b;\n    if (instance.__VUE_DEVTOOLS_FUNCTIONAL_LEGACY__) {\n        var vnode = findInstanceOrVnode(instance.__VUE_DEVTOOLS_UID__);\n        if (!vnode)\n            { return null; }\n        var fakeInstance = Object.assign({}, {$options: vnode.fnOptions},\n            ((_a = vnode.devtoolsMeta) === null || _a === void 0 ? void 0 : _a.renderContext.props));\n        if (!fakeInstance.$options.props && ((_b = vnode.devtoolsMeta) === null || _b === void 0 ? void 0 : _b.renderContext.props)) {\n            fakeInstance.$options.props = Object.keys(vnode.devtoolsMeta.renderContext.props).reduce(function (obj, key) {\n                obj[key] = {};\n                return obj;\n            }, {});\n        }\n        var data$1 = {\n            id: instance.__VUE_DEVTOOLS_UID__,\n            name: shared_utils_1.getComponentName(vnode.fnOptions),\n            file: instance.type ? instance.type.__file : vnode.fnOptions.__file || null,\n            state: getFunctionalInstanceState(fakeInstance),\n            functional: true\n        };\n        return data$1;\n    }\n    var data = {\n        id: instance.__VUE_DEVTOOLS_UID__,\n        name: getInstanceName(instance),\n        state: getInstanceState(instance),\n        file: null\n    };\n    var i;\n    if ((i = instance.$vnode) && (i = i.componentOptions) && (i = i.Ctor) && (i = i.options)) {\n        data.file = i.__file || null;\n    }\n    return data;\n}\nexports.getInstanceDetails = getInstanceDetails;\nfunction getInstanceState(instance) {\n    return processProps(instance).concat(processState(instance), processRefs(instance), processComputed(instance), processInjected(instance), processRouteContext(instance), processVuexGetters(instance), processFirebaseBindings(instance), processObservables(instance), processAttrs(instance));\n}\nfunction getFunctionalInstanceState(instance) {\n    return processProps(instance);\n}\nfunction getCustomInstanceDetails(instance) {\n    var state = getInstanceState(instance);\n    return {\n        _custom: {\n            type: 'component',\n            id: instance.__VUE_DEVTOOLS_UID__,\n            display: getInstanceName(instance),\n            tooltip: 'Component instance',\n            value: reduceStateList(state),\n            fields: {\n                abstract: true\n            }\n        }\n    };\n}\nexports.getCustomInstanceDetails = getCustomInstanceDetails;\nfunction reduceStateList(list) {\n    if (!list.length) {\n        return undefined;\n    }\n    return list.reduce(function (map, item) {\n        var key = item.type || 'data';\n        var obj = map[key] = map[key] || {};\n        obj[item.key] = item.value;\n        return map;\n    }, {});\n}\nexports.reduceStateList = reduceStateList;\n/**\n * Get the appropriate display name for an instance.\n */\nfunction getInstanceName(instance) {\n    var name = shared_utils_1.getComponentName(instance.$options || instance.fnOptions || {});\n    if (name)\n        { return name; }\n    return instance.$root === instance\n        ? 'Root'\n        : 'Anonymous Component';\n}\nexports.getInstanceName = getInstanceName;\n/**\n * Process the props of an instance.\n * Make sure return a plain object because window.postMessage()\n * will throw an Error if the passed object contains Functions.\n */\nfunction processProps(instance) {\n    var props = instance.$options.props;\n    var propsData = [];\n    for (var key in props) {\n        var prop = props[key];\n        key = shared_utils_1.camelize(key);\n        propsData.push({\n            type: 'props',\n            key: key,\n            value: instance[key],\n            meta: prop\n                ? {\n                    type: prop.type ? getPropType(prop.type) : 'any',\n                    required: !!prop.required\n                }\n                : {\n                    type: 'invalid'\n                },\n            editable: shared_data_1.default.editableProps\n        });\n    }\n    return propsData;\n}\nfunction processAttrs(instance) {\n    return Object.entries(instance.$attrs || {}).map(function (ref) {\n        var key = ref[0];\n        var value = ref[1];\n\n        return {\n            type: '$attrs',\n            key: key,\n            value: value\n        };\n    });\n}\nvar fnTypeRE = /^(?:function|class) (\\w+)/;\n/**\n * Convert prop type constructor to string.\n */\nfunction getPropType(type) {\n    if (Array.isArray(type)) {\n        return type.map(function (t) { return getPropType(t); }).join(' or ');\n    }\n    var match = type.toString().match(fnTypeRE);\n    return typeof type === 'function'\n        ? (match && match[1]) || 'any'\n        : 'any';\n}\n/**\n * Process state, filtering out props and \"clean\" the result\n * with a JSON dance. This removes functions which can cause\n * errors during structured clone used by window.postMessage.\n */\nfunction processState(instance) {\n    var props = instance.$options.props;\n    var getters = instance.$options.vuex &&\n        instance.$options.vuex.getters;\n    return Object.keys(instance._data)\n        .filter(function (key) { return (!(props && key in props) &&\n        !(getters && key in getters)); })\n        .map(function (key) { return ({\n        key: key,\n        type: 'data',\n        value: instance._data[key],\n        editable: true\n    }); });\n}\n/**\n * Process refs\n */\nfunction processRefs(instance) {\n    return Object.keys(instance.$refs)\n        .filter(function (key) { return instance.$refs[key]; })\n        .map(function (key) { return shared_utils_1.getCustomRefDetails(instance, key, instance.$refs[key]); });\n}\n/**\n * Process the computed properties of an instance.\n */\nfunction processComputed(instance) {\n    var computed = [];\n    var defs = instance.$options.computed || {};\n    // use for...in here because if 'computed' is not defined\n    // on component, computed properties will be placed in prototype\n    // and Object.keys does not include\n    // properties from object's prototype\n    for (var key in defs) {\n        var def = defs[key];\n        var type = typeof def === 'function' && def.vuex\n            ? 'vuex bindings'\n            : 'computed';\n        // use try ... catch here because some computed properties may\n        // throw error during its evaluation\n        var computedProp = null;\n        try {\n            computedProp = {\n                type: type,\n                key: key,\n                value: instance[key]\n            };\n        }\n        catch (e) {\n            computedProp = {\n                type: type,\n                key: key,\n                value: e\n            };\n        }\n        computed.push(computedProp);\n    }\n    return computed;\n}\n/**\n * Process Vuex getters.\n */\nfunction processInjected(instance) {\n    var injected = instance.$options.inject;\n    if (injected) {\n        return Object.keys(injected).map(function (key) {\n            return {\n                key: key,\n                type: 'injected',\n                value: instance[key]\n            };\n        });\n    }\n    else {\n        return [];\n    }\n}\n/**\n * Process possible vue-router $route context\n */\nfunction processRouteContext(instance) {\n    try {\n        var route = instance.$route;\n        if (route) {\n            var path = route.path;\n            var query = route.query;\n            var params = route.params;\n            var value = { path: path, query: query, params: params };\n            if (route.fullPath)\n                { value.fullPath = route.fullPath; }\n            if (route.hash)\n                { value.hash = route.hash; }\n            if (route.name)\n                { value.name = route.name; }\n            if (route.meta)\n                { value.meta = route.meta; }\n            return [{\n                    key: '$route',\n                    type: 'route',\n                    value: {\n                        _custom: {\n                            type: 'router',\n                            abstract: true,\n                            value: value\n                        }\n                    }\n                }];\n        }\n    }\n    catch (e) {\n        // Invalid $router\n    }\n    return [];\n}\n/**\n * Process Vuex getters.\n */\nfunction processVuexGetters(instance) {\n    var getters = instance.$options.vuex &&\n        instance.$options.vuex.getters;\n    if (getters) {\n        return Object.keys(getters).map(function (key) {\n            return {\n                type: 'vuex getters',\n                key: key,\n                value: instance[key]\n            };\n        });\n    }\n    else {\n        return [];\n    }\n}\n/**\n * Process Firebase bindings.\n */\nfunction processFirebaseBindings(instance) {\n    var refs = instance.$firebaseRefs;\n    if (refs) {\n        return Object.keys(refs).map(function (key) {\n            return {\n                type: 'firebase bindings',\n                key: key,\n                value: instance[key]\n            };\n        });\n    }\n    else {\n        return [];\n    }\n}\n/**\n * Process vue-rx observable bindings.\n */\nfunction processObservables(instance) {\n    var obs = instance.$observables;\n    if (obs) {\n        return Object.keys(obs).map(function (key) {\n            return {\n                type: 'observables',\n                key: key,\n                value: instance[key]\n            };\n        });\n    }\n    else {\n        return [];\n    }\n}\nfunction findInstanceOrVnode(id) {\n    if (/:functional:/.test(id)) {\n        var ref = id.split(':functional:');\n        var refId = ref[0];\n        var map = tree_1.functionalVnodeMap.get(refId);\n        return map && map[id];\n    }\n    return tree_1.instanceMap.get(id);\n}\nexports.findInstanceOrVnode = findInstanceOrVnode;\nfunction editState(ref) {\n    var componentInstance = ref.componentInstance;\n    var path = ref.path;\n    var state = ref.state;\n    var type = ref.type;\n\n    if (!['data', 'props', 'computed', 'setup'].includes(type))\n        { return; }\n    var data = shared_utils_1.has(componentInstance._props, path, !!state.newKey)\n        ? componentInstance._props\n        : componentInstance._data;\n    shared_utils_1.set(data, path, state.value, function (obj, field, value) {\n        if (state.remove || state.newKey)\n            { componentInstance.$delete(obj, field); }\n        if (!state.remove)\n            { componentInstance.$set(obj, state.newKey || field, value); }\n    });\n}\nexports.editState = editState;\n//# sourceMappingURL=data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue2/lib/components/data.js\n");

/***/ }),

/***/ "../app-backend-vue2/lib/components/el.js":
/*!************************************************!*\
  !*** ../app-backend-vue2/lib/components/el.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.findRelatedComponent = exports.getInstanceOrVnodeRect = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nfunction createRect() {\n    var rect = {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        get width() { return rect.right - rect.left; },\n        get height() { return rect.bottom - rect.top; }\n    };\n    return rect;\n}\nfunction mergeRects(a, b) {\n    if (!a.top || b.top < a.top) {\n        a.top = b.top;\n    }\n    if (!a.bottom || b.bottom > a.bottom) {\n        a.bottom = b.bottom;\n    }\n    if (!a.left || b.left < a.left) {\n        a.left = b.left;\n    }\n    if (!a.right || b.right > a.right) {\n        a.right = b.right;\n    }\n    return a;\n}\n/**\n * Get the client rect for an instance.\n */\nfunction getInstanceOrVnodeRect(instance) {\n    var el = instance.$el || instance.elm;\n    if (!shared_utils_1.isBrowser) {\n        // TODO: Find position from instance or a vnode (for functional components).\n        return;\n    }\n    if (!shared_utils_1.inDoc(el)) {\n        return;\n    }\n    if (instance._isFragment) {\n        return addIframePosition(getLegacyFragmentRect(instance), getElWindow(instance.$root.$el));\n    }\n    else if (el.nodeType === 1) {\n        return addIframePosition(el.getBoundingClientRect(), getElWindow(el));\n    }\n}\nexports.getInstanceOrVnodeRect = getInstanceOrVnodeRect;\n/**\n * Highlight a fragment instance.\n * Loop over its node range and determine its bounding box.\n */\nfunction getLegacyFragmentRect(ref) {\n    var _fragmentStart = ref._fragmentStart;\n    var _fragmentEnd = ref._fragmentEnd;\n\n    var rect = createRect();\n    util().mapNodeRange(_fragmentStart, _fragmentEnd, function (node) {\n        var childRect;\n        if (node.nodeType === 1 || node.getBoundingClientRect) {\n            childRect = node.getBoundingClientRect();\n        }\n        else if (node.nodeType === 3 && node.data.trim()) {\n            childRect = getTextRect(node);\n        }\n        if (childRect) {\n            mergeRects(rect, childRect);\n        }\n    });\n    return rect;\n}\nvar range;\n/**\n * Get the bounding rect for a text node using a Range.\n */\nfunction getTextRect(node) {\n    if (!shared_utils_1.isBrowser)\n        { return; }\n    if (!range)\n        { range = document.createRange(); }\n    range.selectNode(node);\n    return range.getBoundingClientRect();\n}\n/**\n * Get Vue's util\n */\nfunction util() {\n    return shared_utils_1.target.__VUE_DEVTOOLS_GLOBAL_HOOK__.Vue.util;\n}\nfunction findRelatedComponent(el) {\n    while (!el.__vue__ && el.parentElement) {\n        el = el.parentElement;\n    }\n    return el.__vue__;\n}\nexports.findRelatedComponent = findRelatedComponent;\nfunction getElWindow(el) {\n    return el.ownerDocument.defaultView;\n}\nfunction addIframePosition(bounds, win) {\n    if (win.__VUE_DEVTOOLS_IFRAME__) {\n        var rect = mergeRects(createRect(), bounds);\n        var iframeBounds = win.__VUE_DEVTOOLS_IFRAME__.getBoundingClientRect();\n        rect.top += iframeBounds.top;\n        rect.bottom += iframeBounds.top;\n        rect.left += iframeBounds.left;\n        rect.right += iframeBounds.left;\n        if (win.parent) {\n            return addIframePosition(rect, win.parent);\n        }\n        return rect;\n    }\n    return bounds;\n}\n//# sourceMappingURL=el.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTIvbGliL2NvbXBvbmVudHMvZWwuanM/YTFkYiJdLCJuYW1lcyI6WyJjb25zdCIsImxldCJdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCw0QkFBNEIsR0FBRyw4QkFBOEIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN2RUEsR0FBSyxDQUFDLGNBQWMsR0FBRyxtQkFBTyxDQUFDLGdFQUE0QixDQUFDLENBQUM7QUFDN0QsU0FBUyxVQUFVLEdBQUc7QUFDdEIsSUFBSUEsR0FBSyxDQUFDLElBQUksR0FBRztBQUNqQixRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ2QsUUFBUSxNQUFNLEVBQUUsQ0FBQztBQUNqQixRQUFRLElBQUksRUFBRSxDQUFDO0FBQ2YsUUFBUSxLQUFLLEVBQUUsQ0FBQztBQUNoQixRQUFRLElBQUksS0FBSyxHQUFHLEVBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN0RCxRQUFRLElBQUksTUFBTSxHQUFHLEVBQUUsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN2RCxLQUFLLENBQUM7QUFDTixJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFDRCxTQUFTLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQzFCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFO0FBQ2pDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ3RCLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtBQUMxQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUM1QixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsUUFBUSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDeEIsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFO0FBQ3ZDLFFBQVEsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzFCLEtBQUs7QUFDTCxJQUFJLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFNBQVMsc0JBQXNCLENBQUMsUUFBUSxFQUFFO0FBQzFDLElBQUlBLEdBQUssQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDO0FBQzVDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUU7QUFDbkM7QUFDQSxRQUFRLE9BQU87QUFDZixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNuQyxRQUFRLE9BQU87QUFDZixLQUFLO0FBQ0wsSUFBSSxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUU7QUFDOUIsUUFBUSxPQUFPLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkcsS0FBSztBQUNMLFNBQVMsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtBQUNoQyxRQUFRLE9BQU8saUJBQWlCLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUUsS0FBSztBQUNMLENBQUM7QUFDRCw4QkFBOEIsR0FBRyxzQkFBc0IsQ0FBQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMscUJBQXFCLElBQWlDLEVBQUUsQ0FBaEM7NENBQWdCOztBQUFpQjtBQUNsRSxJQUFJQSxHQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsRUFBRSxDQUFDO0FBQzlCLElBQUksSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsVUFBVSxJQUFJLEVBQUU7QUFDdEUsUUFBUUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztBQUN0QixRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQy9ELFlBQVksU0FBUyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3JELFNBQVM7QUFDVCxhQUFhLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtBQUMxRCxZQUFZLFNBQVMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUMsU0FBUztBQUNULFFBQVEsSUFBSSxTQUFTLEVBQUU7QUFDdkIsWUFBWSxVQUFVLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3hDLFNBQVM7QUFDVCxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUNEQSxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQzNCLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTO0FBQ2pDLFVBQVEsU0FBTztBQUNmLElBQUksSUFBSSxDQUFDLEtBQUs7QUFDZCxVQUFRLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUM7QUFDdkMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLElBQUksT0FBTyxLQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUN6QyxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJLEdBQUc7QUFDaEIsSUFBSSxPQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUN2RSxDQUFDO0FBQ0QsU0FBUyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUU7QUFDbEMsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsYUFBYSxFQUFFO0FBQzVDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDOUIsS0FBSztBQUNMLElBQUksT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDO0FBQ3RCLENBQUM7QUFDRCw0QkFBNEIsR0FBRyxvQkFBb0IsQ0FBQztBQUNwRCxTQUFTLFdBQVcsQ0FBQyxFQUFFLEVBQUU7QUFDekIsSUFBSSxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0FBQ3hDLENBQUM7QUFDRCxTQUFTLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7QUFDeEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRTtBQUNyQyxRQUFRRCxHQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxRQUFRQSxHQUFLLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ2pGLFFBQVEsSUFBSSxDQUFDLEdBQUcsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDO0FBQ3JDLFFBQVEsSUFBSSxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDO0FBQ3hDLFFBQVEsSUFBSSxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDO0FBQ3ZDLFFBQVEsSUFBSSxDQUFDLEtBQUssSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDO0FBQ3hDLFFBQVEsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO0FBQ3hCLFlBQVksT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLEtBQUs7QUFDTCxJQUFJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFDRCIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC12dWUyL2xpYi9jb21wb25lbnRzL2VsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbmRSZWxhdGVkQ29tcG9uZW50ID0gZXhwb3J0cy5nZXRJbnN0YW5jZU9yVm5vZGVSZWN0ID0gdm9pZCAwO1xuY29uc3Qgc2hhcmVkX3V0aWxzXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9zaGFyZWQtdXRpbHNcIik7XG5mdW5jdGlvbiBjcmVhdGVSZWN0KCkge1xuICAgIGNvbnN0IHJlY3QgPSB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgZ2V0IHdpZHRoKCkgeyByZXR1cm4gcmVjdC5yaWdodCAtIHJlY3QubGVmdDsgfSxcbiAgICAgICAgZ2V0IGhlaWdodCgpIHsgcmV0dXJuIHJlY3QuYm90dG9tIC0gcmVjdC50b3A7IH1cbiAgICB9O1xuICAgIHJldHVybiByZWN0O1xufVxuZnVuY3Rpb24gbWVyZ2VSZWN0cyhhLCBiKSB7XG4gICAgaWYgKCFhLnRvcCB8fCBiLnRvcCA8IGEudG9wKSB7XG4gICAgICAgIGEudG9wID0gYi50b3A7XG4gICAgfVxuICAgIGlmICghYS5ib3R0b20gfHwgYi5ib3R0b20gPiBhLmJvdHRvbSkge1xuICAgICAgICBhLmJvdHRvbSA9IGIuYm90dG9tO1xuICAgIH1cbiAgICBpZiAoIWEubGVmdCB8fCBiLmxlZnQgPCBhLmxlZnQpIHtcbiAgICAgICAgYS5sZWZ0ID0gYi5sZWZ0O1xuICAgIH1cbiAgICBpZiAoIWEucmlnaHQgfHwgYi5yaWdodCA+IGEucmlnaHQpIHtcbiAgICAgICAgYS5yaWdodCA9IGIucmlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBhO1xufVxuLyoqXG4gKiBHZXQgdGhlIGNsaWVudCByZWN0IGZvciBhbiBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5zdGFuY2VPclZub2RlUmVjdChpbnN0YW5jZSkge1xuICAgIGNvbnN0IGVsID0gaW5zdGFuY2UuJGVsIHx8IGluc3RhbmNlLmVsbTtcbiAgICBpZiAoIXNoYXJlZF91dGlsc18xLmlzQnJvd3Nlcikge1xuICAgICAgICAvLyBUT0RPOiBGaW5kIHBvc2l0aW9uIGZyb20gaW5zdGFuY2Ugb3IgYSB2bm9kZSAoZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cykuXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzaGFyZWRfdXRpbHNfMS5pbkRvYyhlbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaW5zdGFuY2UuX2lzRnJhZ21lbnQpIHtcbiAgICAgICAgcmV0dXJuIGFkZElmcmFtZVBvc2l0aW9uKGdldExlZ2FjeUZyYWdtZW50UmVjdChpbnN0YW5jZSksIGdldEVsV2luZG93KGluc3RhbmNlLiRyb290LiRlbCkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYWRkSWZyYW1lUG9zaXRpb24oZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGdldEVsV2luZG93KGVsKSk7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRJbnN0YW5jZU9yVm5vZGVSZWN0ID0gZ2V0SW5zdGFuY2VPclZub2RlUmVjdDtcbi8qKlxuICogSGlnaGxpZ2h0IGEgZnJhZ21lbnQgaW5zdGFuY2UuXG4gKiBMb29wIG92ZXIgaXRzIG5vZGUgcmFuZ2UgYW5kIGRldGVybWluZSBpdHMgYm91bmRpbmcgYm94LlxuICovXG5mdW5jdGlvbiBnZXRMZWdhY3lGcmFnbWVudFJlY3QoeyBfZnJhZ21lbnRTdGFydCwgX2ZyYWdtZW50RW5kIH0pIHtcbiAgICBjb25zdCByZWN0ID0gY3JlYXRlUmVjdCgpO1xuICAgIHV0aWwoKS5tYXBOb2RlUmFuZ2UoX2ZyYWdtZW50U3RhcnQsIF9mcmFnbWVudEVuZCwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgbGV0IGNoaWxkUmVjdDtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgICAgIGNoaWxkUmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMyAmJiBub2RlLmRhdGEudHJpbSgpKSB7XG4gICAgICAgICAgICBjaGlsZFJlY3QgPSBnZXRUZXh0UmVjdChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGRSZWN0KSB7XG4gICAgICAgICAgICBtZXJnZVJlY3RzKHJlY3QsIGNoaWxkUmVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVjdDtcbn1cbmxldCByYW5nZTtcbi8qKlxuICogR2V0IHRoZSBib3VuZGluZyByZWN0IGZvciBhIHRleHQgbm9kZSB1c2luZyBhIFJhbmdlLlxuICovXG5mdW5jdGlvbiBnZXRUZXh0UmVjdChub2RlKSB7XG4gICAgaWYgKCFzaGFyZWRfdXRpbHNfMS5pc0Jyb3dzZXIpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoIXJhbmdlKVxuICAgICAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2VsZWN0Tm9kZShub2RlKTtcbiAgICByZXR1cm4gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG4vKipcbiAqIEdldCBWdWUncyB1dGlsXG4gKi9cbmZ1bmN0aW9uIHV0aWwoKSB7XG4gICAgcmV0dXJuIHNoYXJlZF91dGlsc18xLnRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fLlZ1ZS51dGlsO1xufVxuZnVuY3Rpb24gZmluZFJlbGF0ZWRDb21wb25lbnQoZWwpIHtcbiAgICB3aGlsZSAoIWVsLl9fdnVlX18gJiYgZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBlbC5fX3Z1ZV9fO1xufVxuZXhwb3J0cy5maW5kUmVsYXRlZENvbXBvbmVudCA9IGZpbmRSZWxhdGVkQ29tcG9uZW50O1xuZnVuY3Rpb24gZ2V0RWxXaW5kb3coZWwpIHtcbiAgICByZXR1cm4gZWwub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcbn1cbmZ1bmN0aW9uIGFkZElmcmFtZVBvc2l0aW9uKGJvdW5kcywgd2luKSB7XG4gICAgaWYgKHdpbi5fX1ZVRV9ERVZUT09MU19JRlJBTUVfXykge1xuICAgICAgICBjb25zdCByZWN0ID0gbWVyZ2VSZWN0cyhjcmVhdGVSZWN0KCksIGJvdW5kcyk7XG4gICAgICAgIGNvbnN0IGlmcmFtZUJvdW5kcyA9IHdpbi5fX1ZVRV9ERVZUT09MU19JRlJBTUVfXy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmVjdC50b3AgKz0gaWZyYW1lQm91bmRzLnRvcDtcbiAgICAgICAgcmVjdC5ib3R0b20gKz0gaWZyYW1lQm91bmRzLnRvcDtcbiAgICAgICAgcmVjdC5sZWZ0ICs9IGlmcmFtZUJvdW5kcy5sZWZ0O1xuICAgICAgICByZWN0LnJpZ2h0ICs9IGlmcmFtZUJvdW5kcy5sZWZ0O1xuICAgICAgICBpZiAod2luLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFkZElmcmFtZVBvc2l0aW9uKHJlY3QsIHdpbi5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIH1cbiAgICByZXR1cm4gYm91bmRzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWwuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../app-backend-vue2/lib/components/el.js\n");

/***/ }),

/***/ "../app-backend-vue2/lib/components/tree.js":
/*!**************************************************!*\
  !*** ../app-backend-vue2/lib/components/tree.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getComponentParents = exports.walkTree = exports.functionalVnodeMap = exports.instanceMap = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar el_1 = __webpack_require__(/*! ./el */ \"../app-backend-vue2/lib/components/el.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"../app-backend-vue2/lib/components/util.js\");\nvar appRecord;\nvar consoleBoundInstances = Array(5);\nvar filter = '';\nvar functionalIds = new Map();\n// Dedupe instances\n// Some instances may be both on a component and on a child abstract/functional component\nvar captureIds = new Map();\nfunction walkTree(instance, pFilter, ctx) {\n    initCtx(ctx);\n    filter = pFilter;\n    functionalIds.clear();\n    captureIds.clear();\n    var result = findQualifiedChildren(instance);\n    if (Array.isArray(result)) {\n        return result;\n    }\n    return [result];\n}\nexports.walkTree = walkTree;\nfunction getComponentParents(instance, ctx) {\n    initCtx(ctx);\n    var captureIds = new Map();\n    var captureId = function (vm) {\n        var id = util_1.getUniqueId(vm);\n        if (captureIds.has(id))\n            { return; }\n        captureIds.set(id, undefined);\n        mark(vm);\n    };\n    var parents = [];\n    captureId(instance);\n    var parent = instance;\n    while ((parent = parent.$parent)) {\n        captureId(parent);\n        parents.push(parent);\n    }\n    return parents;\n}\nexports.getComponentParents = getComponentParents;\nfunction initCtx(ctx) {\n    appRecord = ctx.currentAppRecord;\n    if (!appRecord.meta.instanceMap) {\n        appRecord.meta.instanceMap = new Map();\n    }\n    exports.instanceMap = appRecord.meta.instanceMap;\n    if (!appRecord.meta.functionalVnodeMap) {\n        appRecord.meta.functionalVnodeMap = new Map();\n    }\n    exports.functionalVnodeMap = appRecord.meta.functionalVnodeMap;\n}\n/**\n * Iterate through an array of instances and flatten it into\n * an array of qualified instances. This is a depth-first\n * traversal - e.g. if an instance is not matched, we will\n * recursively go deeper until a qualified child is found.\n */\nfunction findQualifiedChildrenFromList(instances) {\n    instances = instances\n        .filter(function (child) { return !util_1.isBeingDestroyed(child); });\n    return !filter\n        ? instances.map(capture)\n        : Array.prototype.concat.apply([], instances.map(findQualifiedChildren));\n}\n/**\n * Find qualified children from a single instance.\n * If the instance itself is qualified, just return itself.\n * This is ok because [].concat works in both cases.\n */\nfunction findQualifiedChildren(instance) {\n    if (isQualified(instance)) {\n        return capture(instance);\n    }\n    else {\n        return findQualifiedChildrenFromList(instance.$children).concat(instance._vnode && instance._vnode.children\n            // Find functional components in recursively in non-functional vnodes.\n            ? flatten(instance._vnode.children.filter(function (child) { return !child.componentInstance; }).map(captureChild))\n                // Filter qualified children.\n                .filter(function (instance) { return isQualified(instance); })\n            : []);\n    }\n}\n/**\n * Get children from a component instance.\n */\nfunction getInternalInstanceChildren(instance) {\n    if (instance.$children) {\n        return instance.$children;\n    }\n    if (Array.isArray(instance.subTree.children)) {\n        return instance.subTree.children.filter(function (vnode) { return !!vnode.component; }).map(function (vnode) { return vnode.component; });\n    }\n    return [];\n}\n/**\n * Check if an instance is qualified.\n */\nfunction isQualified(instance) {\n    var name = shared_utils_1.classify(util_1.getInstanceName(instance)).toLowerCase();\n    return name.indexOf(filter) > -1;\n}\nfunction flatten(items) {\n    return items.reduce(function (acc, item) {\n        if (item instanceof Array)\n            { acc.push.apply(acc, flatten(item)); }\n        else if (item)\n            { acc.push(item); }\n        return acc;\n    }, []);\n}\nfunction captureChild(child) {\n    if (child.fnContext && !child.componentInstance) {\n        return capture(child);\n    }\n    else if (child.componentInstance) {\n        if (!util_1.isBeingDestroyed(child.componentInstance))\n            { return capture(child.componentInstance); }\n    }\n    else if (child.children) {\n        return flatten(child.children.map(captureChild));\n    }\n}\n/**\n * Capture the meta information of an instance. (recursive)\n */\nfunction capture(instance, index, list) {\n    var _a, _b;\n    if (instance.__VUE_DEVTOOLS_FUNCTIONAL_LEGACY__) {\n        instance = instance.vnode;\n    }\n    if (instance.$options && instance.$options.abstract && instance._vnode && instance._vnode.componentInstance) {\n        instance = instance._vnode.componentInstance;\n    }\n    if ((_b = (_a = instance.$options) === null || _a === void 0 ? void 0 : _a.devtools) === null || _b === void 0 ? void 0 : _b.hide)\n        { return; }\n    // Functional component.\n    if (instance.fnContext && !instance.componentInstance) {\n        var contextUid = instance.fnContext.__VUE_DEVTOOLS_UID__;\n        var id = functionalIds.get(contextUid);\n        if (id == null) {\n            id = 0;\n        }\n        else {\n            id++;\n        }\n        functionalIds.set(contextUid, id);\n        var functionalId = contextUid + ':functional:' + id;\n        markFunctional(functionalId, instance);\n        var children$1 = (instance.children\n            ? instance.children.map(function (child) { return child.fnContext\n                ? captureChild(child)\n                : child.componentInstance\n                    ? capture(child.componentInstance)\n                    : undefined; })\n            // router-view has both fnContext and componentInstance on vnode.\n            : instance.componentInstance ? [capture(instance.componentInstance)] : []).filter(Boolean);\n        return {\n            uid: functionalId,\n            id: functionalId,\n            tags: [\n                {\n                    label: 'functional',\n                    textColor: 0x555555,\n                    backgroundColor: 0xeeeeee\n                }\n            ],\n            name: util_1.getInstanceName(instance),\n            renderKey: util_1.getRenderKey(instance.key),\n            children: children$1,\n            hasChildren: !!children$1.length,\n            inactive: false,\n            isFragment: false // TODO: Check what is it for.\n        };\n    }\n    // instance._uid is not reliable in devtools as there\n    // may be 2 roots with same _uid which causes unexpected\n    // behaviour\n    instance.__VUE_DEVTOOLS_UID__ = util_1.getUniqueId(instance);\n    // Dedupe\n    if (captureIds.has(instance.__VUE_DEVTOOLS_UID__)) {\n        return;\n    }\n    else {\n        captureIds.set(instance.__VUE_DEVTOOLS_UID__, undefined);\n    }\n    mark(instance);\n    var name = util_1.getInstanceName(instance);\n    var children = getInternalInstanceChildren(instance)\n        .filter(function (child) { return !util_1.isBeingDestroyed(child); })\n        .map(capture)\n        .filter(Boolean);\n    var ret = {\n        uid: instance._uid,\n        id: instance.__VUE_DEVTOOLS_UID__,\n        name: name,\n        renderKey: util_1.getRenderKey(instance.$vnode ? instance.$vnode.key : null),\n        inactive: !!instance._inactive,\n        isFragment: !!instance._isFragment,\n        children: children,\n        hasChildren: !!children.length,\n        tags: [],\n        meta: {}\n    };\n    if (instance._vnode && instance._vnode.children) {\n        ret.children = ret.children.concat(flatten(instance._vnode.children.map(captureChild))\n            .filter(Boolean));\n        ret.hasChildren = !!ret.children.length;\n    }\n    // record screen position to ensure correct ordering\n    if ((!list || list.length > 1) && !instance._inactive) {\n        var rect = el_1.getInstanceOrVnodeRect(instance);\n        ret.positionTop = rect ? rect.top : Infinity;\n    }\n    else {\n        ret.positionTop = Infinity;\n    }\n    // check if instance is available in console\n    var consoleId = consoleBoundInstances.indexOf(instance.__VUE_DEVTOOLS_UID__);\n    ret.consoleId = consoleId > -1 ? '$vm' + consoleId : null;\n    // check router view\n    var isRouterView2 = instance.$vnode && instance.$vnode.data.routerView;\n    if (instance._routerView || isRouterView2) {\n        ret.isRouterView = true;\n        if (!instance._inactive && instance.$route) {\n            var matched = instance.$route.matched;\n            var depth = isRouterView2\n                ? instance.$vnode.data.routerViewDepth\n                : instance._routerView.depth;\n            ret.meta.matchedRouteSegment =\n                matched &&\n                    matched[depth] &&\n                    (isRouterView2 ? matched[depth].path : matched[depth].handler.path);\n        }\n        ret.tags.push({\n            label: (\"router-view\" + (ret.meta.matchedRouteSegment ? (\": \" + (ret.meta.matchedRouteSegment)) : '')),\n            textColor: 0x000000,\n            backgroundColor: 0xff8344\n        });\n    }\n    return ret;\n}\n/**\n * Mark an instance as captured and store it in the instance map.\n *\n * @param {Vue} instance\n */\nfunction mark(instance) {\n    var refId = instance.__VUE_DEVTOOLS_UID__;\n    if (!exports.instanceMap.has(refId)) {\n        exports.instanceMap.set(refId, instance);\n        appRecord.instanceMap.set(refId, instance);\n        instance.$on('hook:beforeDestroy', function () {\n            exports.instanceMap.delete(refId);\n        });\n    }\n}\nfunction markFunctional(id, vnode) {\n    var refId = vnode.fnContext.__VUE_DEVTOOLS_UID__;\n    if (!exports.functionalVnodeMap.has(refId)) {\n        exports.functionalVnodeMap.set(refId, {});\n        vnode.fnContext.$on('hook:beforeDestroy', function () {\n            exports.functionalVnodeMap.delete(refId);\n        });\n    }\n    exports.functionalVnodeMap.get(refId)[id] = vnode;\n    appRecord.instanceMap.set(id, {\n        __VUE_DEVTOOLS_UID__: id,\n        __VUE_DEVTOOLS_FUNCTIONAL_LEGACY__: true,\n        vnode: vnode\n    });\n}\n//# sourceMappingURL=tree.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue2/lib/components/tree.js\n");

/***/ }),

/***/ "../app-backend-vue2/lib/components/util.js":
/*!**************************************************!*\
  !*** ../app-backend-vue2/lib/components/util.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUniqueId = exports.getRenderKey = exports.getInstanceName = exports.isBeingDestroyed = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nfunction isBeingDestroyed(instance) {\n    return instance._isBeingDestroyed;\n}\nexports.isBeingDestroyed = isBeingDestroyed;\n/**\n * Get the appropriate display name for an instance.\n */\nfunction getInstanceName(instance) {\n    var name = shared_utils_1.getComponentName(instance.$options || instance.fnOptions || {});\n    if (name)\n        { return name; }\n    return instance.$root === instance\n        ? 'Root'\n        : 'Anonymous Component';\n}\nexports.getInstanceName = getInstanceName;\nfunction getRenderKey(value) {\n    if (value == null)\n        { return; }\n    var type = typeof value;\n    if (type === 'number') {\n        return value.toString();\n    }\n    else if (type === 'string') {\n        return (\"'\" + value + \"'\");\n    }\n    else if (Array.isArray(value)) {\n        return 'Array';\n    }\n    else {\n        return 'Object';\n    }\n}\nexports.getRenderKey = getRenderKey;\n/**\n * Returns a devtools unique id for instance.\n */\nfunction getUniqueId(instance) {\n    if (instance.__VUE_DEVTOOLS_UID__ != null)\n        { return instance.__VUE_DEVTOOLS_UID__; }\n    var rootVueId = instance.$root.__VUE_DEVTOOLS_ROOT_UID__;\n    return (rootVueId + \":\" + (instance._uid));\n}\nexports.getUniqueId = getUniqueId;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTIvbGliL2NvbXBvbmVudHMvdXRpbC5qcz80OWE4Il0sIm5hbWVzIjpbImNvbnN0Il0sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELG1CQUFtQixHQUFHLG9CQUFvQixHQUFHLHVCQUF1QixHQUFHLHdCQUF3QixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3pHQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3RCxTQUFTLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtBQUNwQyxJQUFJLE9BQU8sUUFBUSxDQUFDLGlCQUFpQixDQUFDO0FBQ3RDLENBQUM7QUFDRCx3QkFBd0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM1QztBQUNBO0FBQ0E7QUFDQSxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUU7QUFDbkMsSUFBSUEsR0FBSyxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hHLElBQUksSUFBSSxJQUFJO0FBQ1osVUFBUSxPQUFPLElBQUksR0FBQztBQUNwQixJQUFJLE9BQU8sUUFBUSxDQUFDLEtBQUssS0FBSyxRQUFRO0FBQ3RDLFVBQVUsTUFBTTtBQUNoQixVQUFVLHFCQUFxQixDQUFDO0FBQ2hDLENBQUM7QUFDRCx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDMUMsU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0FBQzdCLElBQUksSUFBSSxLQUFLLElBQUksSUFBSTtBQUNyQixVQUFRLFNBQU87QUFDZixJQUFJQSxHQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sS0FBSyxDQUFDO0FBQzlCLElBQUksSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQzNCLFFBQVEsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDaEMsS0FBSztBQUNMLFNBQVMsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQ2hDLFFBQVEsT0FBTyxPQUFJLEtBQUssT0FBRyxDQUFDO0FBQzVCLEtBQUs7QUFDTCxTQUFTLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNuQyxRQUFRLE9BQU8sT0FBTyxDQUFDO0FBQ3ZCLEtBQUs7QUFDTCxTQUFTO0FBQ1QsUUFBUSxPQUFPLFFBQVEsQ0FBQztBQUN4QixLQUFLO0FBQ0wsQ0FBQztBQUNELG9CQUFvQixHQUFHLFlBQVksQ0FBQztBQUNwQztBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxRQUFRLEVBQUU7QUFDL0IsSUFBSSxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsSUFBSSxJQUFJO0FBQzdDLFVBQVEsT0FBTyxRQUFRLENBQUMsb0JBQW9CLEdBQUM7QUFDN0MsSUFBSUEsR0FBSyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDO0FBQy9ELElBQUksUUFBVSxTQUFTLFVBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUMzQyxDQUFDO0FBQ0QsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO0FBQ2xDIiwiZmlsZSI6Ii4uL2FwcC1iYWNrZW5kLXZ1ZTIvbGliL2NvbXBvbmVudHMvdXRpbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRVbmlxdWVJZCA9IGV4cG9ydHMuZ2V0UmVuZGVyS2V5ID0gZXhwb3J0cy5nZXRJbnN0YW5jZU5hbWUgPSBleHBvcnRzLmlzQmVpbmdEZXN0cm95ZWQgPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL3NoYXJlZC11dGlsc1wiKTtcbmZ1bmN0aW9uIGlzQmVpbmdEZXN0cm95ZWQoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX2lzQmVpbmdEZXN0cm95ZWQ7XG59XG5leHBvcnRzLmlzQmVpbmdEZXN0cm95ZWQgPSBpc0JlaW5nRGVzdHJveWVkO1xuLyoqXG4gKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGRpc3BsYXkgbmFtZSBmb3IgYW4gaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldEluc3RhbmNlTmFtZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IG5hbWUgPSBzaGFyZWRfdXRpbHNfMS5nZXRDb21wb25lbnROYW1lKGluc3RhbmNlLiRvcHRpb25zIHx8IGluc3RhbmNlLmZuT3B0aW9ucyB8fCB7fSk7XG4gICAgaWYgKG5hbWUpXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIHJldHVybiBpbnN0YW5jZS4kcm9vdCA9PT0gaW5zdGFuY2VcbiAgICAgICAgPyAnUm9vdCdcbiAgICAgICAgOiAnQW5vbnltb3VzIENvbXBvbmVudCc7XG59XG5leHBvcnRzLmdldEluc3RhbmNlTmFtZSA9IGdldEluc3RhbmNlTmFtZTtcbmZ1bmN0aW9uIGdldFJlbmRlcktleSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBgJyR7dmFsdWV9J2A7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnQXJyYXknO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdPYmplY3QnO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0UmVuZGVyS2V5ID0gZ2V0UmVuZGVyS2V5O1xuLyoqXG4gKiBSZXR1cm5zIGEgZGV2dG9vbHMgdW5pcXVlIGlkIGZvciBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuX19WVUVfREVWVE9PTFNfVUlEX18gIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLl9fVlVFX0RFVlRPT0xTX1VJRF9fO1xuICAgIGNvbnN0IHJvb3RWdWVJZCA9IGluc3RhbmNlLiRyb290Ll9fVlVFX0RFVlRPT0xTX1JPT1RfVUlEX187XG4gICAgcmV0dXJuIGAke3Jvb3RWdWVJZH06JHtpbnN0YW5jZS5fdWlkfWA7XG59XG5leHBvcnRzLmdldFVuaXF1ZUlkID0gZ2V0VW5pcXVlSWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-vue2/lib/components/util.js\n");

/***/ }),

/***/ "../app-backend-vue2/lib/events.js":
/*!*****************************************!*\
  !*** ../app-backend-vue2/lib/events.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wrapVueForEvents = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar internalRE = /^(?:pre-)?hook:/;\nfunction wrap(app, Vue, method, ctx) {\n    var original = Vue.prototype[method];\n    if (original) {\n        Vue.prototype[method] = function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            var res = original.apply(this, args);\n            logEvent(this, method, args[0], args.slice(1));\n            return res;\n        };\n    }\n    function logEvent(vm, type, eventName, payload) {\n        // The string check is important for compat with 1.x where the first\n        // argument may be an object instead of a string.\n        // this also ensures the event is only logged for direct $emit (source)\n        // instead of by $dispatch/$broadcast\n        if (typeof eventName === 'string' && !internalRE.test(eventName)) {\n            var instance = vm._self || vm;\n            ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_EMIT, app, instance, eventName, payload);\n        }\n    }\n}\nfunction wrapVueForEvents(app, Vue, ctx) {\n    ['$emit', '$broadcast', '$dispatch'].forEach(function (method) {\n        wrap(app, Vue, method, ctx);\n    });\n}\nexports.wrapVueForEvents = wrapVueForEvents;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTIvbGliL2V2ZW50cy5qcz8zZDUzIl0sIm5hbWVzIjpbImNvbnN0Il0sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELHdCQUF3QixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ2xDQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQUNyQyxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7QUFDckMsSUFBSUEsR0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLElBQUksSUFBSSxRQUFRLEVBQUU7QUFDbEIsUUFBUSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQWlCLEVBQUU7OztBQUFDO0FBQ3BELFlBQVlBLEdBQUssQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkQsWUFBWSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNELFlBQVksT0FBTyxHQUFHLENBQUM7QUFDdkIsU0FBUyxDQUFDO0FBQ1YsS0FBSztBQUNMLElBQUksU0FBUyxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDMUUsWUFBWUEsR0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztBQUM1QyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZHLFNBQVM7QUFDVCxLQUFLO0FBQ0wsQ0FBQztBQUNELFNBQVMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDekMsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxXQUFDLE9BQU0sQ0FBSTtBQUMzRCxRQUFRLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwQyxLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7QUFDRCx3QkFBd0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM1QyIsImZpbGUiOiIuLi9hcHAtYmFja2VuZC12dWUyL2xpYi9ldmVudHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud3JhcFZ1ZUZvckV2ZW50cyA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xuY29uc3QgaW50ZXJuYWxSRSA9IC9eKD86cHJlLSk/aG9vazovO1xuZnVuY3Rpb24gd3JhcChhcHAsIFZ1ZSwgbWV0aG9kLCBjdHgpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IFZ1ZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICBpZiAob3JpZ2luYWwpIHtcbiAgICAgICAgVnVlLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgbG9nRXZlbnQodGhpcywgbWV0aG9kLCBhcmdzWzBdLCBhcmdzLnNsaWNlKDEpKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvZ0V2ZW50KHZtLCB0eXBlLCBldmVudE5hbWUsIHBheWxvYWQpIHtcbiAgICAgICAgLy8gVGhlIHN0cmluZyBjaGVjayBpcyBpbXBvcnRhbnQgZm9yIGNvbXBhdCB3aXRoIDEueCB3aGVyZSB0aGUgZmlyc3RcbiAgICAgICAgLy8gYXJndW1lbnQgbWF5IGJlIGFuIG9iamVjdCBpbnN0ZWFkIG9mIGEgc3RyaW5nLlxuICAgICAgICAvLyB0aGlzIGFsc28gZW5zdXJlcyB0aGUgZXZlbnQgaXMgb25seSBsb2dnZWQgZm9yIGRpcmVjdCAkZW1pdCAoc291cmNlKVxuICAgICAgICAvLyBpbnN0ZWFkIG9mIGJ5ICRkaXNwYXRjaC8kYnJvYWRjYXN0XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSAnc3RyaW5nJyAmJiAhaW50ZXJuYWxSRS50ZXN0KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdm0uX3NlbGYgfHwgdm07XG4gICAgICAgICAgICBjdHguaG9vay5lbWl0KHNoYXJlZF91dGlsc18xLkhvb2tFdmVudHMuQ09NUE9ORU5UX0VNSVQsIGFwcCwgaW5zdGFuY2UsIGV2ZW50TmFtZSwgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB3cmFwVnVlRm9yRXZlbnRzKGFwcCwgVnVlLCBjdHgpIHtcbiAgICBbJyRlbWl0JywgJyRicm9hZGNhc3QnLCAnJGRpc3BhdGNoJ10uZm9yRWFjaChtZXRob2QgPT4ge1xuICAgICAgICB3cmFwKGFwcCwgVnVlLCBtZXRob2QsIGN0eCk7XG4gICAgfSk7XG59XG5leHBvcnRzLndyYXBWdWVGb3JFdmVudHMgPSB3cmFwVnVlRm9yRXZlbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-vue2/lib/events.js\n");

/***/ }),

/***/ "../app-backend-vue2/lib/index.js":
/*!****************************************!*\
  !*** ../app-backend-vue2/lib/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.backend = void 0;\nvar app_backend_api_1 = __webpack_require__(/*! @vue-devtools/app-backend-api */ \"../app-backend-api/lib/index.js\");\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar data_1 = __webpack_require__(/*! ./components/data */ \"../app-backend-vue2/lib/components/data.js\");\nvar el_1 = __webpack_require__(/*! ./components/el */ \"../app-backend-vue2/lib/components/el.js\");\nvar tree_1 = __webpack_require__(/*! ./components/tree */ \"../app-backend-vue2/lib/components/tree.js\");\nvar util_1 = __webpack_require__(/*! ./components/util */ \"../app-backend-vue2/lib/components/util.js\");\nvar events_1 = __webpack_require__(/*! ./events */ \"../app-backend-vue2/lib/events.js\");\nvar plugin_1 = __webpack_require__(/*! ./plugin */ \"../app-backend-vue2/lib/plugin.js\");\nexports.backend = {\n    frameworkVersion: 2,\n    availableFeatures: [\n        app_backend_api_1.BuiltinBackendFeature.COMPONENTS,\n        app_backend_api_1.BuiltinBackendFeature.FLUSH\n    ],\n    setup: function setup(api) {\n        api.on.getAppRecordName(function (payload) {\n            if (payload.app.name) {\n                payload.name = payload.app.name;\n            }\n        });\n        api.on.getAppRootInstance(function (payload) {\n            payload.root = payload.app;\n        });\n        api.on.walkComponentTree(function (payload, ctx) {\n            payload.componentTreeData = tree_1.walkTree(payload.componentInstance, payload.filter, ctx);\n        });\n        api.on.walkComponentParents(function (payload, ctx) {\n            payload.parentInstances = tree_1.getComponentParents(payload.componentInstance, ctx);\n        });\n        api.on.inspectComponent(function (payload) {\n            injectToUtils();\n            payload.instanceData = data_1.getInstanceDetails(payload.componentInstance);\n        });\n        api.on.getComponentBounds(function (payload) {\n            payload.bounds = el_1.getInstanceOrVnodeRect(payload.componentInstance);\n        });\n        api.on.getComponentName(function (payload) {\n            var instance = payload.componentInstance;\n            payload.name = instance.fnContext ? shared_utils_1.getComponentName(instance.fnOptions) : util_1.getInstanceName(instance);\n        });\n        api.on.getElementComponent(function (payload) {\n            payload.componentInstance = el_1.findRelatedComponent(payload.element);\n        });\n        api.on.editComponentState(function (payload) {\n            data_1.editState(payload);\n        });\n        api.on.getComponentRootElements(function (payload) {\n            payload.rootElements = [payload.componentInstance.$el];\n        });\n        api.on.getComponentDevtoolsOptions(function (payload) {\n            payload.options = payload.componentInstance.$options.devtools;\n        });\n        api.on.getComponentRenderCode(function (payload) {\n            payload.code = payload.componentInstance.$options.render.toString();\n        });\n        api.on.getComponentInstances(function () {\n            console.warn('on.getComponentInstances is not implemented for Vue 2');\n        });\n    },\n    setupApp: function setupApp(api, appRecord) {\n        injectToUtils();\n        var ref = appRecord.options.meta;\n        var Vue = ref.Vue;\n        var app = appRecord.options.app;\n        events_1.wrapVueForEvents(app, Vue, api.ctx);\n        plugin_1.setupPlugin(api, app);\n    }\n};\nfunction injectToUtils() {\n    shared_utils_1.backendInjections.getCustomInstanceDetails = data_1.getCustomInstanceDetails;\n    shared_utils_1.backendInjections.instanceMap = tree_1.instanceMap;\n    shared_utils_1.backendInjections.isVueInstance = function (val) { return val._isVue; };\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTIvbGliL2luZGV4LmpzPzFlYTYiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3pCQSxHQUFLLENBQUMsaUJBQWlCLEdBQUcsbUJBQU8sQ0FBQyxzRUFBK0IsQ0FBQyxDQUFDO0FBQ25FQSxHQUFLLENBQUMsY0FBYyxHQUFHLG1CQUFPLENBQUMsZ0VBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLE1BQU0sR0FBRyxtQkFBTyxDQUFDLHFFQUFtQixDQUFDLENBQUM7QUFDNUNBLEdBQUssQ0FBQyxJQUFJLEdBQUcsbUJBQU8sQ0FBQyxpRUFBaUIsQ0FBQyxDQUFDO0FBQ3hDQSxHQUFLLENBQUMsTUFBTSxHQUFHLG1CQUFPLENBQUMscUVBQW1CLENBQUMsQ0FBQztBQUM1Q0EsR0FBSyxDQUFDLE1BQU0sR0FBRyxtQkFBTyxDQUFDLHFFQUFtQixDQUFDLENBQUM7QUFDNUNBLEdBQUssQ0FBQyxRQUFRLEdBQUcsbUJBQU8sQ0FBQyxtREFBVSxDQUFDLENBQUM7QUFDckNBLEdBQUssQ0FBQyxRQUFRLEdBQUcsbUJBQU8sQ0FBQyxtREFBVSxDQUFDLENBQUM7QUFDckMsZUFBZSxHQUFHO0FBQ2xCLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztBQUN2QixJQUFJLGlCQUFpQixFQUFFO0FBQ3ZCLFFBQVEsaUJBQWlCLENBQUMscUJBQXFCLENBQUMsVUFBVTtBQUMxRCxRQUFRLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLEtBQUs7QUFDckQsS0FBSztBQUNMLElBQUkscUJBQUssQ0FBQyxHQUFHLEVBQUU7QUFDZixRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLFdBQUMsUUFBTyxDQUFJO0FBQzNDLFlBQVksSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtBQUNsQyxnQkFBZ0IsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUNoRCxhQUFhO0FBQ2IsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLFdBQUMsUUFBTyxDQUFJO0FBQzdDLFlBQVksT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQ3ZDLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDLGlCQUFpQixVQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBSztBQUNuRCxZQUFZLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3hHLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDLG9CQUFvQixVQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBSztBQUN0RCxZQUFZLE9BQU8sQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqRyxTQUFTLENBQUMsQ0FBQztBQUNYLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsV0FBQyxRQUFPLENBQUk7QUFDM0MsWUFBWSxhQUFhLEVBQUUsQ0FBQztBQUM1QixZQUFZLE9BQU8sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3hGLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDLGtCQUFrQixXQUFDLFFBQU8sQ0FBSTtBQUM3QyxZQUFZLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3BGLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDLGdCQUFnQixXQUFDLFFBQU8sQ0FBSTtBQUMzQyxZQUFZQSxHQUFLLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUN2RCxZQUFZLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkksU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLFdBQUMsUUFBTyxDQUFJO0FBQzlDLFlBQVksT0FBTyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkYsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLFdBQUMsUUFBTyxDQUFJO0FBQzdDLFlBQVksTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QyxTQUFTLENBQUMsQ0FBQztBQUNYLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQyx3QkFBd0IsV0FBQyxRQUFPLENBQUk7QUFDbkQsWUFBWSxPQUFPLENBQUMsWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25FLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDLDJCQUEyQixXQUFDLFFBQU8sQ0FBSTtBQUN0RCxZQUFZLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDMUUsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLFdBQUMsUUFBTyxDQUFJO0FBQ2pELFlBQVksT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNoRixTQUFTLENBQUMsQ0FBQztBQUNYLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsVUFBQyxHQUFNO0FBQzNDLFlBQVksT0FBTyxDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQ2xGLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsS0FBSztBQUNMLElBQUksMkJBQVEsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO0FBQzdCLFFBQVEsYUFBYSxFQUFFLENBQUM7QUFDeEIsZUFBcUIsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQTFCLGtCQUErQjtBQUMvQyxRQUFRQSxHQUFLLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQzFDLFFBQVEsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELFFBQVEsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdkMsS0FBSztBQUNMLENBQUMsQ0FBQztBQUNGLFNBQVMsYUFBYSxHQUFHO0FBQ3pCLElBQUksY0FBYyxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQztBQUNoRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUN0RSxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLGFBQUcsSUFBRyxVQUFJLEdBQUcsQ0FBQyxTQUFNLENBQUM7QUFDdkUsQ0FBQztBQUNEIiwiZmlsZSI6Ii4uL2FwcC1iYWNrZW5kLXZ1ZTIvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJhY2tlbmQgPSB2b2lkIDA7XG5jb25zdCBhcHBfYmFja2VuZF9hcGlfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL2FwcC1iYWNrZW5kLWFwaVwiKTtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xuY29uc3QgZGF0YV8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9kYXRhXCIpO1xuY29uc3QgZWxfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvZWxcIik7XG5jb25zdCB0cmVlXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL3RyZWVcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL3V0aWxcIik7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCIuL2V2ZW50c1wiKTtcbmNvbnN0IHBsdWdpbl8xID0gcmVxdWlyZShcIi4vcGx1Z2luXCIpO1xuZXhwb3J0cy5iYWNrZW5kID0ge1xuICAgIGZyYW1ld29ya1ZlcnNpb246IDIsXG4gICAgYXZhaWxhYmxlRmVhdHVyZXM6IFtcbiAgICAgICAgYXBwX2JhY2tlbmRfYXBpXzEuQnVpbHRpbkJhY2tlbmRGZWF0dXJlLkNPTVBPTkVOVFMsXG4gICAgICAgIGFwcF9iYWNrZW5kX2FwaV8xLkJ1aWx0aW5CYWNrZW5kRmVhdHVyZS5GTFVTSFxuICAgIF0sXG4gICAgc2V0dXAoYXBpKSB7XG4gICAgICAgIGFwaS5vbi5nZXRBcHBSZWNvcmROYW1lKHBheWxvYWQgPT4ge1xuICAgICAgICAgICAgaWYgKHBheWxvYWQuYXBwLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLm5hbWUgPSBwYXlsb2FkLmFwcC5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLmdldEFwcFJvb3RJbnN0YW5jZShwYXlsb2FkID0+IHtcbiAgICAgICAgICAgIHBheWxvYWQucm9vdCA9IHBheWxvYWQuYXBwO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLndhbGtDb21wb25lbnRUcmVlKChwYXlsb2FkLCBjdHgpID0+IHtcbiAgICAgICAgICAgIHBheWxvYWQuY29tcG9uZW50VHJlZURhdGEgPSB0cmVlXzEud2Fsa1RyZWUocGF5bG9hZC5jb21wb25lbnRJbnN0YW5jZSwgcGF5bG9hZC5maWx0ZXIsIGN0eCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcGkub24ud2Fsa0NvbXBvbmVudFBhcmVudHMoKHBheWxvYWQsIGN0eCkgPT4ge1xuICAgICAgICAgICAgcGF5bG9hZC5wYXJlbnRJbnN0YW5jZXMgPSB0cmVlXzEuZ2V0Q29tcG9uZW50UGFyZW50cyhwYXlsb2FkLmNvbXBvbmVudEluc3RhbmNlLCBjdHgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLmluc3BlY3RDb21wb25lbnQocGF5bG9hZCA9PiB7XG4gICAgICAgICAgICBpbmplY3RUb1V0aWxzKCk7XG4gICAgICAgICAgICBwYXlsb2FkLmluc3RhbmNlRGF0YSA9IGRhdGFfMS5nZXRJbnN0YW5jZURldGFpbHMocGF5bG9hZC5jb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcGkub24uZ2V0Q29tcG9uZW50Qm91bmRzKHBheWxvYWQgPT4ge1xuICAgICAgICAgICAgcGF5bG9hZC5ib3VuZHMgPSBlbF8xLmdldEluc3RhbmNlT3JWbm9kZVJlY3QocGF5bG9hZC5jb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcGkub24uZ2V0Q29tcG9uZW50TmFtZShwYXlsb2FkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gcGF5bG9hZC5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgICAgIHBheWxvYWQubmFtZSA9IGluc3RhbmNlLmZuQ29udGV4dCA/IHNoYXJlZF91dGlsc18xLmdldENvbXBvbmVudE5hbWUoaW5zdGFuY2UuZm5PcHRpb25zKSA6IHV0aWxfMS5nZXRJbnN0YW5jZU5hbWUoaW5zdGFuY2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLmdldEVsZW1lbnRDb21wb25lbnQocGF5bG9hZCA9PiB7XG4gICAgICAgICAgICBwYXlsb2FkLmNvbXBvbmVudEluc3RhbmNlID0gZWxfMS5maW5kUmVsYXRlZENvbXBvbmVudChwYXlsb2FkLmVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLmVkaXRDb21wb25lbnRTdGF0ZShwYXlsb2FkID0+IHtcbiAgICAgICAgICAgIGRhdGFfMS5lZGl0U3RhdGUocGF5bG9hZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcGkub24uZ2V0Q29tcG9uZW50Um9vdEVsZW1lbnRzKHBheWxvYWQgPT4ge1xuICAgICAgICAgICAgcGF5bG9hZC5yb290RWxlbWVudHMgPSBbcGF5bG9hZC5jb21wb25lbnRJbnN0YW5jZS4kZWxdO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLmdldENvbXBvbmVudERldnRvb2xzT3B0aW9ucyhwYXlsb2FkID0+IHtcbiAgICAgICAgICAgIHBheWxvYWQub3B0aW9ucyA9IHBheWxvYWQuY29tcG9uZW50SW5zdGFuY2UuJG9wdGlvbnMuZGV2dG9vbHM7XG4gICAgICAgIH0pO1xuICAgICAgICBhcGkub24uZ2V0Q29tcG9uZW50UmVuZGVyQ29kZShwYXlsb2FkID0+IHtcbiAgICAgICAgICAgIHBheWxvYWQuY29kZSA9IHBheWxvYWQuY29tcG9uZW50SW5zdGFuY2UuJG9wdGlvbnMucmVuZGVyLnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcGkub24uZ2V0Q29tcG9uZW50SW5zdGFuY2VzKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignb24uZ2V0Q29tcG9uZW50SW5zdGFuY2VzIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgVnVlIDInKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXR1cEFwcChhcGksIGFwcFJlY29yZCkge1xuICAgICAgICBpbmplY3RUb1V0aWxzKCk7XG4gICAgICAgIGNvbnN0IHsgVnVlIH0gPSBhcHBSZWNvcmQub3B0aW9ucy5tZXRhO1xuICAgICAgICBjb25zdCBhcHAgPSBhcHBSZWNvcmQub3B0aW9ucy5hcHA7XG4gICAgICAgIGV2ZW50c18xLndyYXBWdWVGb3JFdmVudHMoYXBwLCBWdWUsIGFwaS5jdHgpO1xuICAgICAgICBwbHVnaW5fMS5zZXR1cFBsdWdpbihhcGksIGFwcCk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGluamVjdFRvVXRpbHMoKSB7XG4gICAgc2hhcmVkX3V0aWxzXzEuYmFja2VuZEluamVjdGlvbnMuZ2V0Q3VzdG9tSW5zdGFuY2VEZXRhaWxzID0gZGF0YV8xLmdldEN1c3RvbUluc3RhbmNlRGV0YWlscztcbiAgICBzaGFyZWRfdXRpbHNfMS5iYWNrZW5kSW5qZWN0aW9ucy5pbnN0YW5jZU1hcCA9IHRyZWVfMS5pbnN0YW5jZU1hcDtcbiAgICBzaGFyZWRfdXRpbHNfMS5iYWNrZW5kSW5qZWN0aW9ucy5pc1Z1ZUluc3RhbmNlID0gdmFsID0+IHZhbC5faXNWdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../app-backend-vue2/lib/index.js\n");

/***/ }),

/***/ "../app-backend-vue2/lib/plugin.js":
/*!*****************************************!*\
  !*** ../app-backend-vue2/lib/plugin.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setupPlugin = void 0;\nvar devtools_api_1 = __webpack_require__(/*! @vue/devtools-api */ \"../api/lib/esm/index.js\");\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar actionId = 0;\nfunction setupPlugin(api, app) {\n    var ROUTER_INSPECTOR_ID = 'vue2-router-inspector';\n    var ROUTER_CHANGES_LAYER_ID = 'vue2-router-changes';\n    var VUEX_INSPECTOR_ID = 'vue2-vuex-inspector';\n    var VUEX_MUTATIONS_ID = 'vue2-vuex-mutations';\n    var VUEX_ACTIONS_ID = 'vue2-vuex-actions';\n    devtools_api_1.setupDevtoolsPlugin({\n        app: app,\n        id: 'org.vuejs.vue2-internal',\n        label: 'Vue 2',\n        homepage: 'https://vuejs.org/',\n        logo: 'https://vuejs.org/images/icons/favicon-96x96.png'\n    }, function (api) {\n        // Vue Router\n        if (app.$router) {\n            var router = app.$router;\n            // Inspector\n            api.addInspector({\n                id: ROUTER_INSPECTOR_ID,\n                label: 'Routes',\n                icon: 'book',\n                treeFilterPlaceholder: 'Search routes'\n            });\n            api.on.getInspectorTree(function (payload) {\n                if (payload.app === app && payload.inspectorId === ROUTER_INSPECTOR_ID) {\n                    payload.rootNodes = router.options.routes.map(function (route) { return formatRouteNode(router, route, '', payload.filter); }).filter(Boolean);\n                }\n            });\n            api.on.getInspectorState(function (payload) {\n                if (payload.app === app && payload.inspectorId === ROUTER_INSPECTOR_ID) {\n                    var route = router.matcher.getRoutes().find(function (r) { return getPathId(r) === payload.nodeId; });\n                    if (route) {\n                        payload.state = {\n                            options: formatRouteData(route)\n                        };\n                    }\n                }\n            });\n            // Timeline\n            api.addTimelineLayer({\n                id: ROUTER_CHANGES_LAYER_ID,\n                label: 'Router Navigations',\n                color: 0x40a8c4\n            });\n            router.afterEach(function (to, from) {\n                api.addTimelineEvent({\n                    layerId: ROUTER_CHANGES_LAYER_ID,\n                    event: {\n                        time: Date.now(),\n                        title: to.path,\n                        data: {\n                            from: from,\n                            to: to\n                        }\n                    }\n                });\n                api.sendInspectorTree(ROUTER_INSPECTOR_ID);\n            });\n        }\n        // Vuex\n        if (app.$store) {\n            var store = app.$store;\n            api.addInspector({\n                id: VUEX_INSPECTOR_ID,\n                label: 'Vuex',\n                icon: 'storage',\n                treeFilterPlaceholder: 'Filter stores...'\n            });\n            api.on.getInspectorTree(function (payload) {\n                if (payload.app === app && payload.inspectorId === VUEX_INSPECTOR_ID) {\n                    if (payload.filter) {\n                        var nodes = [];\n                        flattenStoreForInspectorTree(nodes, store._modules.root, payload.filter, '');\n                        payload.rootNodes = nodes;\n                    }\n                    else {\n                        payload.rootNodes = [\n                            formatStoreForInspectorTree(store._modules.root, '')\n                        ];\n                    }\n                }\n            });\n            api.on.getInspectorState(function (payload) {\n                if (payload.app === app && payload.inspectorId === VUEX_INSPECTOR_ID) {\n                    var modulePath = payload.nodeId;\n                    var module = getStoreModule(store._modules, modulePath);\n                    // Access the getters prop to init getters cache (which is lazy)\n                    // eslint-disable-next-line no-unused-expressions\n                    module.context.getters;\n                    payload.state = formatStoreForInspectorState(module, store._makeLocalGettersCache, modulePath);\n                }\n            });\n            api.addTimelineLayer({\n                id: VUEX_MUTATIONS_ID,\n                label: 'Vuex Mutations',\n                color: LIME_500\n            });\n            api.addTimelineLayer({\n                id: VUEX_ACTIONS_ID,\n                label: 'Vuex Actions',\n                color: LIME_500\n            });\n            store.subscribe(function (mutation, state) {\n                api.sendInspectorState(VUEX_INSPECTOR_ID);\n                var data = {};\n                if (mutation.payload) {\n                    data.payload = mutation.payload;\n                }\n                data.state = state;\n                api.addTimelineEvent({\n                    layerId: VUEX_MUTATIONS_ID,\n                    event: {\n                        time: Date.now(),\n                        title: mutation.type,\n                        data: data\n                    }\n                });\n            }, { prepend: true });\n            store.subscribeAction({\n                before: function (action, state) {\n                    var data = {};\n                    if (action.payload) {\n                        data.payload = action.payload;\n                    }\n                    action._id = actionId++;\n                    action._time = Date.now();\n                    data.state = state;\n                    api.addTimelineEvent({\n                        layerId: VUEX_ACTIONS_ID,\n                        event: {\n                            time: action._time,\n                            title: action.type,\n                            groupId: action._id,\n                            subtitle: 'start',\n                            data: data\n                        }\n                    });\n                },\n                after: function (action, state) {\n                    var data = {};\n                    var duration = Date.now() - action._time;\n                    data.duration = {\n                        _custom: {\n                            type: 'duration',\n                            display: (duration + \"ms\"),\n                            tooltip: 'Action duration',\n                            value: duration\n                        }\n                    };\n                    if (action.payload) {\n                        data.payload = action.payload;\n                    }\n                    data.state = state;\n                    api.addTimelineEvent({\n                        layerId: VUEX_ACTIONS_ID,\n                        event: {\n                            time: Date.now(),\n                            title: action.type,\n                            groupId: action._id,\n                            subtitle: 'end',\n                            data: data\n                        }\n                    });\n                }\n            }, { prepend: true });\n        }\n    });\n}\nexports.setupPlugin = setupPlugin;\n/**\n * Extracted from tailwind palette\n */\nvar BLUE_600 = 0x2563eb;\nvar LIME_500 = 0x84cc16;\nvar CYAN_400 = 0x22d3ee;\nvar ORANGE_400 = 0xfb923c;\nvar WHITE = 0xffffff;\nvar DARK = 0x666666;\nfunction formatRouteNode(router, route, parentPath, filter) {\n    var _a, _b;\n    var node = {\n        id: parentPath + route.path,\n        label: route.path,\n        children: (_a = route.children) === null || _a === void 0 ? void 0 : _a.map(function (child) { return formatRouteNode(router, child, route.path, filter); }).filter(Boolean),\n        tags: []\n    };\n    if (filter && !node.id.includes(filter) && !((_b = node.children) === null || _b === void 0 ? void 0 : _b.length))\n        { return null; }\n    if (route.name != null) {\n        node.tags.push({\n            label: String(route.name),\n            textColor: 0,\n            backgroundColor: CYAN_400\n        });\n    }\n    if (route.alias != null) {\n        node.tags.push({\n            label: 'alias',\n            textColor: 0,\n            backgroundColor: ORANGE_400\n        });\n    }\n    var currentPath = router.currentRoute.matched.reduce(function (p, m) { return p + m.path; }, '');\n    if (node.id === currentPath) {\n        node.tags.push({\n            label: 'active',\n            textColor: WHITE,\n            backgroundColor: BLUE_600\n        });\n    }\n    if (route.redirect) {\n        node.tags.push({\n            label: 'redirect: ' +\n                (typeof route.redirect === 'string' ? route.redirect : 'Object'),\n            textColor: WHITE,\n            backgroundColor: DARK\n        });\n    }\n    return node;\n}\nfunction formatRouteData(route) {\n    var data = [];\n    data.push({ key: 'path', value: route.path });\n    if (route.redirect) {\n        data.push({ key: 'redirect', value: route.redirect });\n    }\n    if (route.alias) {\n        data.push({ key: 'alias', value: route.alias });\n    }\n    if (route.props) {\n        data.push({ key: 'props', value: route.props });\n    }\n    if (route.name && route.name != null) {\n        data.push({ key: 'name', value: route.name });\n    }\n    if (route.component) {\n        var component = {};\n        // if (route.component.__file) {\n        //   component.file = route.component.__file\n        // }\n        if (route.component.template) {\n            component.template = route.component.template;\n        }\n        if (route.component.props) {\n            component.props = route.component.props;\n        }\n        if (!shared_utils_1.isEmptyObject(component)) {\n            data.push({ key: 'component', value: component });\n        }\n    }\n    return data;\n}\nfunction getPathId(routeMatcher) {\n    var path = routeMatcher.path;\n    if (routeMatcher.parent) {\n        path = getPathId(routeMatcher.parent) + path;\n    }\n    return path;\n}\nvar TAG_NAMESPACED = {\n    label: 'namespaced',\n    textColor: WHITE,\n    backgroundColor: DARK\n};\nfunction formatStoreForInspectorTree(module, path) {\n    return {\n        id: path || 'root',\n        // all modules end with a `/`, we want the last segment only\n        // cart/ -> cart\n        // nested/cart/ -> cart\n        label: extractNameFromPath(path),\n        tags: module.namespaced ? [TAG_NAMESPACED] : [],\n        children: Object.keys(module._children).map(function (moduleName) { return formatStoreForInspectorTree(module._children[moduleName], path + moduleName + '/'); })\n    };\n}\nfunction flattenStoreForInspectorTree(result, module, filter, path) {\n    if (path.includes(filter)) {\n        result.push({\n            id: path || 'root',\n            label: path.endsWith('/') ? path.slice(0, path.length - 1) : path || 'Root',\n            tags: module.namespaced ? [TAG_NAMESPACED] : []\n        });\n    }\n    Object.keys(module._children).forEach(function (moduleName) {\n        flattenStoreForInspectorTree(result, module._children[moduleName], filter, path + moduleName + '/');\n    });\n}\nfunction extractNameFromPath(path) {\n    return path && path !== 'root' ? path.split('/').slice(-2, -1)[0] : 'Root';\n}\nfunction formatStoreForInspectorState(module, getters, path) {\n    getters = !module.namespaced || path === 'root' ? module.context.getters : getters[path];\n    var gettersKeys = Object.keys(getters);\n    var storeState = {\n        state: Object.keys(module.state).map(function (key) { return ({\n            key: key,\n            editable: true,\n            value: module.state[key]\n        }); })\n    };\n    if (gettersKeys.length) {\n        var tree = transformPathsToObjectTree(getters);\n        storeState.getters = Object.keys(tree).map(function (key) { return ({\n            key: key.endsWith('/') ? extractNameFromPath(key) : key,\n            editable: false,\n            value: canThrow(function () { return tree[key]; })\n        }); });\n    }\n    return storeState;\n}\nfunction transformPathsToObjectTree(getters) {\n    var result = {};\n    Object.keys(getters).forEach(function (key) {\n        var path = key.split('/');\n        if (path.length > 1) {\n            var target = result;\n            var leafKey = path.pop();\n            for (var p of path) {\n                if (!target[p]) {\n                    target[p] = {\n                        _custom: {\n                            value: {},\n                            display: p,\n                            tooltip: 'Module',\n                            abstract: true\n                        }\n                    };\n                }\n                target = target[p]._custom.value;\n            }\n            target[leafKey] = canThrow(function () { return getters[key]; });\n        }\n        else {\n            result[key] = canThrow(function () { return getters[key]; });\n        }\n    });\n    return result;\n}\nfunction getStoreModule(moduleMap, path) {\n    var names = path.split('/').filter(function (n) { return n; });\n    return names.reduce(function (module, moduleName, i) {\n        var child = module[moduleName];\n        if (!child) {\n            throw new Error((\"Missing module \\\"\" + moduleName + \"\\\" for path \\\"\" + path + \"\\\".\"));\n        }\n        return i === names.length - 1 ? child : child._children;\n    }, path === 'root' ? moduleMap : moduleMap.root._children);\n}\nfunction canThrow(cb) {\n    try {\n        return cb();\n    }\n    catch (e) {\n        return e;\n    }\n}\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue2/lib/plugin.js\n");

/***/ }),

/***/ "../app-backend-vue3/lib/components/data.js":
/*!**************************************************!*\
  !*** ../app-backend-vue3/lib/components/data.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCustomInstanceDetails = exports.editState = exports.getInstanceDetails = void 0;\nvar util_1 = __webpack_require__(/*! ./util */ \"../app-backend-vue3/lib/components/util.js\");\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar shared_data_1 = __importDefault(__webpack_require__(/*! @vue-devtools/shared-utils/lib/shared-data */ \"../shared-utils/lib/shared-data.js\"));\nvar util_2 = __webpack_require__(/*! ../util */ \"../app-backend-vue3/lib/util.js\");\n/**\n * Get the detailed information of an inspected instance.\n */\nfunction getInstanceDetails(instance, ctx) {\n    var _a;\n    return {\n        id: util_1.getUniqueComponentId(instance, ctx),\n        name: util_1.getInstanceName(instance),\n        file: (_a = instance.type) === null || _a === void 0 ? void 0 : _a.__file,\n        state: getInstanceState(instance)\n    };\n}\nexports.getInstanceDetails = getInstanceDetails;\nfunction getInstanceState(instance) {\n    var mergedType = resolveMergedOptions(instance);\n    return processProps(instance).concat(processState(instance), processSetupState(instance), processComputed(instance, mergedType), processAttrs(instance), processProvide(instance), processInject(instance, mergedType), processRefs(instance));\n}\n/**\n * Process the props of an instance.\n * Make sure return a plain object because window.postMessage()\n * will throw an Error if the passed object contains Functions.\n *\n * @param {Vue} instance\n * @return {Array}\n */\nfunction processProps(instance) {\n    var propsData = [];\n    var propDefinitions = instance.type.props;\n    var loop = function ( key ) {\n        var propDefinition = propDefinitions ? propDefinitions[key] : null;\n        key = shared_utils_1.camelize(key);\n        propsData.push({\n            type: 'props',\n            key: key,\n            value: util_2.returnError(function () { return instance.props[key]; }),\n            meta: propDefinition\n                ? Object.assign({}, {type: propDefinition.type ? getPropType(propDefinition.type) : 'any',\n                    required: !!propDefinition.required},\n                    propDefinition.default != null\n                        ? {\n                            default: propDefinition.default.toString()\n                        }\n                        : {})\n                : {\n                    type: 'invalid'\n                },\n            editable: shared_data_1.default.editableProps\n        });\n    };\n\n    for (var key in instance.props) loop( key );\n    return propsData;\n}\nvar fnTypeRE = /^(?:function|class) (\\w+)/;\n/**\n * Convert prop type constructor to string.\n */\nfunction getPropType(type) {\n    if (Array.isArray(type)) {\n        return type.map(function (t) { return getPropType(t); }).join(' or ');\n    }\n    var match = type.toString().match(fnTypeRE);\n    return typeof type === 'function'\n        ? (match && match[1]) || 'any'\n        : 'any';\n}\n/**\n * Process state, filtering out props and \"clean\" the result\n * with a JSON dance. This removes functions which can cause\n * errors during structured clone used by window.postMessage.\n *\n * @param {Vue} instance\n * @return {Array}\n */\nfunction processState(instance) {\n    var type = instance.type;\n    var props = type.props;\n    var getters = type.vuex &&\n        type.vuex.getters;\n    var computedDefs = type.computed;\n    var data = Object.assign({}, instance.data,\n        instance.renderContext);\n    return Object.keys(data)\n        .filter(function (key) { return (!(props && key in props) &&\n        !(getters && key in getters) &&\n        !(computedDefs && key in computedDefs)); })\n        .map(function (key) { return ({\n        key: key,\n        type: 'data',\n        value: util_2.returnError(function () { return data[key]; }),\n        editable: true\n    }); });\n}\nfunction processSetupState(instance) {\n    var raw = instance.devtoolsRawSetupState || {};\n    return Object.keys(instance.setupState)\n        .map(function (key) {\n        var value = util_2.returnError(function () { return instance.setupState[key]; });\n        var rawData = raw[key];\n        var result;\n        if (rawData) {\n            var info = getSetupStateInfo(rawData);\n            var objectType = info.computed ? 'Computed' : info.ref ? 'Ref' : info.reactive ? 'Reactive' : null;\n            var isState = info.ref || info.computed || info.reactive;\n            var isOther = typeof value === 'function' || typeof (value === null || value === void 0 ? void 0 : value.render) === 'function';\n            result = Object.assign({}, objectType ? { objectType: objectType } : {},\n                raw.effect ? { raw: raw.effect.raw.toString() } : {},\n                {editable: isState && !info.readonly,\n                type: isOther ? 'setup (other)' : 'setup'});\n        }\n        else {\n            result = {\n                type: 'setup'\n            };\n        }\n        return Object.assign({}, {key: key,\n            value: value},\n            result);\n    });\n}\nfunction isRef(raw) {\n    return !!raw.__v_isRef;\n}\nfunction isComputed(raw) {\n    return isRef(raw) && !!raw.effect;\n}\nfunction isReactive(raw) {\n    return !!raw.__v_isReactive;\n}\nfunction isReadOnly(raw) {\n    return !!raw.__v_isReadonly;\n}\nfunction getSetupStateInfo(raw) {\n    return {\n        ref: isRef(raw),\n        computed: isComputed(raw),\n        reactive: isReactive(raw),\n        readonly: isReadOnly(raw)\n    };\n}\n/**\n * Process the computed properties of an instance.\n *\n * @param {Vue} instance\n * @return {Array}\n */\nfunction processComputed(instance, mergedType) {\n    var type = mergedType;\n    var computed = [];\n    var defs = type.computed || {};\n    // use for...in here because if 'computed' is not defined\n    // on component, computed properties will be placed in prototype\n    // and Object.keys does not include\n    // properties from object's prototype\n    var loop = function ( key ) {\n        var def = defs[key];\n        var type$1 = typeof def === 'function' && def.vuex\n            ? 'vuex bindings'\n            : 'computed';\n        computed.push({\n            type: type$1,\n            key: key,\n            value: util_2.returnError(function () { return instance.proxy[key]; }),\n            editable: typeof def.set === 'function'\n        });\n    };\n\n    for (var key in defs) loop( key );\n    return computed;\n}\nfunction processAttrs(instance) {\n    return Object.keys(instance.attrs)\n        .map(function (key) { return ({\n        type: 'attrs',\n        key: key,\n        value: util_2.returnError(function () { return instance.attrs[key]; })\n    }); });\n}\nfunction processProvide(instance) {\n    return Object.keys(instance.provides)\n        .map(function (key) { return ({\n        type: 'provided',\n        key: key,\n        value: util_2.returnError(function () { return instance.provides[key]; })\n    }); });\n}\nfunction processInject(instance, mergedType) {\n    if (!(mergedType === null || mergedType === void 0 ? void 0 : mergedType.inject))\n        { return []; }\n    var keys = [];\n    if (Array.isArray(mergedType.inject)) {\n        keys = mergedType.inject.map(function (key) { return ({\n            key: key,\n            originalKey: key\n        }); });\n    }\n    else {\n        keys = Object.keys(mergedType.inject).map(function (key) {\n            var value = mergedType.inject[key];\n            var originalKey;\n            if (typeof value === 'string') {\n                originalKey = value;\n            }\n            else {\n                originalKey = value.from;\n            }\n            return {\n                key: key,\n                originalKey: originalKey\n            };\n        });\n    }\n    return keys.map(function (ref) {\n        var key = ref.key;\n        var originalKey = ref.originalKey;\n\n        return ({\n        type: 'injected',\n        key: originalKey && key !== originalKey ? (originalKey + \" ➞ \" + key) : key,\n        value: util_2.returnError(function () { return instance.ctx[key]; })\n    });\n    });\n}\nfunction processRefs(instance) {\n    return Object.keys(instance.refs)\n        .map(function (key) { return ({\n        type: 'refs',\n        key: key,\n        value: util_2.returnError(function () { return instance.refs[key]; })\n    }); });\n}\nfunction editState(ref, ctx) {\n    var componentInstance = ref.componentInstance;\n    var path = ref.path;\n    var state = ref.state;\n    var type = ref.type;\n\n    if (!['data', 'props', 'computed', 'setup'].includes(type))\n        { return; }\n    var target;\n    var targetPath = path.slice();\n    if (Object.keys(componentInstance.props).includes(path[0])) {\n        // Props\n        target = componentInstance.props;\n    }\n    else if (componentInstance.devtoolsRawSetupState && Object.keys(componentInstance.devtoolsRawSetupState).includes(path[0])) {\n        // Setup\n        target = componentInstance.devtoolsRawSetupState;\n        var currentValue = shared_utils_1.get(componentInstance.devtoolsRawSetupState, path);\n        if (currentValue != null) {\n            var info = getSetupStateInfo(currentValue);\n            if (info.readonly)\n                { return; }\n            if (info.ref) {\n                targetPath.splice(1, 0, 'value');\n            }\n        }\n    }\n    else {\n        target = componentInstance.proxy;\n    }\n    if (target && targetPath) {\n        shared_utils_1.set(target, targetPath, 'value' in state ? state.value : undefined, function (obj, field, value) {\n            if (state.remove || state.newKey) {\n                if (Array.isArray(obj)) {\n                    obj.splice(field, 1);\n                }\n                else {\n                    delete obj[field];\n                }\n            }\n            if (!state.remove) {\n                obj[state.newKey || field] = value;\n            }\n        });\n    }\n}\nexports.editState = editState;\nfunction reduceStateList(list) {\n    if (!list.length) {\n        return undefined;\n    }\n    return list.reduce(function (map, item) {\n        var key = item.type || 'data';\n        var obj = map[key] = map[key] || {};\n        obj[item.key] = item.value;\n        return map;\n    }, {});\n}\nfunction getCustomInstanceDetails(instance) {\n    if (instance._)\n        { instance = instance._; }\n    var state = getInstanceState(instance);\n    return {\n        _custom: {\n            type: 'component',\n            id: instance.__VUE_DEVTOOLS_UID__,\n            display: util_1.getInstanceName(instance),\n            tooltip: 'Component instance',\n            value: reduceStateList(state),\n            fields: {\n                abstract: true\n            }\n        }\n    };\n}\nexports.getCustomInstanceDetails = getCustomInstanceDetails;\nfunction resolveMergedOptions(instance) {\n    var raw = instance.type;\n    var mixins = raw.mixins;\n    var extendsOptions = raw.extends;\n    var globalMixins = instance.appContext.mixins;\n    if (!globalMixins.length && !mixins && !extendsOptions)\n        { return raw; }\n    var options = {};\n    globalMixins.forEach(function (m) { return mergeOptions(options, m, instance); });\n    mergeOptions(options, raw, instance);\n    return options;\n}\nfunction mergeOptions(to, from, instance) {\n    if (!from)\n        { return to; }\n    if (typeof from === 'function') {\n        from = from.options;\n    }\n    var mixins = from.mixins;\n    var extendsOptions = from.extends;\n    extendsOptions && mergeOptions(to, extendsOptions, instance);\n    mixins &&\n        mixins.forEach(function (m) { return mergeOptions(to, m, instance); });\n    for (var key of ['computed', 'inject']) {\n        if (Object.prototype.hasOwnProperty.call(from, key)) {\n            if (!to[key]) {\n                to[key] = from[key];\n            }\n            else {\n                Object.assign(to[key], from[key]);\n            }\n        }\n    }\n    return to;\n}\n//# sourceMappingURL=data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue3/lib/components/data.js\n");

/***/ }),

/***/ "../app-backend-vue3/lib/components/el.js":
/*!************************************************!*\
  !*** ../app-backend-vue3/lib/components/el.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getInstanceOrVnodeRect = exports.getRootElementsFromComponentInstance = exports.getComponentInstanceFromElement = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"../app-backend-vue3/lib/components/util.js\");\nfunction getComponentInstanceFromElement(element) {\n    return element.__vueParentComponent;\n}\nexports.getComponentInstanceFromElement = getComponentInstanceFromElement;\nfunction getRootElementsFromComponentInstance(instance) {\n    if (util_1.isFragment(instance)) {\n        return getFragmentRootElements(instance.subTree);\n    }\n    return [instance.subTree.el];\n}\nexports.getRootElementsFromComponentInstance = getRootElementsFromComponentInstance;\nfunction getFragmentRootElements(vnode) {\n    if (!vnode.children)\n        { return []; }\n    var list = [];\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n        var childVnode = vnode.children[i];\n        if (childVnode.component) {\n            list.push.apply(list, getRootElementsFromComponentInstance(childVnode.component));\n        }\n        else if (childVnode.el) {\n            list.push(childVnode.el);\n        }\n    }\n    return list;\n}\n/**\n * Get the client rect for an instance.\n *\n * @param {Vue|Vnode} instance\n * @return {Object}\n */\nfunction getInstanceOrVnodeRect(instance) {\n    var el = instance.subTree.el;\n    if (!shared_utils_1.isBrowser) {\n        // @TODO: Find position from instance or a vnode (for functional components).\n        return;\n    }\n    if (!shared_utils_1.inDoc(el)) {\n        return;\n    }\n    if (util_1.isFragment(instance)) {\n        return addIframePosition(getFragmentRect(instance.subTree), getElWindow(el));\n    }\n    else if (el.nodeType === 1) {\n        return addIframePosition(el.getBoundingClientRect(), getElWindow(el));\n    }\n}\nexports.getInstanceOrVnodeRect = getInstanceOrVnodeRect;\nfunction createRect() {\n    var rect = {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        get width() { return rect.right - rect.left; },\n        get height() { return rect.bottom - rect.top; }\n    };\n    return rect;\n}\nfunction mergeRects(a, b) {\n    if (!a.top || b.top < a.top) {\n        a.top = b.top;\n    }\n    if (!a.bottom || b.bottom > a.bottom) {\n        a.bottom = b.bottom;\n    }\n    if (!a.left || b.left < a.left) {\n        a.left = b.left;\n    }\n    if (!a.right || b.right > a.right) {\n        a.right = b.right;\n    }\n    return a;\n}\nvar range;\n/**\n * Get the bounding rect for a text node using a Range.\n *\n * @param {Text} node\n * @return {Rect}\n */\nfunction getTextRect(node) {\n    if (!shared_utils_1.isBrowser)\n        { return; }\n    if (!range)\n        { range = document.createRange(); }\n    range.selectNode(node);\n    return range.getBoundingClientRect();\n}\nfunction getFragmentRect(vnode) {\n    var rect = createRect();\n    if (!vnode.children)\n        { return rect; }\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n        var childVnode = vnode.children[i];\n        var childRect = (void 0);\n        if (childVnode.component) {\n            childRect = getInstanceOrVnodeRect(childVnode.component);\n        }\n        else if (childVnode.el) {\n            var el = childVnode.el;\n            if (el.nodeType === 1 || el.getBoundingClientRect) {\n                childRect = el.getBoundingClientRect();\n            }\n            else if (el.nodeType === 3 && el.data.trim()) {\n                childRect = getTextRect(el);\n            }\n        }\n        if (childRect) {\n            mergeRects(rect, childRect);\n        }\n    }\n    return rect;\n}\nfunction getElWindow(el) {\n    return el.ownerDocument.defaultView;\n}\nfunction addIframePosition(bounds, win) {\n    if (win.__VUE_DEVTOOLS_IFRAME__) {\n        var rect = mergeRects(createRect(), bounds);\n        var iframeBounds = win.__VUE_DEVTOOLS_IFRAME__.getBoundingClientRect();\n        rect.top += iframeBounds.top;\n        rect.bottom += iframeBounds.top;\n        rect.left += iframeBounds.left;\n        rect.right += iframeBounds.left;\n        if (win.parent) {\n            return addIframePosition(rect, win.parent);\n        }\n        return rect;\n    }\n    return bounds;\n}\n//# sourceMappingURL=el.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue3/lib/components/el.js\n");

/***/ }),

/***/ "../app-backend-vue3/lib/components/filter.js":
/*!****************************************************!*\
  !*** ../app-backend-vue3/lib/components/filter.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ComponentFilter = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"../app-backend-vue3/lib/components/util.js\");\nvar ComponentFilter = function ComponentFilter(filter) {\n    this.filter = filter || '';\n};\n/**\n * Check if an instance is qualified.\n *\n * @param {Vue|Vnode} instance\n * @return {Boolean}\n */\nComponentFilter.prototype.isQualified = function isQualified (instance) {\n    var name = shared_utils_1.classify(util_1.getInstanceName(instance)).toLowerCase();\n    return name.indexOf(this.filter) > -1;\n};\nexports.ComponentFilter = ComponentFilter;\n//# sourceMappingURL=filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTMvbGliL2NvbXBvbmVudHMvZmlsdGVyLmpzPzJjMGUiXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsdUJBQXVCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDakNBLEdBQUssQ0FBQyxjQUFjLEdBQUcsbUJBQU8sQ0FBQyxnRUFBNEIsQ0FBQyxDQUFDO0FBQzdEQSxHQUFLLENBQUMsTUFBTSxHQUFHLG1CQUFPLENBQUMsMERBQVEsQ0FBQyxDQUFDO0FBQ2pDLElBQU0sZUFBZSxHQUNqQix3QkFBVyxDQUFDLE1BQU0sRUFBRTtBQUN4QixJQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztBQUMvQixFQUFDO0FBQ0Q7QUFDSixDQUFLO0FBQ0wsQ0FBSztBQUNMLENBQUs7QUFDTCxDQUFLO0FBQ0wsQ0FBSzswQkFDRCxtQ0FBVyxDQUFDLFFBQVEsRUFBRTtBQUMxQixJQUFRQSxHQUFLLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzdGLElBQVEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxQyxFQUNIO0FBQ0QsdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQzFDIiwiZmlsZSI6Ii4uL2FwcC1iYWNrZW5kLXZ1ZTMvbGliL2NvbXBvbmVudHMvZmlsdGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBvbmVudEZpbHRlciA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNsYXNzIENvbXBvbmVudEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZmlsdGVyKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyIHx8ICcnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhbiBpbnN0YW5jZSBpcyBxdWFsaWZpZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Z1ZXxWbm9kZX0gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzUXVhbGlmaWVkKGluc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBzaGFyZWRfdXRpbHNfMS5jbGFzc2lmeSh1dGlsXzEuZ2V0SW5zdGFuY2VOYW1lKGluc3RhbmNlKSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIG5hbWUuaW5kZXhPZih0aGlzLmZpbHRlcikgPiAtMTtcbiAgICB9XG59XG5leHBvcnRzLkNvbXBvbmVudEZpbHRlciA9IENvbXBvbmVudEZpbHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../app-backend-vue3/lib/components/filter.js\n");

/***/ }),

/***/ "../app-backend-vue3/lib/components/tree.js":
/*!**************************************************!*\
  !*** ../app-backend-vue3/lib/components/tree.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ComponentWalker = void 0;\nvar util_1 = __webpack_require__(/*! ./util */ \"../app-backend-vue3/lib/components/util.js\");\nvar filter_1 = __webpack_require__(/*! ./filter */ \"../app-backend-vue3/lib/components/filter.js\");\nvar el_1 = __webpack_require__(/*! ./el */ \"../app-backend-vue3/lib/components/el.js\");\nvar ComponentWalker = function ComponentWalker(maxDepth, filter, ctx) {\n    this.ctx = ctx;\n    this.maxDepth = maxDepth;\n    this.componentFilter = new filter_1.ComponentFilter(filter);\n};\nComponentWalker.prototype.getComponentTree = function getComponentTree (instance) {\n    this.captureIds = new Map();\n    return this.findQualifiedChildren(instance, 0);\n};\nComponentWalker.prototype.getComponentParents = function getComponentParents (instance) {\n    this.captureIds = new Map();\n    var parents = [];\n    this.captureId(instance);\n    var parent = instance;\n    while ((parent = parent.parent)) {\n        this.captureId(parent);\n        parents.push(parent);\n    }\n    return parents;\n};\n/**\n * Find qualified children from a single instance.\n * If the instance itself is qualified, just return itself.\n * This is ok because [].concat works in both cases.\n *\n * @param {Vue|Vnode} instance\n * @return {Vue|Array}\n */\nComponentWalker.prototype.findQualifiedChildren = async function findQualifiedChildren (instance, depth) {\n    var _a;\n    if (this.componentFilter.isQualified(instance) && !((_a = instance.type.devtools) === null || _a === void 0 ? void 0 : _a.hide)) {\n        return [await this.capture(instance, null, depth)];\n    }\n    else if (instance.subTree) {\n        // TODO functional components\n        return this.findQualifiedChildrenFromList(this.getInternalInstanceChildren(instance.subTree), depth);\n    }\n    else {\n        return [];\n    }\n};\n/**\n * Iterate through an array of instances and flatten it into\n * an array of qualified instances. This is a depth-first\n * traversal - e.g. if an instance is not matched, we will\n * recursively go deeper until a qualified child is found.\n *\n * @param {Array} instances\n * @return {Array}\n */\nComponentWalker.prototype.findQualifiedChildrenFromList = async function findQualifiedChildrenFromList (instances, depth) {\n        var this$1 = this;\n\n    instances = instances\n        .filter(function (child) { var _a; return !util_1.isBeingDestroyed(child) && !((_a = child.type.devtools) === null || _a === void 0 ? void 0 : _a.hide); });\n    if (!this.componentFilter.filter) {\n        return Promise.all(instances.map(function (child, index, list) { return this$1.capture(child, list, depth); }));\n    }\n    else {\n        return Array.prototype.concat.apply([], await Promise.all(instances.map(function (i) { return this$1.findQualifiedChildren(i, depth); })));\n    }\n};\n/**\n * Get children from a component instance.\n */\nComponentWalker.prototype.getInternalInstanceChildren = function getInternalInstanceChildren (subTree) {\n        var this$1 = this;\n\n    var list = [];\n    if (subTree.component) {\n        list.push(subTree.component);\n    }\n    if (subTree.suspense) {\n        list.push.apply(list, this.getInternalInstanceChildren(subTree.suspense.activeBranch));\n    }\n    if (Array.isArray(subTree.children)) {\n        subTree.children.forEach(function (childSubTree) {\n            if (childSubTree.component) {\n                list.push(childSubTree.component);\n            }\n            else {\n                list.push.apply(list, this$1.getInternalInstanceChildren(childSubTree));\n            }\n        });\n    }\n    return list.filter(function (child) { var _a; return !util_1.isBeingDestroyed(child) && !((_a = child.type.devtools) === null || _a === void 0 ? void 0 : _a.hide); });\n};\nComponentWalker.prototype.captureId = function captureId (instance) {\n    // instance.uid is not reliable in devtools as there\n    // may be 2 roots with same uid which causes unexpected\n    // behaviour\n    var id = instance.__VUE_DEVTOOLS_UID__ != null ? instance.__VUE_DEVTOOLS_UID__ : util_1.getUniqueComponentId(instance, this.ctx);\n    instance.__VUE_DEVTOOLS_UID__ = id;\n    // Dedupe\n    if (this.captureIds.has(id)) {\n        return;\n    }\n    else {\n        this.captureIds.set(id, undefined);\n    }\n    this.mark(instance);\n    return id;\n};\n/**\n * Capture the meta information of an instance. (recursive)\n *\n * @param {Vue} instance\n * @return {Object}\n */\nComponentWalker.prototype.capture = async function capture (instance, list, depth) {\n        var this$1 = this;\n\n    var id = this.captureId(instance);\n    var name = util_1.getInstanceName(instance);\n    var children = this.getInternalInstanceChildren(instance.subTree)\n        .filter(function (child) { return !util_1.isBeingDestroyed(child); });\n    var treeNode = {\n        uid: instance.uid,\n        id: id,\n        name: name,\n        renderKey: util_1.getRenderKey(instance.vnode ? instance.vnode.key : null),\n        inactive: !!instance.isDeactivated,\n        hasChildren: !!children.length,\n        children: [],\n        isFragment: util_1.isFragment(instance),\n        tags: []\n    };\n    // capture children\n    if (depth < this.maxDepth) {\n        treeNode.children = await Promise.all(children\n            .map(function (child, index, list) { return this$1.capture(child, list, depth + 1); })\n            .filter(Boolean));\n    }\n    // keep-alive\n    if (instance.type.__isKeepAlive && instance.__v_cache) {\n        var cachedComponents = Array.from(instance.__v_cache.values()).map(function (vnode) { return vnode.component; }).filter(Boolean);\n        for (var child of cachedComponents) {\n            if (!children.includes(child)) {\n                var node = await this.capture(child, null, depth + 1);\n                if (node) {\n                    node.inactive = true;\n                    treeNode.children.push(node);\n                }\n            }\n        }\n    }\n    // record screen position to ensure correct ordering\n    if ((!list || list.length > 1) && !instance._inactive) {\n        var rect = el_1.getInstanceOrVnodeRect(instance);\n        treeNode.positionTop = rect ? rect.top : Infinity;\n    }\n    if (instance.suspense) {\n        treeNode.tags.push({\n            label: 'suspense',\n            backgroundColor: 0x7d7dd7,\n            textColor: 0xffffff\n        });\n    }\n    return this.ctx.api.visitComponentTree(instance, treeNode, this.componentFilter.filter, this.ctx.currentAppRecord.options.app);\n};\n/**\n * Mark an instance as captured and store it in the instance map.\n *\n * @param {Vue} instance\n */\nComponentWalker.prototype.mark = function mark (instance) {\n    var instanceMap = this.ctx.currentAppRecord.instanceMap;\n    if (!instanceMap.has(instance.__VUE_DEVTOOLS_UID__)) {\n        instanceMap.set(instance.__VUE_DEVTOOLS_UID__, instance);\n    }\n};\nexports.ComponentWalker = ComponentWalker;\n//# sourceMappingURL=tree.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue3/lib/components/tree.js\n");

/***/ }),

/***/ "../app-backend-vue3/lib/components/util.js":
/*!**************************************************!*\
  !*** ../app-backend-vue3/lib/components/util.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getComponentInstances = exports.getRenderKey = exports.getUniqueComponentId = exports.getInstanceName = exports.isFragment = exports.getAppRecord = exports.isBeingDestroyed = void 0;\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nvar util_1 = __webpack_require__(/*! ../util */ \"../app-backend-vue3/lib/util.js\");\nfunction isBeingDestroyed(instance) {\n    return instance._isBeingDestroyed || instance.isUnmounted;\n}\nexports.isBeingDestroyed = isBeingDestroyed;\nfunction getAppRecord(instance) {\n    if (instance.root) {\n        return instance.appContext.app.__VUE_DEVTOOLS_APP_RECORD__;\n    }\n}\nexports.getAppRecord = getAppRecord;\nfunction isFragment(instance) {\n    var appRecord = getAppRecord(instance);\n    if (appRecord) {\n        return appRecord.options.types.Fragment === instance.subTree.type;\n    }\n}\nexports.isFragment = isFragment;\n/**\n * Get the appropriate display name for an instance.\n *\n * @param {Vue} instance\n * @return {String}\n */\nfunction getInstanceName(instance) {\n    var _a, _b, _c;\n    var name = getComponentTypeName(instance.type || {});\n    if (name)\n        { return name; }\n    if (instance.root === instance)\n        { return 'Root'; }\n    for (var key in (_b = (_a = instance.parent) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.components) {\n        if (instance.parent.type.components[key] === instance.type)\n            { return saveComponentName(instance, key); }\n    }\n    for (var key$1 in (_c = instance.appContext) === null || _c === void 0 ? void 0 : _c.components) {\n        if (instance.appContext.components[key$1] === instance.type)\n            { return saveComponentName(instance, key$1); }\n    }\n    return 'Anonymous Component';\n}\nexports.getInstanceName = getInstanceName;\nfunction saveComponentName(instance, key) {\n    instance.type.__vdevtools_guessedName = key;\n    return key;\n}\nfunction getComponentTypeName(options) {\n    var name = options.name || options._componentTag || options.__vdevtools_guessedName;\n    if (name) {\n        return name;\n    }\n    var file = options.__file; // injected by vue-loader\n    if (file) {\n        return shared_utils_1.classify(util_1.basename(file, '.vue'));\n    }\n}\n/**\n * Returns a devtools unique id for instance.\n * @param {Vue} instance\n */\nfunction getUniqueComponentId(instance, ctx) {\n    var instanceId = instance === ctx.currentAppRecord.rootInstance ? 'root' : instance.uid;\n    return ((ctx.currentAppRecord.id) + \":\" + instanceId);\n}\nexports.getUniqueComponentId = getUniqueComponentId;\nfunction getRenderKey(value) {\n    if (value == null)\n        { return; }\n    var type = typeof value;\n    if (type === 'number') {\n        return value;\n    }\n    else if (type === 'string') {\n        return (\"'\" + value + \"'\");\n    }\n    else if (Array.isArray(value)) {\n        return 'Array';\n    }\n    else {\n        return 'Object';\n    }\n}\nexports.getRenderKey = getRenderKey;\nfunction getComponentInstances(app) {\n    var appRecord = app.__VUE_DEVTOOLS_APP_RECORD__;\n    var appId = appRecord.id.toString();\n    return [].concat( appRecord.instanceMap )\n        .filter(function (ref) {\n            var key = ref[0];\n\n            return key.split(':')[0] === appId;\n    })\n        .map(function (ref) {\n            var instance = ref[1];\n\n            return instance;\n    }); // eslint-disable-line comma-spacing\n}\nexports.getComponentInstances = getComponentInstances;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue3/lib/components/util.js\n");

/***/ }),

/***/ "../app-backend-vue3/lib/index.js":
/*!****************************************!*\
  !*** ../app-backend-vue3/lib/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.backend = void 0;\nvar app_backend_api_1 = __webpack_require__(/*! @vue-devtools/app-backend-api */ \"../app-backend-api/lib/index.js\");\nvar tree_1 = __webpack_require__(/*! ./components/tree */ \"../app-backend-vue3/lib/components/tree.js\");\nvar data_1 = __webpack_require__(/*! ./components/data */ \"../app-backend-vue3/lib/components/data.js\");\nvar util_1 = __webpack_require__(/*! ./components/util */ \"../app-backend-vue3/lib/components/util.js\");\nvar el_1 = __webpack_require__(/*! ./components/el */ \"../app-backend-vue3/lib/components/el.js\");\nvar shared_utils_1 = __webpack_require__(/*! @vue-devtools/shared-utils */ \"../shared-utils/lib/index.js\");\nexports.backend = {\n    frameworkVersion: 3,\n    availableFeatures: [\n        app_backend_api_1.BuiltinBackendFeature.COMPONENTS\n    ],\n    setup: function setup(api) {\n        api.on.getAppRecordName(function (payload) {\n            if (payload.app._component) {\n                payload.name = payload.app._component.name;\n            }\n        });\n        api.on.getAppRootInstance(function (payload) {\n            var _a, _b, _c, _d;\n            if (payload.app._instance) {\n                payload.root = payload.app._instance;\n            }\n            else if ((_b = (_a = payload.app._container) === null || _a === void 0 ? void 0 : _a._vnode) === null || _b === void 0 ? void 0 : _b.component) {\n                payload.root = (_d = (_c = payload.app._container) === null || _c === void 0 ? void 0 : _c._vnode) === null || _d === void 0 ? void 0 : _d.component;\n            }\n        });\n        api.on.walkComponentTree(async function (payload, ctx) {\n            var walker = new tree_1.ComponentWalker(payload.maxDepth, payload.filter, ctx);\n            payload.componentTreeData = await walker.getComponentTree(payload.componentInstance);\n        });\n        api.on.walkComponentParents(function (payload, ctx) {\n            var walker = new tree_1.ComponentWalker(0, null, ctx);\n            payload.parentInstances = walker.getComponentParents(payload.componentInstance);\n        });\n        api.on.inspectComponent(function (payload, ctx) {\n            shared_utils_1.backendInjections.getCustomInstanceDetails = data_1.getCustomInstanceDetails;\n            shared_utils_1.backendInjections.instanceMap = ctx.currentAppRecord.instanceMap;\n            shared_utils_1.backendInjections.isVueInstance = function (val) { return val._ && Object.keys(val._).includes('vnode'); };\n            payload.instanceData = data_1.getInstanceDetails(payload.componentInstance, ctx);\n        });\n        api.on.getComponentName(function (payload) {\n            payload.name = util_1.getInstanceName(payload.componentInstance);\n        });\n        api.on.getComponentBounds(function (payload) {\n            payload.bounds = el_1.getInstanceOrVnodeRect(payload.componentInstance);\n        });\n        api.on.getElementComponent(function (payload) {\n            payload.componentInstance = el_1.getComponentInstanceFromElement(payload.element);\n        });\n        api.on.getComponentInstances(function (payload) {\n            payload.componentInstances = util_1.getComponentInstances(payload.app);\n        });\n        api.on.getComponentRootElements(function (payload) {\n            payload.rootElements = el_1.getRootElementsFromComponentInstance(payload.componentInstance);\n        });\n        api.on.editComponentState(function (payload, ctx) {\n            data_1.editState(payload, ctx);\n        });\n        api.on.getComponentDevtoolsOptions(function (payload) {\n            payload.options = payload.componentInstance.type.devtools;\n        });\n        api.on.getComponentRenderCode(function (payload) {\n            payload.code = payload.componentInstance.render.toString();\n        });\n        api.on.transformCall(function (payload) {\n            if (payload.callName === shared_utils_1.HookEvents.COMPONENT_UPDATED) {\n                var component = payload.inArgs[0];\n                payload.outArgs = [\n                    component.appContext.app,\n                    component.uid,\n                    component.parent ? component.parent.uid : undefined,\n                    component\n                ];\n            }\n        });\n        // @TODO\n    }\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-vue3/lib/index.js\n");

/***/ }),

/***/ "../app-backend-vue3/lib/util.js":
/*!***************************************!*\
  !*** ../app-backend-vue3/lib/util.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.returnError = exports.basename = exports.flatten = void 0;\nvar path_1 = __importDefault(__webpack_require__(/*! path */ \"../../node_modules/path-browserify/index.js\"));\nfunction flatten(items) {\n    return items.reduce(function (acc, item) {\n        if (item instanceof Array)\n            { acc.push.apply(acc, flatten(item)); }\n        else if (item)\n            { acc.push(item); }\n        return acc;\n    }, []);\n}\nexports.flatten = flatten;\n// Use a custom basename functions instead of the shimed version\n// because it doesn't work on Windows\nfunction basename(filename, ext) {\n    return path_1.default.basename(filename.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/'), ext);\n}\nexports.basename = basename;\nfunction returnError(cb) {\n    try {\n        return cb();\n    }\n    catch (e) {\n        return e;\n    }\n}\nexports.returnError = returnError;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTMvbGliL3V0aWwuanM/MzhlNyJdLCJuYW1lcyI6WyJjb25zdCJdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxHQUFHLEVBQUU7QUFDdkUsSUFBSSxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0FBQ0YsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsbUJBQW1CLEdBQUcsZ0JBQWdCLEdBQUcsZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ2xFQSxHQUFLLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxtQkFBTyxDQUFDLHlEQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2hELFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRTtBQUN4QixJQUFJLE9BQU8sS0FBSyxDQUFDLE1BQU0sVUFBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUs7QUFDdkMsUUFBUSxJQUFJLElBQUksWUFBWSxLQUFLO0FBQ2pDLGNBQVksR0FBRyxDQUFDLFVBQUksTUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQztBQUN2QyxhQUFhLElBQUksSUFBSTtBQUNyQixjQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUM7QUFDM0IsUUFBUSxPQUFPLEdBQUcsQ0FBQztBQUNuQixLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDWCxDQUFDO0FBQ0QsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQjtBQUNBO0FBQ0EsU0FBUyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtBQUNqQyxJQUFJLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRyxDQUFDO0FBQ0QsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQzVCLFNBQVMsV0FBVyxDQUFDLEVBQUUsRUFBRTtBQUN6QixJQUFJLElBQUk7QUFDUixRQUFRLE9BQU8sRUFBRSxFQUFFLENBQUM7QUFDcEIsS0FBSztBQUNMLElBQUksT0FBTyxDQUFDLEVBQUU7QUFDZCxRQUFRLE9BQU8sQ0FBQyxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxDQUFDO0FBQ0QsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO0FBQ2xDIiwiZmlsZSI6Ii4uL2FwcC1iYWNrZW5kLXZ1ZTMvbGliL3V0aWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuRXJyb3IgPSBleHBvcnRzLmJhc2VuYW1lID0gZXhwb3J0cy5mbGF0dGVuID0gdm9pZCAwO1xuY29uc3QgcGF0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcbmZ1bmN0aW9uIGZsYXR0ZW4oaXRlbXMpIHtcbiAgICByZXR1cm4gaXRlbXMucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAgICAgIGFjYy5wdXNoKC4uLmZsYXR0ZW4oaXRlbSkpO1xuICAgICAgICBlbHNlIGlmIChpdGVtKVxuICAgICAgICAgICAgYWNjLnB1c2goaXRlbSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xufVxuZXhwb3J0cy5mbGF0dGVuID0gZmxhdHRlbjtcbi8vIFVzZSBhIGN1c3RvbSBiYXNlbmFtZSBmdW5jdGlvbnMgaW5zdGVhZCBvZiB0aGUgc2hpbWVkIHZlcnNpb25cbi8vIGJlY2F1c2UgaXQgZG9lc24ndCB3b3JrIG9uIFdpbmRvd3NcbmZ1bmN0aW9uIGJhc2VuYW1lKGZpbGVuYW1lLCBleHQpIHtcbiAgICByZXR1cm4gcGF0aF8xLmRlZmF1bHQuYmFzZW5hbWUoZmlsZW5hbWUucmVwbGFjZSgvXlthLXpBLVpdOi8sICcnKS5yZXBsYWNlKC9cXFxcL2csICcvJyksIGV4dCk7XG59XG5leHBvcnRzLmJhc2VuYW1lID0gYmFzZW5hbWU7XG5mdW5jdGlvbiByZXR1cm5FcnJvcihjYikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG59XG5leHBvcnRzLnJldHVybkVycm9yID0gcmV0dXJuRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../app-backend-vue3/lib/util.js\n");

/***/ }),

/***/ "../shared-utils/lib/backend.js":
/*!**************************************!*\
  !*** ../shared-utils/lib/backend.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCatchedGetters = exports.getCustomStoreDetails = exports.getCustomRouterDetails = exports.isVueInstance = exports.getCustomInstanceDetails = exports.getInstanceMap = exports.backendInjections = void 0;\nexports.backendInjections = {\n    instanceMap: new Map(),\n    isVueInstance: (function () { return false; }),\n    getCustomInstanceDetails: (function () { return ({}); })\n};\nfunction getInstanceMap() {\n    return exports.backendInjections.instanceMap;\n}\nexports.getInstanceMap = getInstanceMap;\nfunction getCustomInstanceDetails(instance) {\n    return exports.backendInjections.getCustomInstanceDetails(instance);\n}\nexports.getCustomInstanceDetails = getCustomInstanceDetails;\nfunction isVueInstance(value) {\n    return exports.backendInjections.isVueInstance(value);\n}\nexports.isVueInstance = isVueInstance;\n// @TODO refactor\nfunction getCustomRouterDetails(router) {\n    return {\n        _custom: {\n            type: 'router',\n            display: 'VueRouter',\n            value: {\n                options: router.options,\n                currentRoute: router.currentRoute\n            },\n            fields: {\n                abstract: true\n            }\n        }\n    };\n}\nexports.getCustomRouterDetails = getCustomRouterDetails;\n// @TODO refactor\nfunction getCustomStoreDetails(store) {\n    return {\n        _custom: {\n            type: 'store',\n            display: 'Store',\n            value: {\n                state: store.state,\n                getters: getCatchedGetters(store)\n            },\n            fields: {\n                abstract: true\n            }\n        }\n    };\n}\nexports.getCustomStoreDetails = getCustomStoreDetails;\n// @TODO refactor\nfunction getCatchedGetters(store) {\n    var getters = {};\n    var origGetters = store.getters || {};\n    var keys = Object.keys(origGetters);\n    var loop = function ( i ) {\n        var key = keys[i];\n        Object.defineProperty(getters, key, {\n            enumerable: true,\n            get: function () {\n                try {\n                    return origGetters[key];\n                }\n                catch (e) {\n                    return e;\n                }\n            }\n        });\n    };\n\n    for (var i = 0; i < keys.length; i++) loop( i );\n    return getters;\n}\nexports.getCatchedGetters = getCatchedGetters;\n//# sourceMappingURL=backend.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvYmFja2VuZC5qcz84MGVmIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0IiwiaSJdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCx5QkFBeUIsR0FBRyw2QkFBNkIsR0FBRyw4QkFBOEIsR0FBRyxxQkFBcUIsR0FBRyxnQ0FBZ0MsR0FBRyxzQkFBc0IsR0FBRyx5QkFBeUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNwTix5QkFBeUIsR0FBRztBQUM1QixJQUFJLFdBQVcsRUFBRSxJQUFJLEdBQUcsRUFBRTtBQUMxQixJQUFJLGFBQWEsRUFBRSxVQUFDLFlBQU0sUUFBSyxDQUFDO0FBQ2hDLElBQUksd0JBQXdCLEVBQUUsVUFBQyxZQUFNLENBQUMsRUFBRSxJQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBQ0YsU0FBUyxjQUFjLEdBQUc7QUFDMUIsSUFBSSxPQUFPLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7QUFDakQsQ0FBQztBQUNELHNCQUFzQixHQUFHLGNBQWMsQ0FBQztBQUN4QyxTQUFTLHdCQUF3QixDQUFDLFFBQVEsRUFBRTtBQUM1QyxJQUFJLE9BQU8sT0FBTyxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFDRCxnQ0FBZ0MsR0FBRyx3QkFBd0IsQ0FBQztBQUM1RCxTQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUU7QUFDOUIsSUFBSSxPQUFPLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUNELHFCQUFxQixHQUFHLGFBQWEsQ0FBQztBQUN0QztBQUNBLFNBQVMsc0JBQXNCLENBQUMsTUFBTSxFQUFFO0FBQ3hDLElBQUksT0FBTztBQUNYLFFBQVEsT0FBTyxFQUFFO0FBQ2pCLFlBQVksSUFBSSxFQUFFLFFBQVE7QUFDMUIsWUFBWSxPQUFPLEVBQUUsV0FBVztBQUNoQyxZQUFZLEtBQUssRUFBRTtBQUNuQixnQkFBZ0IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO0FBQ3ZDLGdCQUFnQixZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVk7QUFDakQsYUFBYTtBQUNiLFlBQVksTUFBTSxFQUFFO0FBQ3BCLGdCQUFnQixRQUFRLEVBQUUsSUFBSTtBQUM5QixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUssQ0FBQztBQUNOLENBQUM7QUFDRCw4QkFBOEIsR0FBRyxzQkFBc0IsQ0FBQztBQUN4RDtBQUNBLFNBQVMscUJBQXFCLENBQUMsS0FBSyxFQUFFO0FBQ3RDLElBQUksT0FBTztBQUNYLFFBQVEsT0FBTyxFQUFFO0FBQ2pCLFlBQVksSUFBSSxFQUFFLE9BQU87QUFDekIsWUFBWSxPQUFPLEVBQUUsT0FBTztBQUM1QixZQUFZLEtBQUssRUFBRTtBQUNuQixnQkFBZ0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO0FBQ2xDLGdCQUFnQixPQUFPLEVBQUUsaUJBQWlCLENBQUMsS0FBSyxDQUFDO0FBQ2pELGFBQWE7QUFDYixZQUFZLE1BQU0sRUFBRTtBQUNwQixnQkFBZ0IsUUFBUSxFQUFFLElBQUk7QUFDOUIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLLENBQUM7QUFDTixDQUFDO0FBQ0QsNkJBQTZCLEdBQUcscUJBQXFCLENBQUM7QUFDdEQ7QUFDQSxTQUFTLGlCQUFpQixDQUFDLEtBQUssRUFBRTtBQUNsQyxJQUFJQSxHQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUN2QixJQUFJQSxHQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzVDLElBQUlBLEdBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxQyw4QkFBMEM7QUFDMUMsUUFBUUEsR0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUIsUUFBUSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7QUFDNUMsWUFBWSxVQUFVLEVBQUUsSUFBSTtBQUM1QixZQUFZLEdBQUcsV0FBRSxHQUFNO0FBQ3ZCLGdCQUFnQixJQUFJO0FBQ3BCLG9CQUFvQixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QyxpQkFBaUI7QUFDakIsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFO0FBQzFCLG9CQUFvQixPQUFPLENBQUMsQ0FBQztBQUM3QixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVMsQ0FBQyxDQUFDO0FBQ1g7O0lBYkksS0FBS0MsR0FBRyxDQUFDQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxZQWFuQztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUNELHlCQUF5QixHQUFHLGlCQUFpQixDQUFDO0FBQzlDIiwiZmlsZSI6Ii4uL3NoYXJlZC11dGlscy9saWIvYmFja2VuZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDYXRjaGVkR2V0dGVycyA9IGV4cG9ydHMuZ2V0Q3VzdG9tU3RvcmVEZXRhaWxzID0gZXhwb3J0cy5nZXRDdXN0b21Sb3V0ZXJEZXRhaWxzID0gZXhwb3J0cy5pc1Z1ZUluc3RhbmNlID0gZXhwb3J0cy5nZXRDdXN0b21JbnN0YW5jZURldGFpbHMgPSBleHBvcnRzLmdldEluc3RhbmNlTWFwID0gZXhwb3J0cy5iYWNrZW5kSW5qZWN0aW9ucyA9IHZvaWQgMDtcbmV4cG9ydHMuYmFja2VuZEluamVjdGlvbnMgPSB7XG4gICAgaW5zdGFuY2VNYXA6IG5ldyBNYXAoKSxcbiAgICBpc1Z1ZUluc3RhbmNlOiAoKCkgPT4gZmFsc2UpLFxuICAgIGdldEN1c3RvbUluc3RhbmNlRGV0YWlsczogKCgpID0+ICh7fSkpXG59O1xuZnVuY3Rpb24gZ2V0SW5zdGFuY2VNYXAoKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuYmFja2VuZEluamVjdGlvbnMuaW5zdGFuY2VNYXA7XG59XG5leHBvcnRzLmdldEluc3RhbmNlTWFwID0gZ2V0SW5zdGFuY2VNYXA7XG5mdW5jdGlvbiBnZXRDdXN0b21JbnN0YW5jZURldGFpbHMoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5iYWNrZW5kSW5qZWN0aW9ucy5nZXRDdXN0b21JbnN0YW5jZURldGFpbHMoaW5zdGFuY2UpO1xufVxuZXhwb3J0cy5nZXRDdXN0b21JbnN0YW5jZURldGFpbHMgPSBnZXRDdXN0b21JbnN0YW5jZURldGFpbHM7XG5mdW5jdGlvbiBpc1Z1ZUluc3RhbmNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuYmFja2VuZEluamVjdGlvbnMuaXNWdWVJbnN0YW5jZSh2YWx1ZSk7XG59XG5leHBvcnRzLmlzVnVlSW5zdGFuY2UgPSBpc1Z1ZUluc3RhbmNlO1xuLy8gQFRPRE8gcmVmYWN0b3JcbmZ1bmN0aW9uIGdldEN1c3RvbVJvdXRlckRldGFpbHMocm91dGVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2N1c3RvbToge1xuICAgICAgICAgICAgdHlwZTogJ3JvdXRlcicsXG4gICAgICAgICAgICBkaXNwbGF5OiAnVnVlUm91dGVyJyxcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogcm91dGVyLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFJvdXRlOiByb3V0ZXIuY3VycmVudFJvdXRlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmdldEN1c3RvbVJvdXRlckRldGFpbHMgPSBnZXRDdXN0b21Sb3V0ZXJEZXRhaWxzO1xuLy8gQFRPRE8gcmVmYWN0b3JcbmZ1bmN0aW9uIGdldEN1c3RvbVN0b3JlRGV0YWlscyhzdG9yZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIF9jdXN0b206IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdG9yZScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnU3RvcmUnLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogc3RvcmUuc3RhdGUsXG4gICAgICAgICAgICAgICAgZ2V0dGVyczogZ2V0Q2F0Y2hlZEdldHRlcnMoc3RvcmUpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmdldEN1c3RvbVN0b3JlRGV0YWlscyA9IGdldEN1c3RvbVN0b3JlRGV0YWlscztcbi8vIEBUT0RPIHJlZmFjdG9yXG5mdW5jdGlvbiBnZXRDYXRjaGVkR2V0dGVycyhzdG9yZSkge1xuICAgIGNvbnN0IGdldHRlcnMgPSB7fTtcbiAgICBjb25zdCBvcmlnR2V0dGVycyA9IHN0b3JlLmdldHRlcnMgfHwge307XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9yaWdHZXR0ZXJzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdldHRlcnMsIGtleSwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnR2V0dGVyc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0dGVycztcbn1cbmV4cG9ydHMuZ2V0Q2F0Y2hlZEdldHRlcnMgPSBnZXRDYXRjaGVkR2V0dGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhY2tlbmQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared-utils/lib/backend.js\n");

/***/ }),

/***/ "../shared-utils/lib/bridge.js":
/*!*************************************!*\
  !*** ../shared-utils/lib/bridge.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bridge = void 0;\nvar events_1 = __webpack_require__(/*! events */ \"../../node_modules/events/events.js\");\nvar BATCH_DURATION = 100;\nvar Bridge = /*@__PURE__*/(function (superclass) {\n    function Bridge(wall) {\n        var this$1 = this;\n\n        superclass.call(this);\n        this.setMaxListeners(Infinity);\n        this.wall = wall;\n        wall.listen(function (messages) {\n            if (Array.isArray(messages)) {\n                messages.forEach(function (message) { return this$1._emit(message); });\n            }\n            else {\n                this$1._emit(messages);\n            }\n        });\n        this._batchingQueue = [];\n        this._sendingQueue = [];\n        this._receivingQueue = [];\n        this._sending = false;\n        this._time = null;\n    }\n\n    if ( superclass ) Bridge.__proto__ = superclass;\n    Bridge.prototype = Object.create( superclass && superclass.prototype );\n    Bridge.prototype.constructor = Bridge;\n    Bridge.prototype.send = function send (event, payload) {\n        var this$1 = this;\n\n        if (Array.isArray(payload)) {\n            var lastIndex = payload.length - 1;\n            payload.forEach(function (chunk, index) {\n                this$1._send({\n                    event: event,\n                    _chunk: chunk,\n                    last: index === lastIndex\n                });\n            });\n            this._flush();\n        }\n        else if (this._time === null) {\n            this._send([{ event: event, payload: payload }]);\n            this._time = Date.now();\n        }\n        else {\n            this._batchingQueue.push({\n                event: event,\n                payload: payload\n            });\n            var now = Date.now();\n            if (now - this._time > BATCH_DURATION) {\n                this._flush();\n            }\n            else {\n                this._timer = setTimeout(function () { return this$1._flush(); }, BATCH_DURATION);\n            }\n        }\n    };\n    /**\n     * Log a message to the devtools background page.\n     */\n    Bridge.prototype.log = function log (message) {\n        this.send('log', message);\n    };\n    Bridge.prototype._flush = function _flush () {\n        if (this._batchingQueue.length)\n            { this._send(this._batchingQueue); }\n        clearTimeout(this._timer);\n        this._batchingQueue = [];\n        this._time = null;\n    };\n    // @TODO types\n    Bridge.prototype._emit = function _emit (message) {\n        if (typeof message === 'string') {\n            this.emit(message);\n        }\n        else if (message._chunk) {\n            this._receivingQueue.push(message._chunk);\n            if (message.last) {\n                this.emit(message.event, this._receivingQueue);\n                this._receivingQueue = [];\n            }\n        }\n        else if (message.event) {\n            this.emit(message.event, message.payload);\n        }\n    };\n    // @TODO types\n    Bridge.prototype._send = function _send (messages) {\n        this._sendingQueue.push(messages);\n        this._nextSend();\n    };\n    Bridge.prototype._nextSend = function _nextSend () {\n        var this$1 = this;\n\n        if (!this._sendingQueue.length || this._sending)\n            { return; }\n        this._sending = true;\n        var messages = this._sendingQueue.shift();\n        try {\n            this.wall.send(messages);\n        }\n        catch (err) {\n            if (err.message === 'Message length exceeded maximum allowed length.') {\n                this._sendingQueue.splice(0, 0, messages.map(function (message) { return [message]; }));\n            }\n        }\n        this._sending = false;\n        requestAnimationFrame(function () { return this$1._nextSend(); });\n    };\n\n    return Bridge;\n}(events_1.EventEmitter));\nexports.Bridge = Bridge;\n//# sourceMappingURL=bridge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared-utils/lib/bridge.js\n");

/***/ }),

/***/ "../shared-utils/lib/consts.js":
/*!*************************************!*\
  !*** ../shared-utils/lib/consts.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HookEvents = exports.BridgeSubscriptions = exports.BridgeEvents = exports.BuiltinTabs = void 0;\nvar BuiltinTabs;\n(function (BuiltinTabs) {\n    BuiltinTabs[\"COMPONENTS\"] = \"components\";\n    BuiltinTabs[\"TIMELINE\"] = \"timeline\";\n    BuiltinTabs[\"PLUGINS\"] = \"plugins\";\n    BuiltinTabs[\"SETTINGS\"] = \"settings\";\n})(BuiltinTabs = exports.BuiltinTabs || (exports.BuiltinTabs = {}));\nvar BridgeEvents;\n(function (BridgeEvents) {\n    // Misc\n    BridgeEvents[\"TO_BACK_SUBSCRIBE\"] = \"b:subscribe\";\n    BridgeEvents[\"TO_BACK_UNSUBSCRIBE\"] = \"b:unsubscribe\";\n    /** Backend is ready */\n    BridgeEvents[\"TO_FRONT_READY\"] = \"f:ready\";\n    /** Displays the \"detected Vue\" console log */\n    BridgeEvents[\"TO_BACK_LOG_DETECTED_VUE\"] = \"b:log-detected-vue\";\n    /** Force refresh */\n    BridgeEvents[\"TO_BACK_REFRESH\"] = \"b:refresh\";\n    /** Tab was switched */\n    BridgeEvents[\"TO_BACK_TAB_SWITCH\"] = \"b:tab:switch\";\n    BridgeEvents[\"TO_BACK_LOG\"] = \"b:log\";\n    // Apps\n    /** App was registered */\n    BridgeEvents[\"TO_FRONT_APP_ADD\"] = \"f:app:add\";\n    /** Get app list */\n    BridgeEvents[\"TO_BACK_APP_LIST\"] = \"b:app:list\";\n    BridgeEvents[\"TO_FRONT_APP_LIST\"] = \"f:app:list\";\n    BridgeEvents[\"TO_FRONT_APP_REMOVE\"] = \"f:app:remove\";\n    BridgeEvents[\"TO_BACK_APP_SELECT\"] = \"b:app:select\";\n    BridgeEvents[\"TO_FRONT_APP_SELECTED\"] = \"f:app:selected\";\n    // Components\n    BridgeEvents[\"TO_BACK_COMPONENT_TREE\"] = \"b:component:tree\";\n    BridgeEvents[\"TO_FRONT_COMPONENT_TREE\"] = \"f:component:tree\";\n    BridgeEvents[\"TO_BACK_COMPONENT_SELECTED_DATA\"] = \"b:component:selected-data\";\n    BridgeEvents[\"TO_FRONT_COMPONENT_SELECTED_DATA\"] = \"f:component:selected-data\";\n    BridgeEvents[\"TO_BACK_COMPONENT_EXPAND\"] = \"b:component:expand\";\n    BridgeEvents[\"TO_FRONT_COMPONENT_EXPAND\"] = \"f:component:expand\";\n    BridgeEvents[\"TO_BACK_COMPONENT_SCROLL_TO\"] = \"b:component:scroll-to\";\n    BridgeEvents[\"TO_BACK_COMPONENT_FILTER\"] = \"b:component:filter\";\n    BridgeEvents[\"TO_BACK_COMPONENT_MOUSE_OVER\"] = \"b:component:mouse-over\";\n    BridgeEvents[\"TO_BACK_COMPONENT_MOUSE_OUT\"] = \"b:component:mouse-out\";\n    BridgeEvents[\"TO_BACK_COMPONENT_CONTEXT_MENU_TARGET\"] = \"b:component:context-menu-target\";\n    BridgeEvents[\"TO_BACK_COMPONENT_EDIT_STATE\"] = \"b:component:edit-state\";\n    BridgeEvents[\"TO_BACK_COMPONENT_PICK\"] = \"b:component:pick\";\n    BridgeEvents[\"TO_FRONT_COMPONENT_PICK\"] = \"f:component:pick\";\n    BridgeEvents[\"TO_BACK_COMPONENT_PICK_CANCELED\"] = \"b:component:pick-canceled\";\n    BridgeEvents[\"TO_FRONT_COMPONENT_PICK_CANCELED\"] = \"f:component:pick-canceled\";\n    BridgeEvents[\"TO_BACK_COMPONENT_INSPECT_DOM\"] = \"b:component:inspect-dom\";\n    BridgeEvents[\"TO_FRONT_COMPONENT_INSPECT_DOM\"] = \"f:component:inspect-dom\";\n    BridgeEvents[\"TO_BACK_COMPONENT_RENDER_CODE\"] = \"b:component:render-code\";\n    BridgeEvents[\"TO_FRONT_COMPONENT_RENDER_CODE\"] = \"f:component:render-code\";\n    // Timeline\n    BridgeEvents[\"TO_FRONT_TIMELINE_EVENT\"] = \"f:timeline:event\";\n    BridgeEvents[\"TO_BACK_TIMELINE_LAYER_LIST\"] = \"b:timeline:layer-list\";\n    BridgeEvents[\"TO_FRONT_TIMELINE_LAYER_LIST\"] = \"f:timeline:layer-list\";\n    BridgeEvents[\"TO_FRONT_TIMELINE_LAYER_ADD\"] = \"f:timeline:layer-add\";\n    BridgeEvents[\"TO_BACK_TIMELINE_SHOW_SCREENSHOT\"] = \"b:timeline:show-screenshot\";\n    BridgeEvents[\"TO_BACK_TIMELINE_CLEAR\"] = \"b:timeline:clear\";\n    BridgeEvents[\"TO_BACK_TIMELINE_EVENT_DATA\"] = \"b:timeline:event-data\";\n    BridgeEvents[\"TO_FRONT_TIMELINE_EVENT_DATA\"] = \"f:timeline:event-data\";\n    BridgeEvents[\"TO_BACK_TIMELINE_LAYER_LOAD_EVENTS\"] = \"b:timeline:layer-load-events\";\n    BridgeEvents[\"TO_FRONT_TIMELINE_LAYER_LOAD_EVENTS\"] = \"f:timeline:layer-load-events\";\n    // Plugins\n    BridgeEvents[\"TO_BACK_DEVTOOLS_PLUGIN_LIST\"] = \"b:devtools-plugin:list\";\n    BridgeEvents[\"TO_FRONT_DEVTOOLS_PLUGIN_LIST\"] = \"f:devtools-plugin:list\";\n    BridgeEvents[\"TO_FRONT_DEVTOOLS_PLUGIN_ADD\"] = \"f:devtools-plugin:add\";\n    // Custom inspectors\n    BridgeEvents[\"TO_BACK_CUSTOM_INSPECTOR_LIST\"] = \"b:custom-inspector:list\";\n    BridgeEvents[\"TO_FRONT_CUSTOM_INSPECTOR_LIST\"] = \"f:custom-inspector:list\";\n    BridgeEvents[\"TO_FRONT_CUSTOM_INSPECTOR_ADD\"] = \"f:custom-inspector:add\";\n    BridgeEvents[\"TO_BACK_CUSTOM_INSPECTOR_TREE\"] = \"b:custom-inspector:tree\";\n    BridgeEvents[\"TO_FRONT_CUSTOM_INSPECTOR_TREE\"] = \"f:custom-inspector:tree\";\n    BridgeEvents[\"TO_BACK_CUSTOM_INSPECTOR_STATE\"] = \"b:custom-inspector:state\";\n    BridgeEvents[\"TO_FRONT_CUSTOM_INSPECTOR_STATE\"] = \"f:custom-inspector:state\";\n    BridgeEvents[\"TO_BACK_CUSTOM_INSPECTOR_EDIT_STATE\"] = \"b:custom-inspector:edit-state\";\n    BridgeEvents[\"TO_BACK_CUSTOM_INSPECTOR_ACTION\"] = \"b:custom-inspector:action\";\n    BridgeEvents[\"TO_FRONT_CUSTOM_INSPECTOR_SELECT_NODE\"] = \"f:custom-inspector:select-node\";\n    // Custom state\n    BridgeEvents[\"TO_BACK_CUSTOM_STATE_ACTION\"] = \"b:custom-state:action\";\n})(BridgeEvents = exports.BridgeEvents || (exports.BridgeEvents = {}));\nvar BridgeSubscriptions;\n(function (BridgeSubscriptions) {\n    BridgeSubscriptions[\"SELECTED_COMPONENT_DATA\"] = \"component:selected-data\";\n    BridgeSubscriptions[\"COMPONENT_TREE\"] = \"component:tree\";\n})(BridgeSubscriptions = exports.BridgeSubscriptions || (exports.BridgeSubscriptions = {}));\nvar HookEvents;\n(function (HookEvents) {\n    HookEvents[\"INIT\"] = \"init\";\n    HookEvents[\"APP_INIT\"] = \"app:init\";\n    HookEvents[\"APP_ADD\"] = \"app:add\";\n    HookEvents[\"APP_UNMOUNT\"] = \"app:unmount\";\n    HookEvents[\"COMPONENT_UPDATED\"] = \"component:updated\";\n    HookEvents[\"COMPONENT_ADDED\"] = \"component:added\";\n    HookEvents[\"COMPONENT_REMOVED\"] = \"component:removed\";\n    HookEvents[\"COMPONENT_EMIT\"] = \"component:emit\";\n    HookEvents[\"COMPONENT_HIGHLIGHT\"] = \"component:highlight\";\n    HookEvents[\"COMPONENT_UNHIGHLIGHT\"] = \"component:unhighlight\";\n    HookEvents[\"SETUP_DEVTOOLS_PLUGIN\"] = \"devtools-plugin:setup\";\n    HookEvents[\"TIMELINE_LAYER_ADDED\"] = \"timeline:layer-added\";\n    HookEvents[\"TIMELINE_EVENT_ADDED\"] = \"timeline:event-added\";\n    HookEvents[\"CUSTOM_INSPECTOR_ADD\"] = \"custom-inspector:add\";\n    HookEvents[\"CUSTOM_INSPECTOR_SEND_TREE\"] = \"custom-inspector:send-tree\";\n    HookEvents[\"CUSTOM_INSPECTOR_SEND_STATE\"] = \"custom-inspector:send-state\";\n    HookEvents[\"CUSTOM_INSPECTOR_SELECT_NODE\"] = \"custom-inspector:select-node\";\n    HookEvents[\"PERFORMANCE_START\"] = \"perf:start\";\n    HookEvents[\"PERFORMANCE_END\"] = \"perf:end\";\n    /**\n     * @deprecated\n     */\n    HookEvents[\"FLUSH\"] = \"flush\";\n})(HookEvents = exports.HookEvents || (exports.HookEvents = {}));\n//# sourceMappingURL=consts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared-utils/lib/consts.js\n");

/***/ }),

/***/ "../shared-utils/lib/env.js":
/*!**********************************!*\
  !*** ../shared-utils/lib/env.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initEnv = exports.keys = exports.isLinux = exports.isMac = exports.isWindows = exports.isFirefox = exports.isChrome = exports.target = exports.isBrowser = void 0;\nexports.isBrowser = typeof navigator !== 'undefined';\nexports.target = exports.isBrowser\n    ? window\n    : typeof __webpack_require__.g !== 'undefined'\n        ? __webpack_require__.g\n        : {};\nexports.isChrome = typeof exports.target.chrome !== 'undefined' && !!exports.target.chrome.devtools;\nexports.isFirefox = exports.isBrowser && navigator.userAgent.indexOf('Firefox') > -1;\nexports.isWindows = exports.isBrowser && navigator.platform.indexOf('Win') === 0;\nexports.isMac = exports.isBrowser && navigator.platform === 'MacIntel';\nexports.isLinux = exports.isBrowser && navigator.platform.indexOf('Linux') === 0;\nexports.keys = {\n    ctrl: exports.isMac ? '&#8984;' : 'Ctrl',\n    shift: 'Shift',\n    alt: exports.isMac ? '&#8997;' : 'Alt',\n    del: 'Del',\n    enter: 'Enter',\n    esc: 'Esc'\n};\nfunction initEnv(Vue) {\n    if (Vue.prototype.hasOwnProperty('$isChrome'))\n        { return; }\n    Object.defineProperties(Vue.prototype, {\n        $isChrome: { get: function () { return exports.isChrome; } },\n        $isFirefox: { get: function () { return exports.isFirefox; } },\n        $isWindows: { get: function () { return exports.isWindows; } },\n        $isMac: { get: function () { return exports.isMac; } },\n        $isLinux: { get: function () { return exports.isLinux; } },\n        $keys: { get: function () { return exports.keys; } }\n    });\n    if (exports.isWindows)\n        { document.body.classList.add('platform-windows'); }\n    if (exports.isMac)\n        { document.body.classList.add('platform-mac'); }\n    if (exports.isLinux)\n        { document.body.classList.add('platform-linux'); }\n}\nexports.initEnv = initEnv;\n//# sourceMappingURL=env.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvZW52LmpzP2U3NDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxlQUFlLEdBQUcsWUFBWSxHQUFHLGVBQWUsR0FBRyxhQUFhLEdBQUcsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsY0FBYyxHQUFHLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzFLLGlCQUFpQixHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsQ0FBQztBQUNyRCxjQUFjLEdBQUcsT0FBTyxDQUFDLFNBQVM7QUFDbEMsTUFBTSxNQUFNO0FBQ1osTUFBTSxPQUFPLHFCQUFNLEtBQUssV0FBVztBQUNuQyxVQUFVLHFCQUFNO0FBQ2hCLFVBQVUsRUFBRSxDQUFDO0FBQ2IsZ0JBQWdCLEdBQUcsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNwRyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pGLGFBQWEsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDO0FBQ3ZFLGVBQWUsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqRixZQUFZLEdBQUc7QUFDZixJQUFJLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxHQUFHLFNBQVMsR0FBRyxNQUFNO0FBQzVDLElBQUksS0FBSyxFQUFFLE9BQU87QUFDbEIsSUFBSSxHQUFHLEVBQUUsT0FBTyxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsS0FBSztBQUMxQyxJQUFJLEdBQUcsRUFBRSxLQUFLO0FBQ2QsSUFBSSxLQUFLLEVBQUUsT0FBTztBQUNsQixJQUFJLEdBQUcsRUFBRSxLQUFLO0FBQ2QsQ0FBQyxDQUFDO0FBQ0YsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQ3RCLElBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUM7QUFDakQsVUFBUSxTQUFPO0FBQ2YsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtBQUMzQyxRQUFRLFNBQVMsRUFBRSxFQUFFLEdBQUcsV0FBRSxZQUFNLE9BQU8sQ0FBQyxXQUFRLEVBQUU7QUFDbEQsUUFBUSxVQUFVLEVBQUUsRUFBRSxHQUFHLFdBQUUsWUFBTSxPQUFPLENBQUMsWUFBUyxFQUFFO0FBQ3BELFFBQVEsVUFBVSxFQUFFLEVBQUUsR0FBRyxXQUFFLFlBQU0sT0FBTyxDQUFDLFlBQVMsRUFBRTtBQUNwRCxRQUFRLE1BQU0sRUFBRSxFQUFFLEdBQUcsV0FBRSxZQUFNLE9BQU8sQ0FBQyxRQUFLLEVBQUU7QUFDNUMsUUFBUSxRQUFRLEVBQUUsRUFBRSxHQUFHLFdBQUUsWUFBTSxPQUFPLENBQUMsVUFBTyxFQUFFO0FBQ2hELFFBQVEsS0FBSyxFQUFFLEVBQUUsR0FBRyxXQUFFLFlBQU0sT0FBTyxDQUFDLE9BQUksRUFBRTtBQUMxQyxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksSUFBSSxPQUFPLENBQUMsU0FBUztBQUN6QixVQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFDO0FBQ3hELElBQUksSUFBSSxPQUFPLENBQUMsS0FBSztBQUNyQixVQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBQztBQUNwRCxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU87QUFDdkIsVUFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBQztBQUN0RCxDQUFDO0FBQ0QsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQiIsImZpbGUiOiIuLi9zaGFyZWQtdXRpbHMvbGliL2Vudi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbml0RW52ID0gZXhwb3J0cy5rZXlzID0gZXhwb3J0cy5pc0xpbnV4ID0gZXhwb3J0cy5pc01hYyA9IGV4cG9ydHMuaXNXaW5kb3dzID0gZXhwb3J0cy5pc0ZpcmVmb3ggPSBleHBvcnRzLmlzQ2hyb21lID0gZXhwb3J0cy50YXJnZXQgPSBleHBvcnRzLmlzQnJvd3NlciA9IHZvaWQgMDtcbmV4cG9ydHMuaXNCcm93c2VyID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnRzLnRhcmdldCA9IGV4cG9ydHMuaXNCcm93c2VyXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZ2xvYmFsXG4gICAgICAgIDoge307XG5leHBvcnRzLmlzQ2hyb21lID0gdHlwZW9mIGV4cG9ydHMudGFyZ2V0LmNocm9tZSAhPT0gJ3VuZGVmaW5lZCcgJiYgISFleHBvcnRzLnRhcmdldC5jaHJvbWUuZGV2dG9vbHM7XG5leHBvcnRzLmlzRmlyZWZveCA9IGV4cG9ydHMuaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTE7XG5leHBvcnRzLmlzV2luZG93cyA9IGV4cG9ydHMuaXNCcm93c2VyICYmIG5hdmlnYXRvci5wbGF0Zm9ybS5pbmRleE9mKCdXaW4nKSA9PT0gMDtcbmV4cG9ydHMuaXNNYWMgPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5leHBvcnRzLmlzTGludXggPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IucGxhdGZvcm0uaW5kZXhPZignTGludXgnKSA9PT0gMDtcbmV4cG9ydHMua2V5cyA9IHtcbiAgICBjdHJsOiBleHBvcnRzLmlzTWFjID8gJyYjODk4NDsnIDogJ0N0cmwnLFxuICAgIHNoaWZ0OiAnU2hpZnQnLFxuICAgIGFsdDogZXhwb3J0cy5pc01hYyA/ICcmIzg5OTc7JyA6ICdBbHQnLFxuICAgIGRlbDogJ0RlbCcsXG4gICAgZW50ZXI6ICdFbnRlcicsXG4gICAgZXNjOiAnRXNjJ1xufTtcbmZ1bmN0aW9uIGluaXRFbnYoVnVlKSB7XG4gICAgaWYgKFZ1ZS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJyRpc0Nocm9tZScpKVxuICAgICAgICByZXR1cm47XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVnVlLnByb3RvdHlwZSwge1xuICAgICAgICAkaXNDaHJvbWU6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzQ2hyb21lIH0sXG4gICAgICAgICRpc0ZpcmVmb3g6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzRmlyZWZveCB9LFxuICAgICAgICAkaXNXaW5kb3dzOiB7IGdldDogKCkgPT4gZXhwb3J0cy5pc1dpbmRvd3MgfSxcbiAgICAgICAgJGlzTWFjOiB7IGdldDogKCkgPT4gZXhwb3J0cy5pc01hYyB9LFxuICAgICAgICAkaXNMaW51eDogeyBnZXQ6ICgpID0+IGV4cG9ydHMuaXNMaW51eCB9LFxuICAgICAgICAka2V5czogeyBnZXQ6ICgpID0+IGV4cG9ydHMua2V5cyB9XG4gICAgfSk7XG4gICAgaWYgKGV4cG9ydHMuaXNXaW5kb3dzKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLXdpbmRvd3MnKTtcbiAgICBpZiAoZXhwb3J0cy5pc01hYylcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdwbGF0Zm9ybS1tYWMnKTtcbiAgICBpZiAoZXhwb3J0cy5pc0xpbnV4KVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLWxpbnV4Jyk7XG59XG5leHBvcnRzLmluaXRFbnYgPSBpbml0RW52O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared-utils/lib/env.js\n");

/***/ }),

/***/ "../shared-utils/lib/index.js":
/*!************************************!*\
  !*** ../shared-utils/lib/index.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) { k2 = k; }\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) { k2 = k; }\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) { if (p !== \"default\" && !exports.hasOwnProperty(p)) { __createBinding(exports, m, p); } }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./backend */ \"../shared-utils/lib/backend.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bridge */ \"../shared-utils/lib/bridge.js\"), exports);\n__exportStar(__webpack_require__(/*! ./consts */ \"../shared-utils/lib/consts.js\"), exports);\n__exportStar(__webpack_require__(/*! ./env */ \"../shared-utils/lib/env.js\"), exports);\n__exportStar(__webpack_require__(/*! ./plugin-permissions */ \"../shared-utils/lib/plugin-permissions.js\"), exports);\n__exportStar(__webpack_require__(/*! ./shared-data */ \"../shared-utils/lib/shared-data.js\"), exports);\n__exportStar(__webpack_require__(/*! ./shell */ \"../shared-utils/lib/shell.js\"), exports);\n__exportStar(__webpack_require__(/*! ./storage */ \"../shared-utils/lib/storage.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transfer */ \"../shared-utils/lib/transfer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util */ \"../shared-utils/lib/util.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvaW5kZXguanM/ODE2OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUksZUFBZSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtBQUNoRyxJQUFJLElBQUksRUFBRSxLQUFLLFNBQVMsSUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFDO0FBQ2pDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekYsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtBQUM1QixJQUFJLElBQUksRUFBRSxLQUFLLFNBQVMsSUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFDO0FBQ2pDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0osSUFBSSxZQUFZLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRTtBQUN2RSxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFFLElBQUksQ0FBQyxLQUFLLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUUsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUM7QUFDdkcsQ0FBQyxDQUFDO0FBQ0YsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsWUFBWSxDQUFDLG1CQUFPLENBQUMsaURBQVcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLCtDQUFVLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxZQUFZLENBQUMsbUJBQU8sQ0FBQywrQ0FBVSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0MsWUFBWSxDQUFDLG1CQUFPLENBQUMseUNBQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLHVFQUFzQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkQsWUFBWSxDQUFDLG1CQUFPLENBQUMseURBQWUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELFlBQVksQ0FBQyxtQkFBTyxDQUFDLDZDQUFTLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMxQyxZQUFZLENBQUMsbUJBQU8sQ0FBQyxpREFBVyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUMsWUFBWSxDQUFDLG1CQUFPLENBQUMsbURBQVksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLDJDQUFRLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN6QyIsImZpbGUiOiIuLi9zaGFyZWQtdXRpbHMvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmFja2VuZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYnJpZGdlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudlwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcGx1Z2luLXBlcm1pc3Npb25zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zaGFyZWQtZGF0YVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2hlbGxcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0b3JhZ2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RyYW5zZmVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared-utils/lib/index.js\n");

/***/ }),

/***/ "../shared-utils/lib/plugin-permissions.js":
/*!*************************************************!*\
  !*** ../shared-utils/lib/plugin-permissions.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setPluginPermission = exports.hasPluginPermission = exports.PluginPermission = void 0;\nvar shared_data_1 = __importDefault(__webpack_require__(/*! ./shared-data */ \"../shared-utils/lib/shared-data.js\"));\nvar PluginPermission;\n(function (PluginPermission) {\n    PluginPermission[\"ENABLED\"] = \"enabled\";\n    PluginPermission[\"COMPONENTS\"] = \"components\";\n    PluginPermission[\"CUSTOM_INSPECTOR\"] = \"custom-inspector\";\n    PluginPermission[\"TIMELINE\"] = \"timeline\";\n})(PluginPermission = exports.PluginPermission || (exports.PluginPermission = {}));\nfunction hasPluginPermission(pluginId, permission) {\n    var result = shared_data_1.default.pluginPermissions[(pluginId + \":\" + permission)];\n    if (result == null)\n        { return true; }\n    return !!result;\n}\nexports.hasPluginPermission = hasPluginPermission;\nfunction setPluginPermission(pluginId, permission, active) {\n    var obj;\n\n    shared_data_1.default.pluginPermissions = Object.assign({}, shared_data_1.default.pluginPermissions,\n        ( obj = {}, obj[(pluginId + \":\" + permission)] = active, obj ));\n}\nexports.setPluginPermission = setPluginPermission;\n//# sourceMappingURL=plugin-permissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvcGx1Z2luLXBlcm1pc3Npb25zLmpzPzU2YjciXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSSxlQUFlLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsR0FBRyxFQUFFO0FBQ3ZFLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzlELENBQUMsQ0FBQztBQUNGLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELDJCQUEyQixHQUFHLDJCQUEyQixHQUFHLHdCQUF3QixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzlGQSxHQUFLLENBQUMsYUFBYSxHQUFHLGVBQWUsQ0FBQyxtQkFBTyxDQUFDLHlEQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLElBQUksZ0JBQWdCLENBQUM7QUFDckIsQ0FBQyxVQUFVLGdCQUFnQixFQUFFO0FBQzdCLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQzVDLElBQUksZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEdBQUcsWUFBWSxDQUFDO0FBQ2xELElBQUksZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztBQUM5RCxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUM5QyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25GLFNBQVMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRTtBQUNuRCxJQUFJQSxHQUFLLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUksUUFBUSxTQUFJLFdBQVksQ0FBQyxDQUFDO0FBQ3hGLElBQUksSUFBSSxNQUFNLElBQUksSUFBSTtBQUN0QixVQUFRLE9BQU8sSUFBSSxHQUFDO0FBQ3BCLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3BCLENBQUM7QUFDRCwyQkFBMkIsR0FBRyxtQkFBbUIsQ0FBQztBQUNsRCxTQUFTLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQUFDO0FBQzVELElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxrQkFDbkMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUI7QUFDbEQsdUJBQVEsRUFBSSxRQUFRLFNBQUksV0FBWSxJQUFHLGNBQ2xDLENBQUM7QUFDTixDQUFDO0FBQ0QsMkJBQTJCLEdBQUcsbUJBQW1CLENBQUM7QUFDbEQiLCJmaWxlIjoiLi4vc2hhcmVkLXV0aWxzL2xpYi9wbHVnaW4tcGVybWlzc2lvbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0UGx1Z2luUGVybWlzc2lvbiA9IGV4cG9ydHMuaGFzUGx1Z2luUGVybWlzc2lvbiA9IGV4cG9ydHMuUGx1Z2luUGVybWlzc2lvbiA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF9kYXRhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2hhcmVkLWRhdGFcIikpO1xudmFyIFBsdWdpblBlcm1pc3Npb247XG4oZnVuY3Rpb24gKFBsdWdpblBlcm1pc3Npb24pIHtcbiAgICBQbHVnaW5QZXJtaXNzaW9uW1wiRU5BQkxFRFwiXSA9IFwiZW5hYmxlZFwiO1xuICAgIFBsdWdpblBlcm1pc3Npb25bXCJDT01QT05FTlRTXCJdID0gXCJjb21wb25lbnRzXCI7XG4gICAgUGx1Z2luUGVybWlzc2lvbltcIkNVU1RPTV9JTlNQRUNUT1JcIl0gPSBcImN1c3RvbS1pbnNwZWN0b3JcIjtcbiAgICBQbHVnaW5QZXJtaXNzaW9uW1wiVElNRUxJTkVcIl0gPSBcInRpbWVsaW5lXCI7XG59KShQbHVnaW5QZXJtaXNzaW9uID0gZXhwb3J0cy5QbHVnaW5QZXJtaXNzaW9uIHx8IChleHBvcnRzLlBsdWdpblBlcm1pc3Npb24gPSB7fSkpO1xuZnVuY3Rpb24gaGFzUGx1Z2luUGVybWlzc2lvbihwbHVnaW5JZCwgcGVybWlzc2lvbikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHNoYXJlZF9kYXRhXzEuZGVmYXVsdC5wbHVnaW5QZXJtaXNzaW9uc1tgJHtwbHVnaW5JZH06JHtwZXJtaXNzaW9ufWBdO1xuICAgIGlmIChyZXN1bHQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICEhcmVzdWx0O1xufVxuZXhwb3J0cy5oYXNQbHVnaW5QZXJtaXNzaW9uID0gaGFzUGx1Z2luUGVybWlzc2lvbjtcbmZ1bmN0aW9uIHNldFBsdWdpblBlcm1pc3Npb24ocGx1Z2luSWQsIHBlcm1pc3Npb24sIGFjdGl2ZSkge1xuICAgIHNoYXJlZF9kYXRhXzEuZGVmYXVsdC5wbHVnaW5QZXJtaXNzaW9ucyA9IHtcbiAgICAgICAgLi4uc2hhcmVkX2RhdGFfMS5kZWZhdWx0LnBsdWdpblBlcm1pc3Npb25zLFxuICAgICAgICBbYCR7cGx1Z2luSWR9OiR7cGVybWlzc2lvbn1gXTogYWN0aXZlXG4gICAgfTtcbn1cbmV4cG9ydHMuc2V0UGx1Z2luUGVybWlzc2lvbiA9IHNldFBsdWdpblBlcm1pc3Npb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVnaW4tcGVybWlzc2lvbnMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared-utils/lib/plugin-permissions.js\n");

/***/ }),

/***/ "../shared-utils/lib/shared-data.js":
/*!******************************************!*\
  !*** ../shared-utils/lib/shared-data.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.watchSharedData = exports.destroySharedData = exports.onSharedDataInit = exports.initSharedData = void 0;\nvar storage_1 = __webpack_require__(/*! ./storage */ \"../shared-utils/lib/storage.js\");\nvar env_1 = __webpack_require__(/*! ./env */ \"../shared-utils/lib/env.js\");\n// Initial state\nvar internalSharedData = {\n    openInEditorHost: '/',\n    componentNameStyle: 'class',\n    theme: 'auto',\n    displayDensity: 'low',\n    timeFormat: 'default',\n    recordVuex: true,\n    cacheVuexSnapshotsEvery: 50,\n    cacheVuexSnapshotsLimit: 10,\n    snapshotLoading: false,\n    performanceMonitoringEnabled: true,\n    editableProps: false,\n    logDetected: true,\n    vuexNewBackend: false,\n    vuexAutoload: false,\n    vuexGroupGettersByModule: true,\n    showMenuScrollTip: true,\n    timelineTimeGrid: true,\n    timelineScreenshots: true,\n    menuStepScrolling: env_1.isMac,\n    pluginPermissions: {}\n};\nvar persisted = [\n    'componentNameStyle',\n    'theme',\n    'displayDensity',\n    'recordVuex',\n    'editableProps',\n    'logDetected',\n    'vuexNewBackend',\n    'vuexAutoload',\n    'vuexGroupGettersByModule',\n    'timeFormat',\n    'showMenuScrollTip',\n    'timelineTimeGrid',\n    'timelineScreenshots',\n    'menuStepScrolling',\n    'pluginPermissions',\n    'performanceMonitoringEnabled'\n];\nvar storageVersion = '6.0.0-alpha.1';\n// ---- INTERNALS ---- //\nvar bridge;\n// List of fields to persist to storage (disabled if 'false')\n// This should be unique to each shared data client to prevent conflicts\nvar persist = false;\nvar data;\nvar initRetryInterval;\nvar initRetryCount = 0;\nvar initCbs = [];\nfunction initSharedData(params) {\n    return new Promise(function (resolve) {\n        // Mandatory params\n        bridge = params.bridge;\n        persist = !!params.persist;\n        if (persist) {\n            if (true)\n                { console.log('[shared data] Master init in progress...'); }\n            // Load persisted fields\n            persisted.forEach(function (key) {\n                var value = storage_1.getStorage((\"vue-devtools-\" + storageVersion + \":shared-data:\" + key));\n                if (value !== null) {\n                    internalSharedData[key] = value;\n                }\n            });\n            bridge.on('shared-data:load', function () {\n                // Send all fields\n                Object.keys(internalSharedData).forEach(function (key) {\n                    sendValue(key, internalSharedData[key]);\n                });\n                bridge.send('shared-data:load-complete');\n            });\n            bridge.on('shared-data:init-complete', function () {\n                if (true)\n                    { console.log('[shared data] Master init complete'); }\n                clearInterval(initRetryInterval);\n                resolve();\n            });\n            bridge.send('shared-data:master-init-waiting');\n            // In case backend init is executed after frontend\n            bridge.on('shared-data:slave-init-waiting', function () {\n                bridge.send('shared-data:master-init-waiting');\n            });\n            initRetryCount = 0;\n            initRetryInterval = setInterval(function () {\n                if (true)\n                    { console.log('[shared data] Master init retrying...'); }\n                bridge.send('shared-data:master-init-waiting');\n                initRetryCount++;\n                if (initRetryCount > 30) {\n                    clearInterval(initRetryInterval);\n                    console.error('[shared data] Master init failed');\n                }\n            }, 2000);\n        }\n        else {\n            if (true)\n                { console.log('[shared data] Slave init in progress...'); }\n            bridge.on('shared-data:master-init-waiting', function () {\n                if (true)\n                    { console.log('[shared data] Slave loading data...'); }\n                // Load all persisted shared data\n                bridge.send('shared-data:load');\n                bridge.once('shared-data:load-complete', function () {\n                    if (true)\n                        { console.log('[shared data] Slave init complete'); }\n                    bridge.send('shared-data:init-complete');\n                    resolve();\n                });\n            });\n            bridge.send('shared-data:slave-init-waiting');\n        }\n        data = Object.assign({}, internalSharedData);\n        if (params.Vue) {\n            data = params.Vue.observable(data);\n        }\n        // Update value from other shared data clients\n        bridge.on('shared-data:set', function (ref) {\n            var key = ref.key;\n            var value = ref.value;\n\n            setValue(key, value);\n        });\n        initCbs.forEach(function (cb) { return cb(); });\n    });\n}\nexports.initSharedData = initSharedData;\nfunction onSharedDataInit(cb) {\n    initCbs.push(cb);\n    return function () {\n        var index = initCbs.indexOf(cb);\n        if (index !== -1)\n            { initCbs.splice(index, 1); }\n    };\n}\nexports.onSharedDataInit = onSharedDataInit;\nfunction destroySharedData() {\n    bridge.removeAllListeners('shared-data:set');\n    watchers = {};\n}\nexports.destroySharedData = destroySharedData;\nvar watchers = {};\nfunction setValue(key, value) {\n    // Storage\n    if (persist && persisted.includes(key)) {\n        storage_1.setStorage((\"vue-devtools-\" + storageVersion + \":shared-data:\" + key), value);\n    }\n    var oldValue = data[key];\n    data[key] = value;\n    var handlers = watchers[key];\n    if (handlers) {\n        handlers.forEach(function (h) { return h(value, oldValue); });\n    }\n    // Validate Proxy set trap\n    return true;\n}\nfunction sendValue(key, value) {\n    bridge && bridge.send('shared-data:set', {\n        key: key,\n        value: value\n    });\n}\nfunction watchSharedData(prop, handler) {\n    var list = watchers[prop] || (watchers[prop] = []);\n    list.push(handler);\n    return function () {\n        var index = list.indexOf(handler);\n        if (index !== -1)\n            { list.splice(index, 1); }\n    };\n}\nexports.watchSharedData = watchSharedData;\nvar proxy = {};\nObject.keys(internalSharedData).forEach(function (key) {\n    Object.defineProperty(proxy, key, {\n        configurable: false,\n        get: function () { return data[key]; },\n        set: function (value) {\n            sendValue(key, value);\n            setValue(key, value);\n        }\n    });\n});\nexports.default = proxy;\n//# sourceMappingURL=shared-data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared-utils/lib/shared-data.js\n");

/***/ }),

/***/ "../shared-utils/lib/shell.js":
/*!************************************!*\
  !*** ../shared-utils/lib/shell.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=shell.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvc2hlbGwuanM/ZGI0NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlEIiwiZmlsZSI6Ii4uL3NoYXJlZC11dGlscy9saWIvc2hlbGwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoZWxsLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared-utils/lib/shell.js\n");

/***/ }),

/***/ "../shared-utils/lib/storage.js":
/*!**************************************!*\
  !*** ../shared-utils/lib/storage.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clearStorage = exports.removeStorage = exports.setStorage = exports.getStorage = exports.initStorage = void 0;\nvar env_1 = __webpack_require__(/*! ./env */ \"../shared-utils/lib/env.js\");\n// If we can, we use the browser extension API to store data\n// it's async though, so we synchronize changes from an intermediate\n// storageData object\nvar useStorage = typeof env_1.target.chrome !== 'undefined' && typeof env_1.target.chrome.storage !== 'undefined';\nvar storageData = null;\nfunction initStorage() {\n    return new Promise(function (resolve) {\n        if (useStorage) {\n            env_1.target.chrome.storage.local.get(null, function (result) {\n                storageData = result;\n                resolve();\n            });\n        }\n        else {\n            storageData = {};\n            resolve();\n        }\n    });\n}\nexports.initStorage = initStorage;\nfunction getStorage(key, defaultValue) {\n    if ( defaultValue === void 0 ) defaultValue = null;\n\n    checkStorage();\n    if (useStorage) {\n        return getDefaultValue(storageData[key], defaultValue);\n    }\n    else {\n        try {\n            return getDefaultValue(JSON.parse(localStorage.getItem(key)), defaultValue);\n        }\n        catch (e) { }\n    }\n}\nexports.getStorage = getStorage;\nfunction setStorage(key, val) {\n    var obj;\n\n    checkStorage();\n    if (useStorage) {\n        storageData[key] = val;\n        env_1.target.chrome.storage.local.set(( obj = {}, obj[key] = val, obj ));\n    }\n    else {\n        try {\n            localStorage.setItem(key, JSON.stringify(val));\n        }\n        catch (e) { }\n    }\n}\nexports.setStorage = setStorage;\nfunction removeStorage(key) {\n    checkStorage();\n    if (useStorage) {\n        delete storageData[key];\n        env_1.target.chrome.storage.local.remove([key]);\n    }\n    else {\n        try {\n            localStorage.removeItem(key);\n        }\n        catch (e) { }\n    }\n}\nexports.removeStorage = removeStorage;\nfunction clearStorage() {\n    checkStorage();\n    if (useStorage) {\n        storageData = {};\n        env_1.target.chrome.storage.local.clear();\n    }\n    else {\n        try {\n            localStorage.clear();\n        }\n        catch (e) { }\n    }\n}\nexports.clearStorage = clearStorage;\nfunction checkStorage() {\n    if (!storageData) {\n        throw new Error('Storage wasn\\'t initialized with \\'init()\\'');\n    }\n}\nfunction getDefaultValue(value, defaultValue) {\n    if (value == null) {\n        return defaultValue;\n    }\n    return value;\n}\n//# sourceMappingURL=storage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvc3RvcmFnZS5qcz9kYTExIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0Il0sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELG9CQUFvQixHQUFHLHFCQUFxQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3RIQSxHQUFLLENBQUMsS0FBSyxHQUFHLG1CQUFPLENBQUMseUNBQU8sQ0FBQyxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBQSxHQUFLLENBQUMsVUFBVSxHQUFHLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssV0FBVyxJQUFJLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQztBQUNwSEMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDdkIsU0FBUyxXQUFXLEdBQUc7QUFDdkIsSUFBSSxPQUFPLElBQUksT0FBTyxVQUFDLENBQUMsT0FBTyxFQUFLO0FBQ3BDLFFBQVEsSUFBSSxVQUFVLEVBQUU7QUFDeEIsWUFBWSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFlBQUUsT0FBTSxDQUFJO0FBQ2xFLGdCQUFnQixXQUFXLEdBQUcsTUFBTSxDQUFDO0FBQ3JDLGdCQUFnQixPQUFPLEVBQUUsQ0FBQztBQUMxQixhQUFhLENBQUMsQ0FBQztBQUNmLFNBQVM7QUFDVCxhQUFhO0FBQ2IsWUFBWSxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQzdCLFlBQVksT0FBTyxFQUFFLENBQUM7QUFDdEIsU0FBUztBQUNULEtBQUssQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUNELG1CQUFtQixHQUFHLFdBQVcsQ0FBQztBQUNsQyxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsWUFBbUIsRUFBRTsrQ0FBVCxHQUFHO0FBQU87QUFDL0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuQixJQUFJLElBQUksVUFBVSxFQUFFO0FBQ3BCLFFBQVEsT0FBTyxlQUFlLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQy9ELEtBQUs7QUFDTCxTQUFTO0FBQ1QsUUFBUSxJQUFJO0FBQ1osWUFBWSxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN4RixTQUFTO0FBQ1QsUUFBUSxPQUFPLENBQUMsRUFBRSxHQUFHO0FBQ3JCLEtBQUs7QUFDTCxDQUFDO0FBQ0Qsa0JBQWtCLEdBQUcsVUFBVSxDQUFDO0FBQ2hDLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7O0FBQUM7QUFDL0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuQixJQUFJLElBQUksVUFBVSxFQUFFO0FBQ3BCLFFBQVEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUMvQixRQUFRLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxTQUFDLEVBQUMsS0FBQyxDQUFDLEdBQUcsSUFBRyxVQUFLLENBQUMsQ0FBQztBQUM5RCxLQUFLO0FBQ0wsU0FBUztBQUNULFFBQVEsSUFBSTtBQUNaLFlBQVksWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzNELFNBQVM7QUFDVCxRQUFRLE9BQU8sQ0FBQyxFQUFFLEdBQUc7QUFDckIsS0FBSztBQUNMLENBQUM7QUFDRCxrQkFBa0IsR0FBRyxVQUFVLENBQUM7QUFDaEMsU0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFO0FBQzVCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDbkIsSUFBSSxJQUFJLFVBQVUsRUFBRTtBQUNwQixRQUFRLE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQVEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3hELEtBQUs7QUFDTCxTQUFTO0FBQ1QsUUFBUSxJQUFJO0FBQ1osWUFBWSxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLFNBQVM7QUFDVCxRQUFRLE9BQU8sQ0FBQyxFQUFFLEdBQUc7QUFDckIsS0FBSztBQUNMLENBQUM7QUFDRCxxQkFBcUIsR0FBRyxhQUFhLENBQUM7QUFDdEMsU0FBUyxZQUFZLEdBQUc7QUFDeEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuQixJQUFJLElBQUksVUFBVSxFQUFFO0FBQ3BCLFFBQVEsV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUN6QixRQUFRLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbEQsS0FBSztBQUNMLFNBQVM7QUFDVCxRQUFRLElBQUk7QUFDWixZQUFZLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNqQyxTQUFTO0FBQ1QsUUFBUSxPQUFPLENBQUMsRUFBRSxHQUFHO0FBQ3JCLEtBQUs7QUFDTCxDQUFDO0FBQ0Qsb0JBQW9CLEdBQUcsWUFBWSxDQUFDO0FBQ3BDLFNBQVMsWUFBWSxHQUFHO0FBQ3hCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUN0QixRQUFRLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUN2RSxLQUFLO0FBQ0wsQ0FBQztBQUNELFNBQVMsZUFBZSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7QUFDOUMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7QUFDdkIsUUFBUSxPQUFPLFlBQVksQ0FBQztBQUM1QixLQUFLO0FBQ0wsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBQ0QiLCJmaWxlIjoiLi4vc2hhcmVkLXV0aWxzL2xpYi9zdG9yYWdlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsZWFyU3RvcmFnZSA9IGV4cG9ydHMucmVtb3ZlU3RvcmFnZSA9IGV4cG9ydHMuc2V0U3RvcmFnZSA9IGV4cG9ydHMuZ2V0U3RvcmFnZSA9IGV4cG9ydHMuaW5pdFN0b3JhZ2UgPSB2b2lkIDA7XG5jb25zdCBlbnZfMSA9IHJlcXVpcmUoXCIuL2VudlwiKTtcbi8vIElmIHdlIGNhbiwgd2UgdXNlIHRoZSBicm93c2VyIGV4dGVuc2lvbiBBUEkgdG8gc3RvcmUgZGF0YVxuLy8gaXQncyBhc3luYyB0aG91Z2gsIHNvIHdlIHN5bmNocm9uaXplIGNoYW5nZXMgZnJvbSBhbiBpbnRlcm1lZGlhdGVcbi8vIHN0b3JhZ2VEYXRhIG9iamVjdFxuY29uc3QgdXNlU3RvcmFnZSA9IHR5cGVvZiBlbnZfMS50YXJnZXQuY2hyb21lICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZW52XzEudGFyZ2V0LmNocm9tZS5zdG9yYWdlICE9PSAndW5kZWZpbmVkJztcbmxldCBzdG9yYWdlRGF0YSA9IG51bGw7XG5mdW5jdGlvbiBpbml0U3RvcmFnZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgICAgIGVudl8xLnRhcmdldC5jaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQobnVsbCwgcmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlRGF0YSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0b3JhZ2VEYXRhID0ge307XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuaW5pdFN0b3JhZ2UgPSBpbml0U3RvcmFnZTtcbmZ1bmN0aW9uIGdldFN0b3JhZ2Uoa2V5LCBkZWZhdWx0VmFsdWUgPSBudWxsKSB7XG4gICAgY2hlY2tTdG9yYWdlKCk7XG4gICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGdldERlZmF1bHRWYWx1ZShzdG9yYWdlRGF0YVtrZXldLCBkZWZhdWx0VmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBnZXREZWZhdWx0VmFsdWUoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxufVxuZXhwb3J0cy5nZXRTdG9yYWdlID0gZ2V0U3RvcmFnZTtcbmZ1bmN0aW9uIHNldFN0b3JhZ2Uoa2V5LCB2YWwpIHtcbiAgICBjaGVja1N0b3JhZ2UoKTtcbiAgICBpZiAodXNlU3RvcmFnZSkge1xuICAgICAgICBzdG9yYWdlRGF0YVtrZXldID0gdmFsO1xuICAgICAgICBlbnZfMS50YXJnZXQuY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgW2tleV06IHZhbCB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICB9XG59XG5leHBvcnRzLnNldFN0b3JhZ2UgPSBzZXRTdG9yYWdlO1xuZnVuY3Rpb24gcmVtb3ZlU3RvcmFnZShrZXkpIHtcbiAgICBjaGVja1N0b3JhZ2UoKTtcbiAgICBpZiAodXNlU3RvcmFnZSkge1xuICAgICAgICBkZWxldGUgc3RvcmFnZURhdGFba2V5XTtcbiAgICAgICAgZW52XzEudGFyZ2V0LmNocm9tZS5zdG9yYWdlLmxvY2FsLnJlbW92ZShba2V5XSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxufVxuZXhwb3J0cy5yZW1vdmVTdG9yYWdlID0gcmVtb3ZlU3RvcmFnZTtcbmZ1bmN0aW9uIGNsZWFyU3RvcmFnZSgpIHtcbiAgICBjaGVja1N0b3JhZ2UoKTtcbiAgICBpZiAodXNlU3RvcmFnZSkge1xuICAgICAgICBzdG9yYWdlRGF0YSA9IHt9O1xuICAgICAgICBlbnZfMS50YXJnZXQuY2hyb21lLnN0b3JhZ2UubG9jYWwuY2xlYXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxufVxuZXhwb3J0cy5jbGVhclN0b3JhZ2UgPSBjbGVhclN0b3JhZ2U7XG5mdW5jdGlvbiBjaGVja1N0b3JhZ2UoKSB7XG4gICAgaWYgKCFzdG9yYWdlRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0b3JhZ2Ugd2FzblxcJ3QgaW5pdGlhbGl6ZWQgd2l0aCBcXCdpbml0KClcXCcnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JhZ2UuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared-utils/lib/storage.js\n");

/***/ }),

/***/ "../shared-utils/lib/transfer.js":
/*!***************************************!*\
  !*** ../shared-utils/lib/transfer.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.stringifyStrictCircularAutoChunks = exports.parseCircularAutoChunks = exports.stringifyCircularAutoChunks = void 0;\nvar MAX_SERIALIZED_SIZE = 512 * 1024; // 1MB\nfunction encode(data, replacer, list, seen) {\n    var stored, key, value, i, l;\n    var seenIndex = seen.get(data);\n    if (seenIndex != null) {\n        return seenIndex;\n    }\n    var index = list.length;\n    var proto = Object.prototype.toString.call(data);\n    if (proto === '[object Object]') {\n        stored = {};\n        seen.set(data, index);\n        list.push(stored);\n        var keys = Object.keys(data);\n        for (i = 0, l = keys.length; i < l; i++) {\n            key = keys[i];\n            value = data[key];\n            if (replacer)\n                { value = replacer.call(data, key, value); }\n            stored[key] = encode(value, replacer, list, seen);\n        }\n    }\n    else if (proto === '[object Array]') {\n        stored = [];\n        seen.set(data, index);\n        list.push(stored);\n        for (i = 0, l = data.length; i < l; i++) {\n            value = data[i];\n            if (replacer)\n                { value = replacer.call(data, i, value); }\n            stored[i] = encode(value, replacer, list, seen);\n        }\n    }\n    else {\n        list.push(data);\n    }\n    return index;\n}\nfunction decode(list, reviver) {\n    var i = list.length;\n    var j, k, data, key, value, proto;\n    while (i--) {\n        data = list[i];\n        proto = Object.prototype.toString.call(data);\n        if (proto === '[object Object]') {\n            var keys = Object.keys(data);\n            for (j = 0, k = keys.length; j < k; j++) {\n                key = keys[j];\n                value = list[data[key]];\n                if (reviver)\n                    { value = reviver.call(data, key, value); }\n                data[key] = value;\n            }\n        }\n        else if (proto === '[object Array]') {\n            for (j = 0, k = data.length; j < k; j++) {\n                value = list[data[j]];\n                if (reviver)\n                    { value = reviver.call(data, j, value); }\n                data[j] = value;\n            }\n        }\n    }\n}\nfunction stringifyCircularAutoChunks(data, replacer, space) {\n    if ( replacer === void 0 ) replacer = null;\n    if ( space === void 0 ) space = null;\n\n    var result;\n    try {\n        result = arguments.length === 1\n            ? JSON.stringify(data)\n            // @ts-ignore\n            : JSON.stringify(data, replacer, space);\n    }\n    catch (e) {\n        result = stringifyStrictCircularAutoChunks(data, replacer, space);\n    }\n    if (result.length > MAX_SERIALIZED_SIZE) {\n        var chunkCount = Math.ceil(result.length / MAX_SERIALIZED_SIZE);\n        var chunks = [];\n        for (var i = 0; i < chunkCount; i++) {\n            chunks.push(result.slice(i * MAX_SERIALIZED_SIZE, (i + 1) * MAX_SERIALIZED_SIZE));\n        }\n        return chunks;\n    }\n    return result;\n}\nexports.stringifyCircularAutoChunks = stringifyCircularAutoChunks;\nfunction parseCircularAutoChunks(data, reviver) {\n    if ( reviver === void 0 ) reviver = null;\n\n    if (Array.isArray(data)) {\n        data = data.join('');\n    }\n    var hasCircular = /^\\s/.test(data);\n    if (!hasCircular) {\n        return arguments.length === 1\n            ? JSON.parse(data)\n            // @ts-ignore\n            : JSON.parse(data, reviver);\n    }\n    else {\n        var list = JSON.parse(data);\n        decode(list, reviver);\n        return list[0];\n    }\n}\nexports.parseCircularAutoChunks = parseCircularAutoChunks;\nfunction stringifyStrictCircularAutoChunks(data, replacer, space) {\n    if ( replacer === void 0 ) replacer = null;\n    if ( space === void 0 ) space = null;\n\n    var list = [];\n    encode(data, replacer, list, new Map());\n    return space\n        ? ' ' + JSON.stringify(list, null, space)\n        : ' ' + JSON.stringify(list);\n}\nexports.stringifyStrictCircularAutoChunks = stringifyStrictCircularAutoChunks;\n//# sourceMappingURL=transfer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared-utils/lib/transfer.js\n");

/***/ }),

/***/ "../shared-utils/lib/util.js":
/*!***********************************!*\
  !*** ../shared-utils/lib/util.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEmptyObject = exports.copyToClipboard = exports.escape = exports.openInEditor = exports.focusInput = exports.has = exports.get = exports.set = exports.sortByKey = exports.searchDeepInObject = exports.isPlainObject = exports.revive = exports.parse = exports.getCustomRefDetails = exports.getCustomHTMLElementDetails = exports.getCustomFunctionDetails = exports.getCustomComponentDefinitionDetails = exports.getComponentName = exports.reviveSet = exports.getCustomSetDetails = exports.reviveMap = exports.getCustomMapDetails = exports.stringify = exports.specialTokenToString = exports.MAX_ARRAY_SIZE = exports.MAX_STRING_SIZE = exports.SPECIAL_TOKENS = exports.NAN = exports.NEGATIVE_INFINITY = exports.INFINITY = exports.UNDEFINED = exports.inDoc = exports.getComponentDisplayName = exports.kebabize = exports.camelize = exports.classify = void 0;\nvar path_1 = __importDefault(__webpack_require__(/*! path */ \"../../node_modules/path-browserify/index.js\"));\nvar transfer_1 = __webpack_require__(/*! ./transfer */ \"../shared-utils/lib/transfer.js\");\nvar backend_1 = __webpack_require__(/*! ./backend */ \"../shared-utils/lib/backend.js\");\nvar shared_data_1 = __importDefault(__webpack_require__(/*! ./shared-data */ \"../shared-utils/lib/shared-data.js\"));\nvar env_1 = __webpack_require__(/*! ./env */ \"../shared-utils/lib/env.js\");\nfunction cached(fn) {\n    var cache = Object.create(null);\n    return function cachedFn(str) {\n        var hit = cache[str];\n        return hit || (cache[str] = fn(str));\n    };\n}\nvar classifyRE = /(?:^|[-_/])(\\w)/g;\nexports.classify = cached(function (str) {\n    return str && str.replace(classifyRE, toUpper);\n});\nvar camelizeRE = /-(\\w)/g;\nexports.camelize = cached(function (str) {\n    return str.replace(camelizeRE, toUpper);\n});\nvar kebabizeRE = /([a-z0-9])([A-Z])/g;\nexports.kebabize = cached(function (str) {\n    return str && str\n        .replace(kebabizeRE, function (_, lowerCaseCharacter, upperCaseLetter) {\n        return (lowerCaseCharacter + \"-\" + upperCaseLetter);\n    })\n        .toLowerCase();\n});\nfunction toUpper(_, c) {\n    return c ? c.toUpperCase() : '';\n}\nfunction getComponentDisplayName(originalName, style) {\n    if ( style === void 0 ) style = 'class';\n\n    switch (style) {\n        case 'class':\n            return exports.classify(originalName);\n        case 'kebab':\n            return exports.kebabize(originalName);\n        case 'original':\n        default:\n            return originalName;\n    }\n}\nexports.getComponentDisplayName = getComponentDisplayName;\nfunction inDoc(node) {\n    if (!node)\n        { return false; }\n    var doc = node.ownerDocument.documentElement;\n    var parent = node.parentNode;\n    return doc === node ||\n        doc === parent ||\n        !!(parent && parent.nodeType === 1 && (doc.contains(parent)));\n}\nexports.inDoc = inDoc;\n/**\n * Stringify/parse data using CircularJSON.\n */\nexports.UNDEFINED = '__vue_devtool_undefined__';\nexports.INFINITY = '__vue_devtool_infinity__';\nexports.NEGATIVE_INFINITY = '__vue_devtool_negative_infinity__';\nexports.NAN = '__vue_devtool_nan__';\nexports.SPECIAL_TOKENS = {\n    true: true,\n    false: false,\n    undefined: exports.UNDEFINED,\n    null: null,\n    '-Infinity': exports.NEGATIVE_INFINITY,\n    Infinity: exports.INFINITY,\n    NaN: exports.NAN\n};\nexports.MAX_STRING_SIZE = 10000;\nexports.MAX_ARRAY_SIZE = 5000;\nfunction specialTokenToString(value) {\n    if (value === null) {\n        return 'null';\n    }\n    else if (value === exports.UNDEFINED) {\n        return 'undefined';\n    }\n    else if (value === exports.NAN) {\n        return 'NaN';\n    }\n    else if (value === exports.INFINITY) {\n        return 'Infinity';\n    }\n    else if (value === exports.NEGATIVE_INFINITY) {\n        return '-Infinity';\n    }\n    return false;\n}\nexports.specialTokenToString = specialTokenToString;\n/**\n * Needed to prevent stack overflow\n * while replacing complex objects\n * like components because we create\n * new objects with the CustomValue API\n * (.i.e `{ _custom: { ... } }`)\n */\nvar EncodeCache = function EncodeCache() {\n      this.map = new Map();\n  };\n  /**\n   * Returns a result unique to each input data\n   * @param {*} data Input data\n   * @param {*} factory Function used to create the unique result\n   */\n  EncodeCache.prototype.cache = function cache (data, factory) {\n      var cached = this.map.get(data);\n      if (cached) {\n          return cached;\n      }\n      else {\n          var result = factory(data);\n          this.map.set(data, result);\n          return result;\n      }\n  };\n  EncodeCache.prototype.clear = function clear () {\n      this.map.clear();\n  };\nvar encodeCache = new EncodeCache();\nvar ReviveCache = function ReviveCache(maxSize) {\n      this.maxSize = maxSize;\n      this.map = new Map();\n      this.index = 0;\n      this.size = 0;\n  };\n  ReviveCache.prototype.cache = function cache (value) {\n      var currentIndex = this.index;\n      this.map.set(currentIndex, value);\n      this.size++;\n      if (this.size > this.maxSize) {\n          this.map.delete(currentIndex - this.size);\n          this.size--;\n      }\n      this.index++;\n      return currentIndex;\n  };\n  ReviveCache.prototype.read = function read (id) {\n      return this.map.get(id);\n  };\nvar reviveCache = new ReviveCache(1000);\nfunction stringify(data) {\n    // Create a fresh cache for each serialization\n    encodeCache.clear();\n    return transfer_1.stringifyCircularAutoChunks(data, replacer);\n}\nexports.stringify = stringify;\nfunction replacer(key) {\n    // @ts-ignore\n    var val = this[key];\n    var type = typeof val;\n    if (Array.isArray(val)) {\n        var l = val.length;\n        if (l > exports.MAX_ARRAY_SIZE) {\n            return {\n                _isArray: true,\n                length: l,\n                items: val.slice(0, exports.MAX_ARRAY_SIZE)\n            };\n        }\n        return val;\n    }\n    else if (typeof val === 'string') {\n        if (val.length > exports.MAX_STRING_SIZE) {\n            return val.substr(0, exports.MAX_STRING_SIZE) + \"... (\" + ((val.length)) + \" total length)\";\n        }\n        else {\n            return val;\n        }\n    }\n    else if (type === 'undefined') {\n        return exports.UNDEFINED;\n    }\n    else if (val === Infinity) {\n        return exports.INFINITY;\n    }\n    else if (val === -Infinity) {\n        return exports.NEGATIVE_INFINITY;\n    }\n    else if (type === 'function') {\n        return getCustomFunctionDetails(val);\n    }\n    else if (type === 'symbol') {\n        return (\"[native Symbol \" + (Symbol.prototype.toString.call(val)) + \"]\");\n    }\n    else if (val !== null && type === 'object') {\n        var proto = Object.prototype.toString.call(val);\n        if (proto === '[object Map]') {\n            return encodeCache.cache(val, function () { return getCustomMapDetails(val); });\n        }\n        else if (proto === '[object Set]') {\n            return encodeCache.cache(val, function () { return getCustomSetDetails(val); });\n        }\n        else if (proto === '[object RegExp]') {\n            // special handling of native type\n            return (\"[native RegExp \" + (RegExp.prototype.toString.call(val)) + \"]\");\n        }\n        else if (proto === '[object Date]') {\n            return (\"[native Date \" + (Date.prototype.toString.call(val)) + \"]\");\n        }\n        else if (proto === '[object Error]') {\n            return (\"[native Error \" + (val.message) + \"<>\" + (val.stack) + \"]\");\n        }\n        else if (val.state && val._vm) {\n            return encodeCache.cache(val, function () { return backend_1.getCustomStoreDetails(val); });\n        }\n        else if (val.constructor && val.constructor.name === 'VueRouter') {\n            return encodeCache.cache(val, function () { return backend_1.getCustomRouterDetails(val); });\n        }\n        else if (backend_1.isVueInstance(val)) {\n            return encodeCache.cache(val, function () { return backend_1.getCustomInstanceDetails(val); });\n        }\n        else if (typeof val.render === 'function') {\n            return encodeCache.cache(val, function () { return getCustomComponentDefinitionDetails(val); });\n        }\n        else if (val.constructor && val.constructor.name === 'VNode') {\n            return (\"[native VNode <\" + (val.tag) + \">]\");\n        }\n        else if (val instanceof HTMLElement) {\n            return encodeCache.cache(val, function () { return getCustomHTMLElementDetails(val); });\n        }\n    }\n    else if (Number.isNaN(val)) {\n        return exports.NAN;\n    }\n    return sanitize(val);\n}\nfunction getCustomMapDetails(val) {\n    var list = [];\n    val.forEach(function (value, key) { return list.push({\n        key: key,\n        value: value\n    }); });\n    return {\n        _custom: {\n            type: 'map',\n            display: 'Map',\n            value: list,\n            readOnly: true,\n            fields: {\n                abstract: true\n            }\n        }\n    };\n}\nexports.getCustomMapDetails = getCustomMapDetails;\nfunction reviveMap(val) {\n    var result = new Map();\n    var list = val._custom.value;\n    for (var i = 0; i < list.length; i++) {\n        var ref = list[i];\n        var key = ref.key;\n        var value = ref.value;\n        result.set(key, revive(value));\n    }\n    return result;\n}\nexports.reviveMap = reviveMap;\nfunction getCustomSetDetails(val) {\n    var list = Array.from(val);\n    return {\n        _custom: {\n            type: 'set',\n            display: (\"Set[\" + (list.length) + \"]\"),\n            value: list,\n            readOnly: true\n        }\n    };\n}\nexports.getCustomSetDetails = getCustomSetDetails;\nfunction reviveSet(val) {\n    var result = new Set();\n    var list = val._custom.value;\n    for (var i = 0; i < list.length; i++) {\n        var value = list[i];\n        result.add(revive(value));\n    }\n    return result;\n}\nexports.reviveSet = reviveSet;\n// Use a custom basename functions instead of the shimed version\n// because it doesn't work on Windows\nfunction basename(filename, ext) {\n    return path_1.default.basename(filename.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/'), ext);\n}\nfunction getComponentName(options) {\n    var name = options.displayName || options.name || options._componentTag;\n    if (name) {\n        return name;\n    }\n    var file = options.__file; // injected by vue-loader\n    if (file) {\n        return exports.classify(basename(file, '.vue'));\n    }\n}\nexports.getComponentName = getComponentName;\nfunction getCustomComponentDefinitionDetails(def) {\n    var display = getComponentName(def);\n    if (display) {\n        if (def.name && def.__file) {\n            display += \" <span>(\" + (def.__file) + \")</span>\";\n        }\n    }\n    else {\n        display = '<i>Unknown Component</i>';\n    }\n    return {\n        _custom: Object.assign({}, {type: 'component-definition',\n            display: display,\n            tooltip: 'Component definition'},\n            def.__file\n                ? {\n                    file: def.__file\n                }\n                : {})\n    };\n}\nexports.getCustomComponentDefinitionDetails = getCustomComponentDefinitionDetails;\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getCustomFunctionDetails(func) {\n    var string = '';\n    var matches = null;\n    try {\n        string = Function.prototype.toString.call(func);\n        matches = String.prototype.match.call(string, /\\([\\s\\S]*?\\)/);\n    }\n    catch (e) {\n        // Func is probably a Proxy, which can break Function.prototype.toString()\n    }\n    // Trim any excess whitespace from the argument string\n    var match = matches && matches[0];\n    var args = typeof match === 'string'\n        ? (\"(\" + (match.substr(1, match.length - 2).split(',').map(function (a) { return a.trim(); }).join(', ')) + \")\")\n        : '(?)';\n    var name = typeof func.name === 'string' ? func.name : '';\n    return {\n        _custom: {\n            type: 'function',\n            display: (\"<span>f</span> \" + (escape(name)) + args),\n            _reviveId: reviveCache.cache(func)\n        }\n    };\n}\nexports.getCustomFunctionDetails = getCustomFunctionDetails;\nfunction getCustomHTMLElementDetails(value) {\n    return {\n        _custom: {\n            type: 'HTMLElement',\n            display: (\"<span class=\\\"opacity-30\\\">&lt;</span><span class=\\\"text-blue-500\\\">\" + (value.tagName.toLowerCase()) + \"</span><span class=\\\"opacity-30\\\">&gt;</span>\"),\n            value: namedNodeMapToObject(value.attributes),\n            actions: [\n                {\n                    icon: 'input',\n                    tooltip: 'Log element to console',\n                    action: function () {\n                        console.log(value);\n                    }\n                }\n            ]\n        }\n    };\n}\nexports.getCustomHTMLElementDetails = getCustomHTMLElementDetails;\nfunction namedNodeMapToObject(map) {\n    var result = {};\n    var l = map.length;\n    for (var i = 0; i < l; i++) {\n        var node = map.item(i);\n        result[node.name] = node.value;\n    }\n    return result;\n}\nfunction getCustomRefDetails(instance, key, ref) {\n    var value;\n    if (Array.isArray(ref)) {\n        value = ref.map(function (r) { return getCustomRefDetails(instance, key, r); }).map(function (data) { return data.value; });\n    }\n    else {\n        var name;\n        if (ref._isVue) {\n            name = getComponentName(ref.$options);\n        }\n        else {\n            name = ref.tagName.toLowerCase();\n        }\n        value = {\n            _custom: {\n                display: \"&lt;\" + name +\n                    (ref.id ? (\" <span class=\\\"attr-title\\\">id</span>=\\\"\" + (ref.id) + \"\\\"\") : '') +\n                    (ref.className ? (\" <span class=\\\"attr-title\\\">class</span>=\\\"\" + (ref.className) + \"\\\"\") : '') + '&gt;',\n                uid: instance.__VUE_DEVTOOLS_UID__,\n                type: 'reference'\n            }\n        };\n    }\n    return {\n        type: '$refs',\n        key: key,\n        value: value,\n        editable: false\n    };\n}\nexports.getCustomRefDetails = getCustomRefDetails;\nfunction parse(data, revive) {\n    if ( revive === void 0 ) revive = false;\n\n    return revive\n        ? transfer_1.parseCircularAutoChunks(data, reviver)\n        : transfer_1.parseCircularAutoChunks(data);\n}\nexports.parse = parse;\nvar specialTypeRE = /^\\[native (\\w+) (.*?)(<>((.|\\s)*))?\\]$/;\nvar symbolRE = /^\\[native Symbol Symbol\\((.*)\\)\\]$/;\nfunction reviver(key, val) {\n    return revive(val);\n}\nfunction revive(val) {\n    if (val === exports.UNDEFINED) {\n        return undefined;\n    }\n    else if (val === exports.INFINITY) {\n        return Infinity;\n    }\n    else if (val === exports.NEGATIVE_INFINITY) {\n        return -Infinity;\n    }\n    else if (val === exports.NAN) {\n        return NaN;\n    }\n    else if (val && val._custom) {\n        var custom = val._custom;\n        if (custom.type === 'component') {\n            return backend_1.getInstanceMap().get(custom.id);\n        }\n        else if (custom.type === 'map') {\n            return reviveMap(val);\n        }\n        else if (custom.type === 'set') {\n            return reviveSet(val);\n        }\n        else if (custom._reviveId) {\n            return reviveCache.read(custom._reviveId);\n        }\n        else {\n            return revive(custom.value);\n        }\n    }\n    else if (symbolRE.test(val)) {\n        var ref = symbolRE.exec(val);\n        var string = ref[1];\n        return Symbol.for(string);\n    }\n    else if (specialTypeRE.test(val)) {\n        var ref$1 = specialTypeRE.exec(val);\n        var type = ref$1[1];\n        var string$1 = ref$1[2];\n        var details = ref$1[4];\n        var result = new window[type](string$1);\n        if (type === 'Error' && details) {\n            result.stack = details;\n        }\n        return result;\n    }\n    else {\n        return val;\n    }\n}\nexports.revive = revive;\n/**\n * Sanitize data to be posted to the other side.\n * Since the message posted is sent with structured clone,\n * we need to filter out any types that might cause an error.\n *\n * @param {*} data\n * @return {*}\n */\nfunction sanitize(data) {\n    if (!isPrimitive(data) &&\n        !Array.isArray(data) &&\n        !isPlainObject(data)) {\n        // handle types that will probably cause issues in\n        // the structured clone\n        return Object.prototype.toString.call(data);\n    }\n    else {\n        return data;\n    }\n}\nfunction isPlainObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\nexports.isPlainObject = isPlainObject;\nfunction isPrimitive(data) {\n    if (data == null) {\n        return true;\n    }\n    var type = typeof data;\n    return (type === 'string' ||\n        type === 'number' ||\n        type === 'boolean');\n}\n/**\n * Searches a key or value in the object, with a maximum deepness\n * @param {*} obj Search target\n * @param {string} searchTerm Search string\n * @returns {boolean} Search match\n */\nfunction searchDeepInObject(obj, searchTerm) {\n    var seen = new Map();\n    var result = internalSearchObject(obj, searchTerm.toLowerCase(), seen, 0);\n    seen.clear();\n    return result;\n}\nexports.searchDeepInObject = searchDeepInObject;\nvar SEARCH_MAX_DEPTH = 10;\n/**\n * Executes a search on each field of the provided object\n * @param {*} obj Search target\n * @param {string} searchTerm Search string\n * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times\n * @param {number} depth Deep search depth level, which is capped to prevent performance issues\n * @returns {boolean} Search match\n */\nfunction internalSearchObject(obj, searchTerm, seen, depth) {\n    if (depth > SEARCH_MAX_DEPTH) {\n        return false;\n    }\n    var match = false;\n    var keys = Object.keys(obj);\n    var key, value;\n    for (var i = 0; i < keys.length; i++) {\n        key = keys[i];\n        value = obj[key];\n        match = internalSearchCheck(searchTerm, key, value, seen, depth + 1);\n        if (match) {\n            break;\n        }\n    }\n    return match;\n}\n/**\n * Executes a search on each value of the provided array\n * @param {*} array Search target\n * @param {string} searchTerm Search string\n * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times\n * @param {number} depth Deep search depth level, which is capped to prevent performance issues\n * @returns {boolean} Search match\n */\nfunction internalSearchArray(array, searchTerm, seen, depth) {\n    if (depth > SEARCH_MAX_DEPTH) {\n        return false;\n    }\n    var match = false;\n    var value;\n    for (var i = 0; i < array.length; i++) {\n        value = array[i];\n        match = internalSearchCheck(searchTerm, null, value, seen, depth + 1);\n        if (match) {\n            break;\n        }\n    }\n    return match;\n}\n/**\n * Checks if the provided field matches the search terms\n * @param {string} searchTerm Search string\n * @param {string} key Field key (null if from array)\n * @param {*} value Field value\n * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times\n * @param {number} depth Deep search depth level, which is capped to prevent performance issues\n * @returns {boolean} Search match\n */\nfunction internalSearchCheck(searchTerm, key, value, seen, depth) {\n    var match = false;\n    var result;\n    if (key === '_custom') {\n        key = value.display;\n        value = value.value;\n    }\n    (result = specialTokenToString(value)) && (value = result);\n    if (key && compare(key, searchTerm)) {\n        match = true;\n        seen.set(value, true);\n    }\n    else if (seen.has(value)) {\n        match = seen.get(value);\n    }\n    else if (Array.isArray(value)) {\n        seen.set(value, null);\n        match = internalSearchArray(value, searchTerm, seen, depth);\n        seen.set(value, match);\n    }\n    else if (isPlainObject(value)) {\n        seen.set(value, null);\n        match = internalSearchObject(value, searchTerm, seen, depth);\n        seen.set(value, match);\n    }\n    else if (compare(value, searchTerm)) {\n        match = true;\n        seen.set(value, true);\n    }\n    return match;\n}\n/**\n * Compares two values\n * @param {*} value Mixed type value that will be cast to string\n * @param {string} searchTerm Search string\n * @returns {boolean} Search match\n */\nfunction compare(value, searchTerm) {\n    return ('' + value).toLowerCase().indexOf(searchTerm) !== -1;\n}\nfunction sortByKey(state) {\n    return state && state.slice().sort(function (a, b) {\n        if (a.key < b.key)\n            { return -1; }\n        if (a.key > b.key)\n            { return 1; }\n        return 0;\n    });\n}\nexports.sortByKey = sortByKey;\nfunction set(object, path, value, cb) {\n    if ( cb === void 0 ) cb = null;\n\n    var sections = Array.isArray(path) ? path : path.split('.');\n    while (sections.length > 1) {\n        object = object[sections.shift()];\n    }\n    var field = sections[0];\n    if (cb) {\n        cb(object, field, value);\n    }\n    else {\n        object[field] = value;\n    }\n}\nexports.set = set;\nfunction get(object, path) {\n    var sections = Array.isArray(path) ? path : path.split('.');\n    for (var i = 0; i < sections.length; i++) {\n        object = object[sections[i]];\n        if (!object) {\n            return undefined;\n        }\n    }\n    return object;\n}\nexports.get = get;\nfunction has(object, path, parent) {\n    if ( parent === void 0 ) parent = false;\n\n    if (typeof object === 'undefined') {\n        return false;\n    }\n    var sections = Array.isArray(path) ? path.slice() : path.split('.');\n    var size = !parent ? 1 : 2;\n    while (object && sections.length > size) {\n        object = object[sections.shift()];\n    }\n    return object != null && Object.prototype.hasOwnProperty.call(object, sections[0]);\n}\nexports.has = has;\nfunction focusInput(el) {\n    el.focus();\n    el.setSelectionRange(0, el.value.length);\n}\nexports.focusInput = focusInput;\nfunction openInEditor(file) {\n    // Console display\n    var fileName = file.replace(/\\\\/g, '\\\\\\\\');\n    var src = \"fetch('\" + (shared_data_1.default.openInEditorHost) + \"__open-in-editor?file=\" + (encodeURI(file)) + \"').then(response => {\\n    if (response.ok) {\\n      console.log('File \" + fileName + \" opened in editor')\\n    } else {\\n      const msg = 'Opening component \" + fileName + \" failed'\\n      const target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {}\\n      if (target.__VUE_DEVTOOLS_TOAST__) {\\n        target.__VUE_DEVTOOLS_TOAST__(msg, 'error')\\n      } else {\\n        console.log('%c' + msg, 'color:red')\\n      }\\n      console.log('Check the setup of your project, see https://github.com/vuejs/vue-devtools/blob/master/docs/open-in-editor.md')\\n    }\\n  })\";\n    if (env_1.isChrome) {\n        env_1.target.chrome.devtools.inspectedWindow.eval(src);\n    }\n    else {\n        // eslint-disable-next-line no-eval\n        eval(src);\n    }\n}\nexports.openInEditor = openInEditor;\nvar ESC = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '&': '&amp;'\n};\nfunction escape(s) {\n    return s.replace(/[<>\"&]/g, escapeChar);\n}\nexports.escape = escape;\nfunction escapeChar(a) {\n    return ESC[a] || a;\n}\nfunction copyToClipboard(state) {\n    if (typeof document === 'undefined')\n        { return; }\n    var dummyTextArea = document.createElement('textarea');\n    dummyTextArea.textContent = stringify(state);\n    document.body.appendChild(dummyTextArea);\n    dummyTextArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(dummyTextArea);\n}\nexports.copyToClipboard = copyToClipboard;\nfunction isEmptyObject(obj) {\n    return obj === exports.UNDEFINED || !obj || Object.keys(obj).length === 0;\n}\nexports.isEmptyObject = isEmptyObject;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared-utils/lib/util.js\n");

/***/ }),

/***/ "./src/backend.js":
/*!************************!*\
  !*** ./src/backend.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ \"../../node_modules/socket.io-client/lib/index.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(socket_io_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _back__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @back */ \"../app-backend-core/lib/index.js\");\n/* harmony import */ var _back__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_back__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_bridge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @utils/bridge */ \"../shared-utils/lib/bridge.js\");\n/* harmony import */ var _back_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @back/toast */ \"../app-backend-core/lib/toast.js\");\n/* harmony import */ var _utils_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @utils/env */ \"../shared-utils/lib/env.js\");\n\n\n\n\n\n\nvar host = _utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_HOST__ || 'http://localhost'\nvar port = _utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_PORT__ !== undefined ? _utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_PORT__ : 8098\nvar fullHost = port ? host + ':' + port : host\nvar createSocket = _utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_SOCKET__ || (socket_io_client__WEBPACK_IMPORTED_MODULE_0___default())\nvar socket = createSocket(fullHost)\n\nvar connectedMessage = function () {\n  if (_utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__) {\n    _utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__('Remote Devtools Connected', 'normal')\n  }\n}\n\nvar disconnectedMessage = function () {\n  if (_utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__) {\n    _utils_env__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__('Remote Devtools Disconnected', 'error')\n  }\n}\n\nsocket.on('connect', function () {\n  connectedMessage()\n  ;(0,_back__WEBPACK_IMPORTED_MODULE_1__.initBackend)(bridge)\n  socket.emit('vue-devtools-init')\n})\n\n// Global disconnect handler. Fires in two cases:\n// - after calling above socket.disconnect()\n// - once devtools is closed (that's why we need socket.disconnect() here too, to prevent further polling)\nsocket.on('disconnect', function (reason) {\n  socket.disconnect()\n  disconnectedMessage()\n})\n\n// Disconnect socket once other client is connected\nsocket.on('vue-devtools-disconnect-backend', function () {\n  socket.disconnect()\n})\n\nvar bridge = new _utils_bridge__WEBPACK_IMPORTED_MODULE_4__.Bridge({\n  listen: function listen (fn) {\n    socket.on('vue-message', function (data) { return fn(data); })\n  },\n  send: function send (data) {\n    socket.emit('vue-message', data)\n  }\n})\n\nbridge.on('shutdown', function () {\n  socket.disconnect()\n  disconnectedMessage()\n})\n\n;(0,_back_toast__WEBPACK_IMPORTED_MODULE_2__.installToast)(_utils_env__WEBPACK_IMPORTED_MODULE_3__.target)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4vc3JjL2JhY2tlbmQuanM/NTA0NyJdLCJuYW1lcyI6WyJjb25zdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUM7QUFDRTtBQUNHO0FBQ0k7QUFDUDtBQUNuQztBQUNBQSxHQUFLLENBQUMsSUFBSSxHQUFHLG9FQUE0QixJQUFJLGtCQUFrQjtBQUMvREEsR0FBSyxDQUFDLElBQUksR0FBRyxvRUFBNEIsS0FBSyxTQUFTLEdBQUcsb0VBQTRCLEdBQUcsSUFBSTtBQUM3RkEsR0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUNoREEsR0FBSyxDQUFDLFlBQVksR0FBRyxzRUFBOEIsSUFBSSx5REFBRTtBQUN6REEsR0FBSyxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO0FBQ3JDO0FBQ0FBLEdBQUssQ0FBQyxnQkFBZ0IsWUFBRyxHQUFNO0FBQy9CLEVBQUUsSUFBSSxxRUFBNkIsRUFBRTtBQUNyQyxJQUFJLHFFQUE2QixDQUFDLDJCQUEyQixFQUFFLFFBQVEsQ0FBQztBQUN4RSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0FBLEdBQUssQ0FBQyxtQkFBbUIsWUFBRyxHQUFNO0FBQ2xDLEVBQUUsSUFBSSxxRUFBNkIsRUFBRTtBQUNyQyxJQUFJLHFFQUE2QixDQUFDLDhCQUE4QixFQUFFLE9BQU8sQ0FBQztBQUMxRSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLFdBQUUsR0FBTTtBQUMzQixFQUFFLGdCQUFnQixFQUFFO0FBQ3BCLEVBQUUsbURBQVcsQ0FBQyxNQUFNLENBQUM7QUFDckIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLFdBQUUsQ0FBQyxNQUFNLEVBQUs7QUFDcEMsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFO0FBQ3JCLEVBQUUsbUJBQW1CLEVBQUU7QUFDdkIsQ0FBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBLE1BQU0sQ0FBQyxFQUFFLENBQUMsaUNBQWlDLFdBQUUsR0FBTTtBQUNuRCxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUU7QUFDckIsQ0FBQyxDQUFDO0FBQ0Y7QUFDQUEsR0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLGlEQUFNLENBQUM7QUFDMUIsRUFBRSx1QkFBTSxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ2QsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLGFBQWEsWUFBRSxLQUFJLFVBQUksRUFBRSxDQUFDLElBQUksSUFBQyxDQUFDO0FBQzlDLEdBQUc7QUFDSCxFQUFFLG1CQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7QUFDZCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQztBQUNwQyxHQUFHO0FBQ0gsQ0FBQyxDQUFDO0FBQ0Y7QUFDQSxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsV0FBRSxHQUFNO0FBQzVCLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRTtBQUNyQixFQUFFLG1CQUFtQixFQUFFO0FBQ3ZCLENBQUMsQ0FBQztBQUNGO0FBQ0EsMERBQVksQ0FBQyw4Q0FBTSxDQUFDIiwiZmlsZSI6Ii4vc3JjL2JhY2tlbmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW8gZnJvbSAnc29ja2V0LmlvLWNsaWVudCdcbmltcG9ydCB7IGluaXRCYWNrZW5kIH0gZnJvbSAnQGJhY2snXG5pbXBvcnQgeyBCcmlkZ2UgfSBmcm9tICdAdXRpbHMvYnJpZGdlJ1xuaW1wb3J0IHsgaW5zdGFsbFRvYXN0IH0gZnJvbSAnQGJhY2svdG9hc3QnXG5pbXBvcnQgeyB0YXJnZXQgfSBmcm9tICdAdXRpbHMvZW52J1xuXG5jb25zdCBob3N0ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPU1RfXyB8fCAnaHR0cDovL2xvY2FsaG9zdCdcbmNvbnN0IHBvcnQgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfUE9SVF9fICE9PSB1bmRlZmluZWQgPyB0YXJnZXQuX19WVUVfREVWVE9PTFNfUE9SVF9fIDogODA5OFxuY29uc3QgZnVsbEhvc3QgPSBwb3J0ID8gaG9zdCArICc6JyArIHBvcnQgOiBob3N0XG5jb25zdCBjcmVhdGVTb2NrZXQgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfU09DS0VUX18gfHwgaW9cbmNvbnN0IHNvY2tldCA9IGNyZWF0ZVNvY2tldChmdWxsSG9zdClcblxuY29uc3QgY29ubmVjdGVkTWVzc2FnZSA9ICgpID0+IHtcbiAgaWYgKHRhcmdldC5fX1ZVRV9ERVZUT09MU19UT0FTVF9fKSB7XG4gICAgdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1RPQVNUX18oJ1JlbW90ZSBEZXZ0b29scyBDb25uZWN0ZWQnLCAnbm9ybWFsJylcbiAgfVxufVxuXG5jb25zdCBkaXNjb25uZWN0ZWRNZXNzYWdlID0gKCkgPT4ge1xuICBpZiAodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1RPQVNUX18pIHtcbiAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfVE9BU1RfXygnUmVtb3RlIERldnRvb2xzIERpc2Nvbm5lY3RlZCcsICdlcnJvcicpXG4gIH1cbn1cblxuc29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICBjb25uZWN0ZWRNZXNzYWdlKClcbiAgaW5pdEJhY2tlbmQoYnJpZGdlKVxuICBzb2NrZXQuZW1pdCgndnVlLWRldnRvb2xzLWluaXQnKVxufSlcblxuLy8gR2xvYmFsIGRpc2Nvbm5lY3QgaGFuZGxlci4gRmlyZXMgaW4gdHdvIGNhc2VzOlxuLy8gLSBhZnRlciBjYWxsaW5nIGFib3ZlIHNvY2tldC5kaXNjb25uZWN0KClcbi8vIC0gb25jZSBkZXZ0b29scyBpcyBjbG9zZWQgKHRoYXQncyB3aHkgd2UgbmVlZCBzb2NrZXQuZGlzY29ubmVjdCgpIGhlcmUgdG9vLCB0byBwcmV2ZW50IGZ1cnRoZXIgcG9sbGluZylcbnNvY2tldC5vbignZGlzY29ubmVjdCcsIChyZWFzb24pID0+IHtcbiAgc29ja2V0LmRpc2Nvbm5lY3QoKVxuICBkaXNjb25uZWN0ZWRNZXNzYWdlKClcbn0pXG5cbi8vIERpc2Nvbm5lY3Qgc29ja2V0IG9uY2Ugb3RoZXIgY2xpZW50IGlzIGNvbm5lY3RlZFxuc29ja2V0Lm9uKCd2dWUtZGV2dG9vbHMtZGlzY29ubmVjdC1iYWNrZW5kJywgKCkgPT4ge1xuICBzb2NrZXQuZGlzY29ubmVjdCgpXG59KVxuXG5jb25zdCBicmlkZ2UgPSBuZXcgQnJpZGdlKHtcbiAgbGlzdGVuIChmbikge1xuICAgIHNvY2tldC5vbigndnVlLW1lc3NhZ2UnLCBkYXRhID0+IGZuKGRhdGEpKVxuICB9LFxuICBzZW5kIChkYXRhKSB7XG4gICAgc29ja2V0LmVtaXQoJ3Z1ZS1tZXNzYWdlJywgZGF0YSlcbiAgfVxufSlcblxuYnJpZGdlLm9uKCdzaHV0ZG93bicsICgpID0+IHtcbiAgc29ja2V0LmRpc2Nvbm5lY3QoKVxuICBkaXNjb25uZWN0ZWRNZXNzYWdlKClcbn0pXG5cbmluc3RhbGxUb2FzdCh0YXJnZXQpXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/backend.js\n");

/***/ }),

/***/ "../../node_modules/component-bind/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/component-bind/index.js ***!
  \**************************************************/
/***/ ((module) => {

eval("/**\n * Slice reference.\n */\n\nvar slice = [].slice;\n\n/**\n * Bind `obj` to `fn`.\n *\n * @param {Object} obj\n * @param {Function|String} fn or string\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(obj, fn){\n  if ('string' == typeof fn) fn = obj[fn];\n  if ('function' != typeof fn) throw new Error('bind() requires a function');\n  var args = slice.call(arguments, 2);\n  return function(){\n    return fn.apply(obj, args.concat(slice.call(arguments)));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtYmluZC9pbmRleC5qcz84ZTFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxnQkFBZ0I7QUFDM0IsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/component-bind/index.js\n");

/***/ }),

/***/ "../../node_modules/component-emitter/index.js":
/*!*****************************************************!*\
  !*** ../../node_modules/component-emitter/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (true) {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Remove event specific arrays for event types that no\r\n  // one is subscribed for to avoid memory leak.\r\n  if (callbacks.length === 0) {\r\n    delete this._callbacks['$' + event];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  var args = new Array(arguments.length - 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcz83NGNiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxJQUE2QjtBQUNqQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsTUFBTTtBQUNqQixZQUFZO0FBQ1o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZW1vdmUgZXZlbnQgc3BlY2lmaWMgYXJyYXlzIGZvciBldmVudCB0eXBlcyB0aGF0IG5vXHJcbiAgLy8gb25lIGlzIHN1YnNjcmliZWQgZm9yIHRvIGF2b2lkIG1lbW9yeSBsZWFrLlxyXG4gIGlmIChjYWxsYmFja3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XHJcbiAgfVxyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/component-emitter/index.js\n");

/***/ }),

/***/ "../../node_modules/component-inherit/index.js":
/*!*****************************************************!*\
  !*** ../../node_modules/component-inherit/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function(a, b){\n  var fn = function(){};\n  fn.prototype = b.prototype;\n  a.prototype = new fn;\n  a.prototype.constructor = a;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtaW5oZXJpdC9pbmRleC5qcz83YjI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1pbmhlcml0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGEsIGIpe1xuICB2YXIgZm4gPSBmdW5jdGlvbigpe307XG4gIGZuLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICBhLnByb3RvdHlwZSA9IG5ldyBmbjtcbiAgYS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBhO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/component-inherit/index.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/globalThis.browser.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/globalThis.browser.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("module.exports = (function () {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else {\n    return Function('return this')(); // eslint-disable-line no-new-func\n  }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9nbG9iYWxUaGlzLmJyb3dzZXIuanM/ZGRmYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0gscUNBQXFDO0FBQ3JDO0FBQ0EsQ0FBQyIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvZ2xvYmFsVGhpcy5icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy1mdW5jXG4gIH1cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/globalThis.browser.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./socket */ \"../../node_modules/engine.io-client/lib/socket.js\");\n\n/**\n * Exports parser\n *\n * @api public\n *\n */\nmodule.exports.parser = __webpack_require__(/*! engine.io-parser */ \"../../node_modules/engine.io-parser/lib/browser.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcz8xMzVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSx5R0FBb0M7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlIQUFtRCIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/index.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/socket.js":
/*!*********************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/socket.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nvar transports = __webpack_require__(/*! ./transports/index */ \"../../node_modules/engine.io-client/lib/transports/index.js\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"../../node_modules/component-emitter/index.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/engine.io-client/node_modules/debug/src/browser.js\")('engine.io-client:socket');\nvar index = __webpack_require__(/*! indexof */ \"../../node_modules/indexof/index.js\");\nvar parser = __webpack_require__(/*! engine.io-parser */ \"../../node_modules/engine.io-parser/lib/browser.js\");\nvar parseuri = __webpack_require__(/*! parseuri */ \"../../node_modules/parseuri/index.js\");\nvar parseqs = __webpack_require__(/*! parseqs */ \"../../node_modules/parseqs/index.js\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket (uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure\n    : (typeof location !== 'undefined' && 'https:' === location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (typeof location !== 'undefined' ? location.hostname : 'localhost');\n  this.port = opts.port || (typeof location !== 'undefined' && location.port\n      ? location.port\n      : (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.withCredentials = false !== opts.withCredentials;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.transportOptions = opts.transportOptions || {};\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || undefined;\n  this.key = opts.key || undefined;\n  this.passphrase = opts.passphrase || undefined;\n  this.cert = opts.cert || undefined;\n  this.ca = opts.ca || undefined;\n  this.ciphers = opts.ciphers || undefined;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode;\n\n  // detect ReactNative environment\n  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');\n\n  // other options for Node.js or ReactNative client\n  if (typeof self === 'undefined' || this.isReactNative) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  }\n\n  // set on handshake\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null;\n\n  // set on heartbeat\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = __webpack_require__(/*! ./transport */ \"../../node_modules/engine.io-client/lib/transport.js\");\nSocket.transports = __webpack_require__(/*! ./transports/index */ \"../../node_modules/engine.io-client/lib/transports/index.js\");\nSocket.parser = __webpack_require__(/*! engine.io-parser */ \"../../node_modules/engine.io-parser/lib/browser.js\");\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // per-transport options\n  var options = this.transportOptions[name] || {};\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    query: query,\n    socket: this,\n    agent: options.agent || this.agent,\n    hostname: options.hostname || this.hostname,\n    port: options.port || this.port,\n    secure: options.secure || this.secure,\n    path: options.path || this.path,\n    forceJSONP: options.forceJSONP || this.forceJSONP,\n    jsonp: options.jsonp || this.jsonp,\n    forceBase64: options.forceBase64 || this.forceBase64,\n    enablesXDR: options.enablesXDR || this.enablesXDR,\n    withCredentials: options.withCredentials || this.withCredentials,\n    timestampRequests: options.timestampRequests || this.timestampRequests,\n    timestampParam: options.timestampParam || this.timestampParam,\n    policyPort: options.policyPort || this.policyPort,\n    pfx: options.pfx || this.pfx,\n    key: options.key || this.key,\n    passphrase: options.passphrase || this.passphrase,\n    cert: options.cert || this.cert,\n    ca: options.ca || this.ca,\n    ciphers: options.ciphers || this.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,\n    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,\n    extraHeaders: options.extraHeaders || this.extraHeaders,\n    forceNode: options.forceNode || this.forceNode,\n    localAddress: options.localAddress || this.localAddress,\n    requestTimeout: options.requestTimeout || this.requestTimeout,\n    protocols: options.protocols || void (0),\n    isReactNative: this.isReactNative\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function () {\n    self.onDrain();\n  })\n  .on('packet', function (packet) {\n    self.onPacket(packet);\n  })\n  .on('error', function (e) {\n    self.onError(e);\n  })\n  .on('close', function () {\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, { probe: 1 });\n  var failed = false;\n  var self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen () {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport () {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  // Handle any error that happens while probing\n  function onerror (err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose () {\n    onerror('transport closed');\n  }\n\n  // When the socket is closed while we're probing\n  function onclose () {\n    onerror('socket closed');\n  }\n\n  // When the socket is upgraded while we're probing\n  function onupgrade (to) {\n    if (transport && to.name !== transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  // Remove all listeners on the transport and on self\n  function cleanup () {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState ||\n      'closing' === this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(JSON.parse(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if ('closed' === this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close () {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose () {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade () {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/socket.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/transport.js":
/*!************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/transport.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nvar parser = __webpack_require__(/*! engine.io-parser */ \"../../node_modules/engine.io-parser/lib/browser.js\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"../../node_modules/component-emitter/index.js\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = Transport;\n\n/**\n * Transport abstract constructor.\n *\n * @param {Object} options.\n * @api private\n */\n\nfunction Transport (opts) {\n  this.path = opts.path;\n  this.hostname = opts.hostname;\n  this.port = opts.port;\n  this.secure = opts.secure;\n  this.query = opts.query;\n  this.timestampParam = opts.timestampParam;\n  this.timestampRequests = opts.timestampRequests;\n  this.readyState = '';\n  this.agent = opts.agent || false;\n  this.socket = opts.socket;\n  this.enablesXDR = opts.enablesXDR;\n  this.withCredentials = opts.withCredentials;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n  this.forceNode = opts.forceNode;\n\n  // results of ReactNative environment detection\n  this.isReactNative = opts.isReactNative;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n  this.localAddress = opts.localAddress;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Transport.prototype);\n\n/**\n * Emits an error.\n *\n * @param {String} str\n * @return {Transport} for chaining\n * @api public\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  var err = new Error(msg);\n  err.type = 'TransportError';\n  err.description = desc;\n  this.emit('error', err);\n  return this;\n};\n\n/**\n * Opens the transport.\n *\n * @api public\n */\n\nTransport.prototype.open = function () {\n  if ('closed' === this.readyState || '' === this.readyState) {\n    this.readyState = 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n\n/**\n * Sends multiple packets.\n *\n * @param {Array} packets\n * @api private\n */\n\nTransport.prototype.send = function (packets) {\n  if ('open' === this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n\n/**\n * Called upon open\n *\n * @api private\n */\n\nTransport.prototype.onOpen = function () {\n  this.readyState = 'open';\n  this.writable = true;\n  this.emit('open');\n};\n\n/**\n * Called with data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function (data) {\n  var packet = parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n\n/**\n * Called with a decoded packet.\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnQuanM/NjM3YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLDRFQUFrQjtBQUN2QyxjQUFjLG1CQUFPLENBQUMsd0VBQW1COztBQUV6QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLFVBQVU7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuXG4vKipcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xuICB0aGlzLnBhdGggPSBvcHRzLnBhdGg7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XG4gIHRoaXMuc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IG9wdHMud2l0aENyZWRlbnRpYWxzO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcblxuICAvLyByZXN1bHRzIG9mIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGRldGVjdGlvblxuICB0aGlzLmlzUmVhY3ROYXRpdmUgPSBvcHRzLmlzUmVhY3ROYXRpdmU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRW1pdHMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJztcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICAgIHRoaXMuZG9PcGVuKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgdGhpcy5vbkNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gb3BlblxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/transport.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/transports/index.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/transports/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ \"../../node_modules/engine.io-client/lib/xmlhttprequest.js\");\nvar XHR = __webpack_require__(/*! ./polling-xhr */ \"../../node_modules/engine.io-client/lib/transports/polling-xhr.js\");\nvar JSONP = __webpack_require__(/*! ./polling-jsonp */ \"../../node_modules/engine.io-client/lib/transports/polling-jsonp.js\");\nvar websocket = __webpack_require__(/*! ./websocket */ \"../../node_modules/engine.io-client/lib/transports/websocket.js\");\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (typeof location !== 'undefined') {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzPzcxYjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixtQkFBTyxDQUFDLHFGQUFvQjtBQUNqRCxVQUFVLG1CQUFPLENBQUMsd0ZBQWU7QUFDakMsWUFBWSxtQkFBTyxDQUFDLDRGQUFpQjtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvRkFBYTs7QUFFckM7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICB9XG5cbiAgICB4ZCA9IG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lIHx8IHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB4cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgfVxuXG4gIG9wdHMueGRvbWFpbiA9IHhkO1xuICBvcHRzLnhzY2hlbWUgPSB4cztcbiAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuXG4gIGlmICgnb3BlbicgaW4geGhyICYmICFvcHRzLmZvcmNlSlNPTlApIHtcbiAgICByZXR1cm4gbmV3IFhIUihvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWpzb25wKSB0aHJvdyBuZXcgRXJyb3IoJ0pTT05QIGRpc2FibGVkJyk7XG4gICAgcmV0dXJuIG5ldyBKU09OUChvcHRzKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/transports/index.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/transports/polling-jsonp.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/transports/polling-jsonp.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module requirements.\n */\n\nvar Polling = __webpack_require__(/*! ./polling */ \"../../node_modules/engine.io-client/lib/transports/polling.js\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"../../node_modules/component-inherit/index.js\");\nvar globalThis = __webpack_require__(/*! ../globalThis */ \"../../node_modules/engine.io-client/lib/globalThis.browser.js\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline = /\\n/g;\nvar rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query = this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    callbacks = globalThis.___eio = (globalThis.___eio || []);\n  }\n\n  // callback identifier\n  this.index = callbacks.length;\n\n  // add callback to jsonp global\n  var self = this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j = this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (typeof addEventListener === 'function') {\n    addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror = empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary = false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose = function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form = null;\n    this.iframe = null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll = function () {\n  var self = this;\n  var script = document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  script.async = true;\n  script.src = this.uri();\n  script.onerror = function (e) {\n    self.onError('jsonp poll error', e);\n  };\n\n  var insertAt = document.getElementsByTagName('script')[0];\n  if (insertAt) {\n    insertAt.parentNode.insertBefore(script, insertAt);\n  } else {\n    (document.head || document.body).appendChild(script);\n  }\n  this.script = script;\n\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite = function (data, fn) {\n  var self = this;\n\n  if (!this.form) {\n    var form = document.createElement('form');\n    var area = document.createElement('textarea');\n    var id = this.iframeId = 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className = 'socketio';\n    form.style.position = 'absolute';\n    form.style.top = '-1000px';\n    form.style.left = '-1000px';\n    form.target = id;\n    form.method = 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name = 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form = form;\n    this.area = area;\n  }\n\n  this.form.action = this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n      var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n      iframe = document.createElement(html);\n    } catch (e) {\n      iframe = document.createElement('iframe');\n      iframe.name = self.iframeId;\n      iframe.src = 'javascript:0';\n    }\n\n    iframe.id = self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe = iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data = data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value = data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch (e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange = function () {\n      if (self.iframe.readyState === 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload = complete;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/transports/polling-jsonp.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/transports/polling-xhr.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/transports/polling-xhr.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* global attachEvent */\n\n/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ \"../../node_modules/engine.io-client/lib/xmlhttprequest.js\");\nvar Polling = __webpack_require__(/*! ./polling */ \"../../node_modules/engine.io-client/lib/transports/polling.js\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"../../node_modules/component-emitter/index.js\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"../../node_modules/component-inherit/index.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/engine.io-client/node_modules/debug/src/browser.js\")('engine.io-client:polling-xhr');\nvar globalThis = __webpack_require__(/*! ../globalThis */ \"../../node_modules/engine.io-client/lib/globalThis.browser.js\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty () {}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR (opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n  this.extraHeaders = opts.extraHeaders;\n\n  if (typeof location !== 'undefined') {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||\n      port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n  opts.withCredentials = this.withCredentials;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout;\n\n  // other options for Node.js client\n  opts.extraHeaders = this.extraHeaders;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function () {\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request (opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.withCredentials = opts.withCredentials;\n  this.requestTimeout = opts.requestTimeout;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {}\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = this.withCredentials;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 2) {\n          try {\n            var contentType = xhr.getResponseHeader('Content-Type');\n            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {\n              xhr.responseType = 'arraybuffer';\n            }\n          } catch (e) {}\n        }\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (typeof document !== 'undefined') {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (typeof document !== 'undefined') {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function () {\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type');\n    } catch (e) {}\n    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      data = this.xhr.responseText;\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function () {\n  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (typeof document !== 'undefined') {\n  if (typeof attachEvent === 'function') {\n    attachEvent('onunload', unloadHandler);\n  } else if (typeof addEventListener === 'function') {\n    var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler () {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/transports/polling-xhr.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/transports/polling.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/transports/polling.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nvar Transport = __webpack_require__(/*! ../transport */ \"../../node_modules/engine.io-client/lib/transport.js\");\nvar parseqs = __webpack_require__(/*! parseqs */ \"../../node_modules/parseqs/index.js\");\nvar parser = __webpack_require__(/*! engine.io-parser */ \"../../node_modules/engine.io-parser/lib/browser.js\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"../../node_modules/component-inherit/index.js\");\nvar yeast = __webpack_require__(/*! yeast */ \"../../node_modules/yeast/index.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/engine.io-client/node_modules/debug/src/browser.js\")('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function () {\n  var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ \"../../node_modules/engine.io-client/lib/xmlhttprequest.js\");\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause () {\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function () {\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function () {\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' === self.readyState && packet.type === 'open') {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' === packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !== this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' === this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n\n  function close () {\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' === this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\n     ('http' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/transports/polling.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/transports/websocket.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/transports/websocket.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nvar Transport = __webpack_require__(/*! ../transport */ \"../../node_modules/engine.io-client/lib/transport.js\");\nvar parser = __webpack_require__(/*! engine.io-parser */ \"../../node_modules/engine.io-parser/lib/browser.js\");\nvar parseqs = __webpack_require__(/*! parseqs */ \"../../node_modules/parseqs/index.js\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"../../node_modules/component-inherit/index.js\");\nvar yeast = __webpack_require__(/*! yeast */ \"../../node_modules/yeast/index.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/engine.io-client/node_modules/debug/src/browser.js\")('engine.io-client:websocket');\n\nvar BrowserWebSocket, NodeWebSocket;\n\nif (typeof WebSocket !== 'undefined') {\n  BrowserWebSocket = WebSocket;\n} else if (typeof self !== 'undefined') {\n  BrowserWebSocket = self.WebSocket || self.MozWebSocket;\n}\n\nif (typeof window === 'undefined') {\n  try {\n    NodeWebSocket = __webpack_require__(/*! ws */ \"?fb7c\");\n  } catch (e) { }\n}\n\n/**\n * Get either the `WebSocket` or `MozWebSocket` globals\n * in the browser or try to resolve WebSocket-compatible\n * interface exposed by `ws` for Node-like environment.\n */\n\nvar WebSocketImpl = BrowserWebSocket || NodeWebSocket;\n\n/**\n * Module exports.\n */\n\nmodule.exports = WS;\n\n/**\n * WebSocket transport constructor.\n *\n * @api {Object} connection options\n * @api public\n */\n\nfunction WS (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  this.perMessageDeflate = opts.perMessageDeflate;\n  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\n  this.protocols = opts.protocols;\n  if (!this.usingBrowserWebSocket) {\n    WebSocketImpl = NodeWebSocket;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(WS, Transport);\n\n/**\n * Transport name.\n *\n * @api public\n */\n\nWS.prototype.name = 'websocket';\n\n/*\n * WebSockets support binary\n */\n\nWS.prototype.supportsBinary = true;\n\n/**\n * Opens socket.\n *\n * @api private\n */\n\nWS.prototype.doOpen = function () {\n  if (!this.check()) {\n    // let probe timeout\n    return;\n  }\n\n  var uri = this.uri();\n  var protocols = this.protocols;\n\n  var opts = {};\n\n  if (!this.isReactNative) {\n    opts.agent = this.agent;\n    opts.perMessageDeflate = this.perMessageDeflate;\n\n    // SSL options for Node.js client\n    opts.pfx = this.pfx;\n    opts.key = this.key;\n    opts.passphrase = this.passphrase;\n    opts.cert = this.cert;\n    opts.ca = this.ca;\n    opts.ciphers = this.ciphers;\n    opts.rejectUnauthorized = this.rejectUnauthorized;\n  }\n\n  if (this.extraHeaders) {\n    opts.headers = this.extraHeaders;\n  }\n  if (this.localAddress) {\n    opts.localAddress = this.localAddress;\n  }\n\n  try {\n    this.ws =\n      this.usingBrowserWebSocket && !this.isReactNative\n        ? protocols\n          ? new WebSocketImpl(uri, protocols)\n          : new WebSocketImpl(uri)\n        : new WebSocketImpl(uri, protocols, opts);\n  } catch (err) {\n    return this.emit('error', err);\n  }\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  if (this.ws.supports && this.ws.supports.binary) {\n    this.supportsBinary = true;\n    this.ws.binaryType = 'nodebuffer';\n  } else {\n    this.ws.binaryType = 'arraybuffer';\n  }\n\n  this.addEventListeners();\n};\n\n/**\n * Adds event listeners to the socket\n *\n * @api private\n */\n\nWS.prototype.addEventListeners = function () {\n  var self = this;\n\n  this.ws.onopen = function () {\n    self.onOpen();\n  };\n  this.ws.onclose = function () {\n    self.onClose();\n  };\n  this.ws.onmessage = function (ev) {\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function (e) {\n    self.onError('websocket error', e);\n  };\n};\n\n/**\n * Writes data to socket.\n *\n * @param {Array} array of packets.\n * @api private\n */\n\nWS.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n\n  // encodePacket efficient as it uses WS framing\n  // no need for encodePayload\n  var total = packets.length;\n  for (var i = 0, l = total; i < l; i++) {\n    (function (packet) {\n      parser.encodePacket(packet, self.supportsBinary, function (data) {\n        if (!self.usingBrowserWebSocket) {\n          // always create a new object (GH-437)\n          var opts = {};\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (self.perMessageDeflate) {\n            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;\n            if (len < self.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (self.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            self.ws.send(data);\n          } else {\n            self.ws.send(data, opts);\n          }\n        } catch (e) {\n          debug('websocket closed before onclose event');\n        }\n\n        --total || done();\n      });\n    })(packets[i]);\n  }\n\n  function done () {\n    self.emit('flush');\n\n    // fake drain\n    // defer to next tick to allow Socket to clear writeBuffer\n    setTimeout(function () {\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n};\n\n/**\n * Called upon close\n *\n * @api private\n */\n\nWS.prototype.onClose = function () {\n  Transport.prototype.onClose.call(this);\n};\n\n/**\n * Closes socket.\n *\n * @api private\n */\n\nWS.prototype.doClose = function () {\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nWS.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  // avoid port if default for schema\n  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\n    ('ws' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // append timestamp to URI\n  if (this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  // communicate binary support capabilities\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\n/**\n * Feature detection for WebSocket.\n *\n * @return {Boolean} whether this transport is available.\n * @api public\n */\n\nWS.prototype.check = function () {\n  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/transports/websocket.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/lib/xmlhttprequest.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/engine.io-client/lib/xmlhttprequest.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// browser shim for xmlhttprequest module\n\nvar hasCORS = __webpack_require__(/*! has-cors */ \"../../node_modules/has-cors/index.js\");\nvar globalThis = __webpack_require__(/*! ./globalThis */ \"../../node_modules/engine.io-client/lib/globalThis.browser.js\");\n\nmodule.exports = function (opts) {\n  var xdomain = opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  var xscheme = opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  var enablesXDR = opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) { }\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) { }\n\n  if (!xdomain) {\n    try {\n      return new globalThis[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\n    } catch (e) { }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcz9mMGNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLGNBQWMsbUJBQU8sQ0FBQyxzREFBVTtBQUNoQyxpQkFBaUIsbUJBQU8sQ0FBQyxtRkFBYzs7QUFFdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFlBQVk7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFlBQVk7O0FBRWY7QUFDQTtBQUNBO0FBQ0EsS0FBSyxZQUFZO0FBQ2pCO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuL2dsb2JhbFRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgdmFyIGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpc1tbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/lib/xmlhttprequest.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/node_modules/debug/src/browser.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/engine.io-client/node_modules/debug/src/browser.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(/*! ./debug */ \"../../node_modules/engine.io-client/node_modules/debug/src/debug.js\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/node_modules/debug/src/debug.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/engine.io-client/node_modules/debug/src/debug.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"../../node_modules/engine.io-client/node_modules/ms/index.js\");\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/node_modules/debug/src/debug.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-client/node_modules/ms/index.js":
/*!********************************************************************!*\
  !*** ../../node_modules/engine.io-client/node_modules/ms/index.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcz9iZDNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsT0FBTztBQUNsQixZQUFZLE1BQU07QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-client/node_modules/ms/index.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-parser/lib/browser.js":
/*!**********************************************************!*\
  !*** ../../node_modules/engine.io-parser/lib/browser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nvar keys = __webpack_require__(/*! ./keys */ \"../../node_modules/engine.io-parser/lib/keys.js\");\nvar hasBinary = __webpack_require__(/*! has-binary2 */ \"../../node_modules/has-binary2/index.js\");\nvar sliceBuffer = __webpack_require__(/*! arraybuffer.slice */ \"../../node_modules/arraybuffer.slice/index.js\");\nvar after = __webpack_require__(/*! after */ \"../../node_modules/after/index.js\");\nvar utf8 = __webpack_require__(/*! ./utf8 */ \"../../node_modules/engine.io-parser/lib/utf8.js\");\n\nvar base64encoder;\nif (typeof ArrayBuffer !== 'undefined') {\n  base64encoder = __webpack_require__(/*! base64-arraybuffer */ \"../../node_modules/base64-arraybuffer/lib/base64-arraybuffer.js\");\n}\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = __webpack_require__(/*! blob */ \"../../node_modules/blob/index.js\");\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n  // String data\n  if (typeof data === 'string') {\n    if (data.charAt(0) === 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n      if (data === false) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, { strict: false });\n  } catch (e) {\n    return false;\n  }\n  return data;\n}\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!base64encoder) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data !== 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '', n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    }\n\n    if (length === '' || (length != (n = Number(length)))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = exports.decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var ret = callback(packet, i + n, l);\n      if (false === ret) return;\n    }\n\n    // advance cursor\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] === 255) break;\n\n      // 310 = char length of Number.MAX_VALUE\n      if (msgLength.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-parser/lib/browser.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-parser/lib/keys.js":
/*!*******************************************************!*\
  !*** ../../node_modules/engine.io-parser/lib/keys.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n/**\n * Gets the keys for an object.\n *\n * @return {Array} keys\n * @api private\n */\n\nmodule.exports = Object.keys || function keys (obj){\n  var arr = [];\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var i in obj) {\n    if (has.call(obj, i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzPzRkOWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBHZXRzIHRoZSBrZXlzIGZvciBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybiB7QXJyYXl9IGtleXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyAob2JqKXtcbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGkpKSB7XG4gICAgICBhcnIucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-parser/lib/keys.js\n");

/***/ }),

/***/ "../../node_modules/engine.io-parser/lib/utf8.js":
/*!*******************************************************!*\
  !*** ../../node_modules/engine.io-parser/lib/utf8.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("/*! https://mths.be/utf8js v2.1.2 by @mathias */\n\nvar stringFromCharCode = String.fromCharCode;\n\n// Taken from https://mths.be/punycode\nfunction ucs2decode(string) {\n\tvar output = [];\n\tvar counter = 0;\n\tvar length = string.length;\n\tvar value;\n\tvar extra;\n\twhile (counter < length) {\n\t\tvalue = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// high surrogate, and there is a next character\n\t\t\textra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n// Taken from https://mths.be/punycode\nfunction ucs2encode(array) {\n\tvar length = array.length;\n\tvar index = -1;\n\tvar value;\n\tvar output = '';\n\twhile (++index < length) {\n\t\tvalue = array[index];\n\t\tif (value > 0xFFFF) {\n\t\t\tvalue -= 0x10000;\n\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t}\n\t\toutput += stringFromCharCode(value);\n\t}\n\treturn output;\n}\n\nfunction checkScalarValue(codePoint, strict) {\n\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\tif (strict) {\n\t\t\tthrow Error(\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t' is not a scalar value'\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n/*--------------------------------------------------------------------------*/\n\nfunction createByte(codePoint, shift) {\n\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n}\n\nfunction encodeCodePoint(codePoint, strict) {\n\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\treturn stringFromCharCode(codePoint);\n\t}\n\tvar symbol = '';\n\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t}\n\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\tif (!checkScalarValue(codePoint, strict)) {\n\t\t\tcodePoint = 0xFFFD;\n\t\t}\n\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\tsymbol += createByte(codePoint, 6);\n\t}\n\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\tsymbol += createByte(codePoint, 12);\n\t\tsymbol += createByte(codePoint, 6);\n\t}\n\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\treturn symbol;\n}\n\nfunction utf8encode(string, opts) {\n\topts = opts || {};\n\tvar strict = false !== opts.strict;\n\n\tvar codePoints = ucs2decode(string);\n\tvar length = codePoints.length;\n\tvar index = -1;\n\tvar codePoint;\n\tvar byteString = '';\n\twhile (++index < length) {\n\t\tcodePoint = codePoints[index];\n\t\tbyteString += encodeCodePoint(codePoint, strict);\n\t}\n\treturn byteString;\n}\n\n/*--------------------------------------------------------------------------*/\n\nfunction readContinuationByte() {\n\tif (byteIndex >= byteCount) {\n\t\tthrow Error('Invalid byte index');\n\t}\n\n\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\tbyteIndex++;\n\n\tif ((continuationByte & 0xC0) == 0x80) {\n\t\treturn continuationByte & 0x3F;\n\t}\n\n\t// If we end up here, it’s not a continuation byte\n\tthrow Error('Invalid continuation byte');\n}\n\nfunction decodeSymbol(strict) {\n\tvar byte1;\n\tvar byte2;\n\tvar byte3;\n\tvar byte4;\n\tvar codePoint;\n\n\tif (byteIndex > byteCount) {\n\t\tthrow Error('Invalid byte index');\n\t}\n\n\tif (byteIndex == byteCount) {\n\t\treturn false;\n\t}\n\n\t// Read first byte\n\tbyte1 = byteArray[byteIndex] & 0xFF;\n\tbyteIndex++;\n\n\t// 1-byte sequence (no continuation bytes)\n\tif ((byte1 & 0x80) == 0) {\n\t\treturn byte1;\n\t}\n\n\t// 2-byte sequence\n\tif ((byte1 & 0xE0) == 0xC0) {\n\t\tbyte2 = readContinuationByte();\n\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\tif (codePoint >= 0x80) {\n\t\t\treturn codePoint;\n\t\t} else {\n\t\t\tthrow Error('Invalid continuation byte');\n\t\t}\n\t}\n\n\t// 3-byte sequence (may include unpaired surrogates)\n\tif ((byte1 & 0xF0) == 0xE0) {\n\t\tbyte2 = readContinuationByte();\n\t\tbyte3 = readContinuationByte();\n\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\tif (codePoint >= 0x0800) {\n\t\t\treturn checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;\n\t\t} else {\n\t\t\tthrow Error('Invalid continuation byte');\n\t\t}\n\t}\n\n\t// 4-byte sequence\n\tif ((byte1 & 0xF8) == 0xF0) {\n\t\tbyte2 = readContinuationByte();\n\t\tbyte3 = readContinuationByte();\n\t\tbyte4 = readContinuationByte();\n\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\n\t\t\t(byte3 << 0x06) | byte4;\n\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\treturn codePoint;\n\t\t}\n\t}\n\n\tthrow Error('Invalid UTF-8 detected');\n}\n\nvar byteArray;\nvar byteCount;\nvar byteIndex;\nfunction utf8decode(byteString, opts) {\n\topts = opts || {};\n\tvar strict = false !== opts.strict;\n\n\tbyteArray = ucs2decode(byteString);\n\tbyteCount = byteArray.length;\n\tbyteIndex = 0;\n\tvar codePoints = [];\n\tvar tmp;\n\twhile ((tmp = decodeSymbol(strict)) !== false) {\n\t\tcodePoints.push(tmp);\n\t}\n\treturn ucs2encode(codePoints);\n}\n\nmodule.exports = {\n\tversion: '2.1.2',\n\tencode: utf8encode,\n\tdecode: utf8decode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi91dGY4LmpzP2EzZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0EsSUFBSTtBQUNKLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBodHRwczovL210aHMuYmUvdXRmOGpzIHYyLjEuMiBieSBAbWF0aGlhcyAqL1xuXG52YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuLy8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcbmZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdHZhciBvdXRwdXQgPSBbXTtcblx0dmFyIGNvdW50ZXIgPSAwO1xuXHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0dmFyIHZhbHVlO1xuXHR2YXIgZXh0cmE7XG5cdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHR2YXIgaW5kZXggPSAtMTtcblx0dmFyIHZhbHVlO1xuXHR2YXIgb3V0cHV0ID0gJyc7XG5cdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0dmFsdWUgPSBhcnJheVtpbmRleF07XG5cdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0fVxuXHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikge1xuXHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdHRocm93IEVycm9yKFxuXHRcdFx0XHQnTG9uZSBzdXJyb2dhdGUgVSsnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICtcblx0XHRcdFx0JyBpcyBub3QgYSBzY2FsYXIgdmFsdWUnXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRydWU7XG59XG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZnVuY3Rpb24gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIHNoaWZ0KSB7XG5cdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gc2hpZnQpICYgMHgzRikgfCAweDgwKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRkY4MCkgPT0gMCkgeyAvLyAxLWJ5dGUgc2VxdWVuY2Vcblx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdH1cblx0dmFyIHN5bWJvbCA9ICcnO1xuXHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDYpICYgMHgxRikgfCAweEMwKTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRpZiAoIWNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSAweEZGRkQ7XG5cdFx0fVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxMikgJiAweDBGKSB8IDB4RTApO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7XG5cdH1cblx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZFMDAwMDApID09IDApIHsgLy8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDE4KSAmIDB4MDcpIHwgMHhGMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRyZXR1cm4gc3ltYm9sO1xufVxuXG5mdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0dmFyIGxlbmd0aCA9IGNvZGVQb2ludHMubGVuZ3RoO1xuXHR2YXIgaW5kZXggPSAtMTtcblx0dmFyIGNvZGVQb2ludDtcblx0dmFyIGJ5dGVTdHJpbmcgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRieXRlU3RyaW5nICs9IGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCk7XG5cdH1cblx0cmV0dXJuIGJ5dGVTdHJpbmc7XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0aWYgKGJ5dGVJbmRleCA+PSBieXRlQ291bnQpIHtcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7XG5cdH1cblxuXHR2YXIgY29udGludWF0aW9uQnl0ZSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0Ynl0ZUluZGV4Kys7XG5cblx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdHJldHVybiBjb250aW51YXRpb25CeXRlICYgMHgzRjtcblx0fVxuXG5cdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlU3ltYm9sKHN0cmljdCkge1xuXHR2YXIgYnl0ZTE7XG5cdHZhciBieXRlMjtcblx0dmFyIGJ5dGUzO1xuXHR2YXIgYnl0ZTQ7XG5cdHZhciBjb2RlUG9pbnQ7XG5cblx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdGJ5dGUxID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0aWYgKChieXRlMSAmIDB4ODApID09IDApIHtcblx0XHRyZXR1cm4gYnl0ZTE7XG5cdH1cblxuXHQvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0aWYgKChieXRlMSAmIDB4RTApID09IDB4QzApIHtcblx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MUYpIDw8IDYpIHwgYnl0ZTI7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDgwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdH1cblx0fVxuXG5cdC8vIDMtYnl0ZSBzZXF1ZW5jZSAobWF5IGluY2x1ZGUgdW5wYWlyZWQgc3Vycm9nYXRlcylcblx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Ynl0ZTMgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRpZiAoY29kZVBvaW50ID49IDB4MDgwMCkge1xuXHRcdFx0cmV0dXJuIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpID8gY29kZVBvaW50IDogMHhGRkZEO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdH1cblx0fVxuXG5cdC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhGOCkgPT0gMHhGMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Ynl0ZTQgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHQoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4MDEwMDAwICYmIGNvZGVQb2ludCA8PSAweDEwRkZGRikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHR9XG5cdH1cblxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xufVxuXG52YXIgYnl0ZUFycmF5O1xudmFyIGJ5dGVDb3VudDtcbnZhciBieXRlSW5kZXg7XG5mdW5jdGlvbiB1dGY4ZGVjb2RlKGJ5dGVTdHJpbmcsIG9wdHMpIHtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0Ynl0ZUFycmF5ID0gdWNzMmRlY29kZShieXRlU3RyaW5nKTtcblx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0Ynl0ZUluZGV4ID0gMDtcblx0dmFyIGNvZGVQb2ludHMgPSBbXTtcblx0dmFyIHRtcDtcblx0d2hpbGUgKCh0bXAgPSBkZWNvZGVTeW1ib2woc3RyaWN0KSkgIT09IGZhbHNlKSB7XG5cdFx0Y29kZVBvaW50cy5wdXNoKHRtcCk7XG5cdH1cblx0cmV0dXJuIHVjczJlbmNvZGUoY29kZVBvaW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHR2ZXJzaW9uOiAnMi4xLjInLFxuXHRlbmNvZGU6IHV0ZjhlbmNvZGUsXG5cdGRlY29kZTogdXRmOGRlY29kZVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/engine.io-parser/lib/utf8.js\n");

/***/ }),

/***/ "../../node_modules/events/events.js":
/*!*******************************************!*\
  !*** ../../node_modules/events/events.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/events/events.js\n");

/***/ }),

/***/ "../../node_modules/has-binary2/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/has-binary2/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* global Blob File */\n\n/*\n * Module requirements.\n */\n\nvar isArray = __webpack_require__(/*! isarray */ \"../../node_modules/isarray/index.js\");\n\nvar toString = Object.prototype.toString;\nvar withNativeBlob = typeof Blob === 'function' ||\n                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';\nvar withNativeFile = typeof File === 'function' ||\n                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';\n\n/**\n * Module exports.\n */\n\nmodule.exports = hasBinary;\n\n/**\n * Checks for binary data.\n *\n * Supports Buffer, ArrayBuffer, Blob and File.\n *\n * @param {Object} anything\n * @api public\n */\n\nfunction hasBinary (obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  if (isArray(obj)) {\n    for (var i = 0, l = obj.length; i < l; i++) {\n      if (hasBinary(obj[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||\n    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||\n    (withNativeBlob && obj instanceof Blob) ||\n    (withNativeFile && obj instanceof File)\n  ) {\n    return true;\n  }\n\n  // see: https://github.com/Automattic/has-binary/pull/4\n  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {\n    return hasBinary(obj.toJSON(), true);\n  }\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9pbmRleC5qcz9kNjI0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLG1CQUFPLENBQUMsb0RBQVM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIEJsb2IgRmlsZSAqL1xuXG4vKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gaGFzQmluYXJ5O1xuXG4vKipcbiAqIENoZWNrcyBmb3IgYmluYXJ5IGRhdGEuXG4gKlxuICogU3VwcG9ydHMgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQmxvYiBhbmQgRmlsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW55dGhpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzQmluYXJ5IChvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoaGFzQmluYXJ5KG9ialtpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBCdWZmZXIuaXNCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHxcbiAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSlcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2hhcy1iaW5hcnkvcHVsbC80XG4gIGlmIChvYmoudG9KU09OICYmIHR5cGVvZiBvYmoudG9KU09OID09PSAnZnVuY3Rpb24nICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgaGFzQmluYXJ5KG9ialtrZXldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/has-binary2/index.js\n");

/***/ }),

/***/ "../../node_modules/has-cors/index.js":
/*!********************************************!*\
  !*** ../../node_modules/has-cors/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\n    'withCredentials' in new XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports = false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcz8zZDQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/has-cors/index.js\n");

/***/ }),

/***/ "../../node_modules/indexof/index.js":
/*!*******************************************!*\
  !*** ../../node_modules/indexof/index.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzP2Q1N2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/indexof/index.js\n");

/***/ }),

/***/ "../../node_modules/isarray/index.js":
/*!*******************************************!*\
  !*** ../../node_modules/isarray/index.js ***!
  \*******************************************/
/***/ ((module) => {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzPzQ2NWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/isarray/index.js\n");

/***/ }),

/***/ "../../node_modules/parseqs/index.js":
/*!*******************************************!*\
  !*** ../../node_modules/parseqs/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\n\nexports.encode = function (obj) {\n  var str = '';\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (str.length) str += '&';\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n    }\n  }\n\n  return str;\n};\n\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\n\nexports.decode = function(qs){\n  var qry = {};\n  var pairs = qs.split('&');\n  for (var i = 0, l = pairs.length; i < l; i++) {\n    var pair = pairs[i].split('=');\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n  }\n  return qry;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzP2U1ZDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7O0FBRUEsY0FBYztBQUNkO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHN0ciA9ICcnO1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHFzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcbiAgdmFyIHFyeSA9IHt9O1xuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgfVxuICByZXR1cm4gcXJ5O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/parseqs/index.js\n");

/***/ }),

/***/ "../../node_modules/parseuri/index.js":
/*!********************************************!*\
  !*** ../../node_modules/parseuri/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\n\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports = function parseuri(str) {\n    var src = str,\n        b = str.indexOf('['),\n        e = str.indexOf(']');\n\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n\n    var m = re.exec(str || ''),\n        uri = {},\n        i = 14;\n\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n\n    return uri;\n};\n\nfunction pathNames(obj, path) {\n    var regx = /\\/{2,9}/g,\n        names = path.replace(regx, \"/\").split(\"/\");\n\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n\n    return names;\n}\n\nfunction queryKey(uri, query) {\n    var data = {};\n\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcz81NWQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5R0FBeUcsSUFBSSxHQUFHLElBQUksU0FBUyxJQUFJOztBQUVqSTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3RUFBd0U7QUFDeEU7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEUsa0ZBQWtGO0FBQ2xGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLElBQUk7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBhcnNlcyBhbiBVUklcbiAqXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcblxudmFyIHBhcnRzID0gW1xuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcbiAgICB2YXIgc3JjID0gc3RyLFxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXG4gICAgICAgIHVyaSA9IHt9LFxuICAgICAgICBpID0gMTQ7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xuICAgIH1cblxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJpLnBhdGhOYW1lcyA9IHBhdGhOYW1lcyh1cmksIHVyaVsncGF0aCddKTtcbiAgICB1cmkucXVlcnlLZXkgPSBxdWVyeUtleSh1cmksIHVyaVsncXVlcnknXSk7XG5cbiAgICByZXR1cm4gdXJpO1xufTtcblxuZnVuY3Rpb24gcGF0aE5hbWVzKG9iaiwgcGF0aCkge1xuICAgIHZhciByZWd4ID0gL1xcL3syLDl9L2csXG4gICAgICAgIG5hbWVzID0gcGF0aC5yZXBsYWNlKHJlZ3gsIFwiL1wiKS5zcGxpdChcIi9cIik7XG5cbiAgICBpZiAocGF0aC5zdWJzdHIoMCwgMSkgPT0gJy8nIHx8IHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZSgwLCAxKTtcbiAgICB9XG4gICAgaWYgKHBhdGguc3Vic3RyKHBhdGgubGVuZ3RoIC0gMSwgMSkgPT0gJy8nKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZShuYW1lcy5sZW5ndGggLSAxLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZXM7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5S2V5KHVyaSwgcXVlcnkpIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgcXVlcnkucmVwbGFjZSgvKD86XnwmKShbXiY9XSopPT8oW14mXSopL2csIGZ1bmN0aW9uICgkMCwgJDEsICQyKSB7XG4gICAgICAgIGlmICgkMSkge1xuICAgICAgICAgICAgZGF0YVskMV0gPSAkMjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/parseuri/index.js\n");

/***/ }),

/***/ "../../node_modules/path-browserify/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/path-browserify/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanM/YTBkNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQyw4QkFBOEI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLHlCQUF5QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLHFCQUFxQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxhQUFhO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EsV0FBVztBQUNYO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBLFdBQVc7QUFDWDtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWdEO0FBQ2hEO0FBQ0EsS0FBSztBQUNMLCtCQUErQixRQUFRO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0Y7QUFDcEY7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOERBQThEOztBQUU5RDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gJ3BhdGgnIG1vZHVsZSBleHRyYWN0ZWQgZnJvbSBOb2RlLmpzIHY4LjExLjEgKG9ubHkgdGhlIHBvc2l4IHBhcnQpXG4vLyB0cmFuc3BsaXRlZCB3aXRoIEJhYmVsXG5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzc2VydFBhdGgocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGF0aCBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkocGF0aCkpO1xuICB9XG59XG5cbi8vIFJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCB3aXRoIGRpcmVjdG9yeSBuYW1lc1xuZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nUG9zaXgocGF0aCwgYWxsb3dBYm92ZVJvb3QpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xuICB2YXIgbGFzdFNsYXNoID0gLTE7XG4gIHZhciBkb3RzID0gMDtcbiAgdmFyIGNvZGU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IHBhdGgubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKVxuICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICBlbHNlIGlmIChjb2RlID09PSA0NyAvKi8qLylcbiAgICAgIGJyZWFrO1xuICAgIGVsc2VcbiAgICAgIGNvZGUgPSA0NyAvKi8qLztcbiAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgIGlmIChsYXN0U2xhc2ggPT09IGkgLSAxIHx8IGRvdHMgPT09IDEpIHtcbiAgICAgICAgLy8gTk9PUFxuICAgICAgfSBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGkgLSAxICYmIGRvdHMgPT09IDIpIHtcbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPCAyIHx8IGxhc3RTZWdtZW50TGVuZ3RoICE9PSAyIHx8IHJlcy5jaGFyQ29kZUF0KHJlcy5sZW5ndGggLSAxKSAhPT0gNDYgLyouKi8gfHwgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDIpICE9PSA0NiAvKi4qLykge1xuICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgdmFyIGxhc3RTbGFzaEluZGV4ID0gcmVzLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggIT09IHJlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVzLnNsaWNlKDAsIGxhc3RTbGFzaEluZGV4KTtcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IHJlcy5sZW5ndGggLSAxIC0gcmVzLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcbiAgICAgICAgICAgICAgZG90cyA9IDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzLmxlbmd0aCA9PT0gMiB8fCByZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXMgKz0gJy8uLic7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmVzID0gJy4uJztcbiAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXMubGVuZ3RoID4gMClcbiAgICAgICAgICByZXMgKz0gJy8nICsgcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlcyA9IHBhdGguc2xpY2UobGFzdFNsYXNoICsgMSwgaSk7XG4gICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gaSAtIGxhc3RTbGFzaCAtIDE7XG4gICAgICB9XG4gICAgICBsYXN0U2xhc2ggPSBpO1xuICAgICAgZG90cyA9IDA7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSA0NiAvKi4qLyAmJiBkb3RzICE9PSAtMSkge1xuICAgICAgKytkb3RzO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb3RzID0gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIF9mb3JtYXQoc2VwLCBwYXRoT2JqZWN0KSB7XG4gIHZhciBkaXIgPSBwYXRoT2JqZWN0LmRpciB8fCBwYXRoT2JqZWN0LnJvb3Q7XG4gIHZhciBiYXNlID0gcGF0aE9iamVjdC5iYXNlIHx8IChwYXRoT2JqZWN0Lm5hbWUgfHwgJycpICsgKHBhdGhPYmplY3QuZXh0IHx8ICcnKTtcbiAgaWYgKCFkaXIpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICBpZiAoZGlyID09PSBwYXRoT2JqZWN0LnJvb3QpIHtcbiAgICByZXR1cm4gZGlyICsgYmFzZTtcbiAgfVxuICByZXR1cm4gZGlyICsgc2VwICsgYmFzZTtcbn1cblxudmFyIHBvc2l4ID0ge1xuICAvLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgdmFyIHJlc29sdmVkUGF0aCA9ICcnO1xuICAgIHZhciByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG4gICAgdmFyIGN3ZDtcblxuICAgIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgICB2YXIgcGF0aDtcbiAgICAgIGlmIChpID49IDApXG4gICAgICAgIHBhdGggPSBhcmd1bWVudHNbaV07XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGN3ZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgIGN3ZCA9IHByb2Nlc3MuY3dkKCk7XG4gICAgICAgIHBhdGggPSBjd2Q7XG4gICAgICB9XG5cbiAgICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICAgIC8vIFNraXAgZW1wdHkgZW50cmllc1xuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyovKi87XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAgIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gICAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplU3RyaW5nUG9zaXgocmVzb2x2ZWRQYXRoLCAhcmVzb2x2ZWRBYnNvbHV0ZSk7XG5cbiAgICBpZiAocmVzb2x2ZWRBYnNvbHV0ZSkge1xuICAgICAgaWYgKHJlc29sdmVkUGF0aC5sZW5ndGggPiAwKVxuICAgICAgICByZXR1cm4gJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gJy8nO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiByZXNvbHZlZFBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnLic7XG4gICAgfVxuICB9LFxuXG4gIG5vcm1hbGl6ZTogZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gJy4nO1xuXG4gICAgdmFyIGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3IC8qLyovO1xuICAgIHZhciB0cmFpbGluZ1NlcGFyYXRvciA9IHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSA0NyAvKi8qLztcblxuICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICAgIHBhdGggPSBub3JtYWxpemVTdHJpbmdQb3NpeChwYXRoLCAhaXNBYnNvbHV0ZSk7XG5cbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDAgJiYgIWlzQWJzb2x1dGUpIHBhdGggPSAnLic7XG4gICAgaWYgKHBhdGgubGVuZ3RoID4gMCAmJiB0cmFpbGluZ1NlcGFyYXRvcikgcGF0aCArPSAnLyc7XG5cbiAgICBpZiAoaXNBYnNvbHV0ZSkgcmV0dXJuICcvJyArIHBhdGg7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0sXG5cbiAgaXNBYnNvbHV0ZTogZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICByZXR1cm4gcGF0aC5sZW5ndGggPiAwICYmIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyovKi87XG4gIH0sXG5cbiAgam9pbjogZnVuY3Rpb24gam9pbigpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiAnLic7XG4gICAgdmFyIGpvaW5lZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGFzc2VydFBhdGgoYXJnKTtcbiAgICAgIGlmIChhcmcubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgam9pbmVkID0gYXJnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgam9pbmVkICs9ICcvJyArIGFyZztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuICcuJztcbiAgICByZXR1cm4gcG9zaXgubm9ybWFsaXplKGpvaW5lZCk7XG4gIH0sXG5cbiAgcmVsYXRpdmU6IGZ1bmN0aW9uIHJlbGF0aXZlKGZyb20sIHRvKSB7XG4gICAgYXNzZXJ0UGF0aChmcm9tKTtcbiAgICBhc3NlcnRQYXRoKHRvKTtcblxuICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuICcnO1xuXG4gICAgZnJvbSA9IHBvc2l4LnJlc29sdmUoZnJvbSk7XG4gICAgdG8gPSBwb3NpeC5yZXNvbHZlKHRvKTtcblxuICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuICcnO1xuXG4gICAgLy8gVHJpbSBhbnkgbGVhZGluZyBiYWNrc2xhc2hlc1xuICAgIHZhciBmcm9tU3RhcnQgPSAxO1xuICAgIGZvciAoOyBmcm9tU3RhcnQgPCBmcm9tLmxlbmd0aDsgKytmcm9tU3RhcnQpIHtcbiAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0KSAhPT0gNDcgLyovKi8pXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZnJvbUVuZCA9IGZyb20ubGVuZ3RoO1xuICAgIHZhciBmcm9tTGVuID0gZnJvbUVuZCAtIGZyb21TdGFydDtcblxuICAgIC8vIFRyaW0gYW55IGxlYWRpbmcgYmFja3NsYXNoZXNcbiAgICB2YXIgdG9TdGFydCA9IDE7XG4gICAgZm9yICg7IHRvU3RhcnQgPCB0by5sZW5ndGg7ICsrdG9TdGFydCkge1xuICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCkgIT09IDQ3IC8qLyovKVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIHRvRW5kID0gdG8ubGVuZ3RoO1xuICAgIHZhciB0b0xlbiA9IHRvRW5kIC0gdG9TdGFydDtcblxuICAgIC8vIENvbXBhcmUgcGF0aHMgdG8gZmluZCB0aGUgbG9uZ2VzdCBjb21tb24gcGF0aCBmcm9tIHJvb3RcbiAgICB2YXIgbGVuZ3RoID0gZnJvbUxlbiA8IHRvTGVuID8gZnJvbUxlbiA6IHRvTGVuO1xuICAgIHZhciBsYXN0Q29tbW9uU2VwID0gLTE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDw9IGxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoaSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgIGlmICh0b0xlbiA+IGxlbmd0aCkge1xuICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGBmcm9tYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgdG9gLlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyJzsgdG89Jy9mb28vYmFyL2JheidcbiAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSArIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSByb290XG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nLyc7IHRvPScvZm9vJ1xuICAgICAgICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQgKyBpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZnJvbUxlbiA+IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgdG9gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGBmcm9tYC5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvZm9vL2Jhci9iYXonOyB0bz0nL2Zvby9iYXInXG4gICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIHJvb3QuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvbyc7IHRvPScvJ1xuICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFyIGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpO1xuICAgICAgdmFyIHRvQ29kZSA9IHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpO1xuICAgICAgaWYgKGZyb21Db2RlICE9PSB0b0NvZGUpXG4gICAgICAgIGJyZWFrO1xuICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IDQ3IC8qLyovKVxuICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgLy8gR2VuZXJhdGUgdGhlIHJlbGF0aXZlIHBhdGggYmFzZWQgb24gdGhlIHBhdGggZGlmZmVyZW5jZSBiZXR3ZWVuIGB0b2BcbiAgICAvLyBhbmQgYGZyb21gXG4gICAgZm9yIChpID0gZnJvbVN0YXJ0ICsgbGFzdENvbW1vblNlcCArIDE7IGkgPD0gZnJvbUVuZDsgKytpKSB7XG4gICAgICBpZiAoaSA9PT0gZnJvbUVuZCB8fCBmcm9tLmNoYXJDb2RlQXQoaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmIChvdXQubGVuZ3RoID09PSAwKVxuICAgICAgICAgIG91dCArPSAnLi4nO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgb3V0ICs9ICcvLi4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIExhc3RseSwgYXBwZW5kIHRoZSByZXN0IG9mIHRoZSBkZXN0aW5hdGlvbiAoYHRvYCkgcGF0aCB0aGF0IGNvbWVzIGFmdGVyXG4gICAgLy8gdGhlIGNvbW1vbiBwYXRoIHBhcnRzXG4gICAgaWYgKG91dC5sZW5ndGggPiAwKVxuICAgICAgcmV0dXJuIG91dCArIHRvLnNsaWNlKHRvU3RhcnQgKyBsYXN0Q29tbW9uU2VwKTtcbiAgICBlbHNlIHtcbiAgICAgIHRvU3RhcnQgKz0gbGFzdENvbW1vblNlcDtcbiAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQpID09PSA0NyAvKi8qLylcbiAgICAgICAgKyt0b1N0YXJ0O1xuICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQpO1xuICAgIH1cbiAgfSxcblxuICBfbWFrZUxvbmc6IGZ1bmN0aW9uIF9tYWtlTG9uZyhwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0sXG5cbiAgZGlybmFtZTogZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NyAvKi8qLztcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHtcbiAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nO1xuICAgIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkgcmV0dXJuICcvLyc7XG4gICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbiAgfSxcblxuICBiYXNlbmFtZTogZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleHQgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImV4dFwiIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuXG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQgJiYgZXh0Lmxlbmd0aCA+IDAgJiYgZXh0Lmxlbmd0aCA8PSBwYXRoLmxlbmd0aCkge1xuICAgICAgaWYgKGV4dC5sZW5ndGggPT09IHBhdGgubGVuZ3RoICYmIGV4dCA9PT0gcGF0aCkgcmV0dXJuICcnO1xuICAgICAgdmFyIGV4dElkeCA9IGV4dC5sZW5ndGggLSAxO1xuICAgICAgdmFyIGZpcnN0Tm9uU2xhc2hFbmQgPSAtMTtcbiAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmlyc3ROb25TbGFzaEVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCByZW1lbWJlciB0aGlzIGluZGV4IGluIGNhc2VcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZ1xuICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChleHRJZHggPj0gMCkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIHRoZSBleHBsaWNpdCBleHRlbnNpb25cbiAgICAgICAgICAgIGlmIChjb2RlID09PSBleHQuY2hhckNvZGVBdChleHRJZHgpKSB7XG4gICAgICAgICAgICAgIGlmICgtLWV4dElkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRXh0ZW5zaW9uIGRvZXMgbm90IG1hdGNoLCBzbyBvdXIgcmVzdWx0IGlzIHRoZSBlbnRpcmUgcGF0aFxuICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgZXh0SWR4ID0gLTE7XG4gICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydCA9PT0gZW5kKSBlbmQgPSBmaXJzdE5vblNsYXNoRW5kO2Vsc2UgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IHBhdGgubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmQgPT09IC0xKSByZXR1cm4gJyc7XG4gICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9XG4gIH0sXG5cbiAgZXh0bmFtZTogZnVuY3Rpb24gZXh0bmFtZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAgIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gICAgdmFyIHByZURvdFN0YXRlID0gMDtcbiAgICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICAgIHN0YXJ0RG90ID0gaTtcbiAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSlcbiAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgICAgcHJlRG90U3RhdGUgPT09IDEgJiYgc3RhcnREb3QgPT09IGVuZCAtIDEgJiYgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG4gIH0sXG5cbiAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQocGF0aE9iamVjdCkge1xuICAgIGlmIChwYXRoT2JqZWN0ID09PSBudWxsIHx8IHR5cGVvZiBwYXRoT2JqZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwicGF0aE9iamVjdFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBwYXRoT2JqZWN0KTtcbiAgICB9XG4gICAgcmV0dXJuIF9mb3JtYXQoJy8nLCBwYXRoT2JqZWN0KTtcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24gcGFyc2UocGF0aCkge1xuICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICB2YXIgcmV0ID0geyByb290OiAnJywgZGlyOiAnJywgYmFzZTogJycsIGV4dDogJycsIG5hbWU6ICcnIH07XG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gcmV0O1xuICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBpc0Fic29sdXRlID0gY29kZSA9PT0gNDcgLyovKi87XG4gICAgdmFyIHN0YXJ0O1xuICAgIGlmIChpc0Fic29sdXRlKSB7XG4gICAgICByZXQucm9vdCA9ICcvJztcbiAgICAgIHN0YXJ0ID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgdmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7XG5cbiAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgICB2YXIgcHJlRG90U3RhdGUgPSAwO1xuXG4gICAgLy8gR2V0IG5vbi1kaXIgaW5mb1xuICAgIGZvciAoOyBpID49IHN0YXJ0OyAtLWkpIHtcbiAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkgc3RhcnREb3QgPSBpO2Vsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgICAgaWYgKGVuZCAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHN0YXJ0UGFydCA9PT0gMCAmJiBpc0Fic29sdXRlKSByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aC5zbGljZSgxLCBlbmQpO2Vsc2UgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhcnRQYXJ0ID09PSAwICYmIGlzQWJzb2x1dGUpIHtcbiAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIHN0YXJ0RG90KTtcbiAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKDEsIGVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBzdGFydERvdCk7XG4gICAgICAgIHJldC5iYXNlID0gcGF0aC5zbGljZShzdGFydFBhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRQYXJ0ID4gMCkgcmV0LmRpciA9IHBhdGguc2xpY2UoMCwgc3RhcnRQYXJ0IC0gMSk7ZWxzZSBpZiAoaXNBYnNvbHV0ZSkgcmV0LmRpciA9ICcvJztcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgc2VwOiAnLycsXG4gIGRlbGltaXRlcjogJzonLFxuICB3aW4zMjogbnVsbCxcbiAgcG9zaXg6IG51bGxcbn07XG5cbnBvc2l4LnBvc2l4ID0gcG9zaXg7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9zaXg7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/path-browserify/index.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/lib/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/socket.io-client/lib/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */\n\nvar url = __webpack_require__(/*! ./url */ \"../../node_modules/socket.io-client/lib/url.js\");\nvar parser = __webpack_require__(/*! socket.io-parser */ \"../../node_modules/socket.io-client/node_modules/socket.io-parser/index.js\");\nvar Manager = __webpack_require__(/*! ./manager */ \"../../node_modules/socket.io-client/lib/manager.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/socket.io-client/node_modules/debug/src/browser.js\")('socket.io-client');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = lookup;\n\n/**\n * Managers cache.\n */\n\nvar cache = exports.managers = {};\n\n/**\n * Looks up an existing `Manager` for multiplexing.\n * If the user summons:\n *\n *   `io('http://localhost/a');`\n *   `io('http://localhost/b');`\n *\n * We reuse the existing instance based on same scheme/port/host,\n * and we initialize sockets for each namespace.\n *\n * @api public\n */\n\nfunction lookup (uri, opts) {\n  if (typeof uri === 'object') {\n    opts = uri;\n    uri = undefined;\n  }\n\n  opts = opts || {};\n\n  var parsed = url(uri);\n  var source = parsed.source;\n  var id = parsed.id;\n  var path = parsed.path;\n  var sameNamespace = cache[id] && path in cache[id].nsps;\n  var newConnection = opts.forceNew || opts['force new connection'] ||\n                      false === opts.multiplex || sameNamespace;\n\n  var io;\n\n  if (newConnection) {\n    debug('ignoring socket cache for %s', source);\n    io = Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      debug('new io instance for %s', source);\n      cache[id] = Manager(source, opts);\n    }\n    io = cache[id];\n  }\n  if (parsed.query && !opts.query) {\n    opts.query = parsed.query;\n  }\n  return io.socket(parsed.path, opts);\n}\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = parser.protocol;\n\n/**\n * `connect`.\n *\n * @param {String} uri\n * @api public\n */\n\nexports.connect = lookup;\n\n/**\n * Expose constructors for standalone build.\n *\n * @api public\n */\n\nexports.Manager = __webpack_require__(/*! ./manager */ \"../../node_modules/socket.io-client/lib/manager.js\");\nexports.Socket = __webpack_require__(/*! ./socket */ \"../../node_modules/socket.io-client/lib/socket.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcz8zMGNhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxtQkFBTyxDQUFDLDZEQUFPO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxvR0FBa0I7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLHFFQUFXO0FBQ2pDLFlBQVksbUJBQU8sQ0FBQyxvRkFBTzs7QUFFM0I7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLGdCQUFnQjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTs7QUFFQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEdBQXNDO0FBQ3RDLHlHQUFvQyIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/lib/index.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/lib/manager.js":
/*!**********************************************************!*\
  !*** ../../node_modules/socket.io-client/lib/manager.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */\n\nvar eio = __webpack_require__(/*! engine.io-client */ \"../../node_modules/engine.io-client/lib/index.js\");\nvar Socket = __webpack_require__(/*! ./socket */ \"../../node_modules/socket.io-client/lib/socket.js\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"../../node_modules/component-emitter/index.js\");\nvar parser = __webpack_require__(/*! socket.io-parser */ \"../../node_modules/socket.io-client/node_modules/socket.io-parser/index.js\");\nvar on = __webpack_require__(/*! ./on */ \"../../node_modules/socket.io-client/lib/on.js\");\nvar bind = __webpack_require__(/*! component-bind */ \"../../node_modules/component-bind/index.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/socket.io-client/node_modules/debug/src/browser.js\")('socket.io-client:manager');\nvar indexOf = __webpack_require__(/*! indexof */ \"../../node_modules/indexof/index.js\");\nvar Backoff = __webpack_require__(/*! backo2 */ \"../../node_modules/backo2/index.js\");\n\n/**\n * IE6+ hasOwnProperty\n */\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Module exports\n */\n\nmodule.exports = Manager;\n\n/**\n * `Manager` constructor.\n *\n * @param {String} engine instance or engine uri/opts\n * @param {Object} options\n * @api public\n */\n\nfunction Manager (uri, opts) {\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\n  if (uri && ('object' === typeof uri)) {\n    opts = uri;\n    uri = undefined;\n  }\n  opts = opts || {};\n\n  opts.path = opts.path || '/socket.io';\n  this.nsps = {};\n  this.subs = [];\n  this.opts = opts;\n  this.reconnection(opts.reconnection !== false);\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\n  this.backoff = new Backoff({\n    min: this.reconnectionDelay(),\n    max: this.reconnectionDelayMax(),\n    jitter: this.randomizationFactor()\n  });\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n  this.readyState = 'closed';\n  this.uri = uri;\n  this.connecting = [];\n  this.lastPing = null;\n  this.encoding = false;\n  this.packetBuffer = [];\n  var _parser = opts.parser || parser;\n  this.encoder = new _parser.Encoder();\n  this.decoder = new _parser.Decoder();\n  this.autoConnect = opts.autoConnect !== false;\n  if (this.autoConnect) this.open();\n}\n\n/**\n * Propagate given event to sockets and emit on `this`\n *\n * @api private\n */\n\nManager.prototype.emitAll = function () {\n  this.emit.apply(this, arguments);\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n    }\n  }\n};\n\n/**\n * Update `socket.id` of all sockets\n *\n * @api private\n */\n\nManager.prototype.updateSocketIds = function () {\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].id = this.generateId(nsp);\n    }\n  }\n};\n\n/**\n * generate `socket.id` for the given `nsp`\n *\n * @param {String} nsp\n * @return {String}\n * @api private\n */\n\nManager.prototype.generateId = function (nsp) {\n  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;\n};\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Manager.prototype);\n\n/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnection = function (v) {\n  if (!arguments.length) return this._reconnection;\n  this._reconnection = !!v;\n  return this;\n};\n\n/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} max reconnection attempts before giving up\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionAttempts = function (v) {\n  if (!arguments.length) return this._reconnectionAttempts;\n  this._reconnectionAttempts = v;\n  return this;\n};\n\n/**\n * Sets the delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelay = function (v) {\n  if (!arguments.length) return this._reconnectionDelay;\n  this._reconnectionDelay = v;\n  this.backoff && this.backoff.setMin(v);\n  return this;\n};\n\nManager.prototype.randomizationFactor = function (v) {\n  if (!arguments.length) return this._randomizationFactor;\n  this._randomizationFactor = v;\n  this.backoff && this.backoff.setJitter(v);\n  return this;\n};\n\n/**\n * Sets the maximum delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelayMax = function (v) {\n  if (!arguments.length) return this._reconnectionDelayMax;\n  this._reconnectionDelayMax = v;\n  this.backoff && this.backoff.setMax(v);\n  return this;\n};\n\n/**\n * Sets the connection timeout. `false` to disable\n *\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.timeout = function (v) {\n  if (!arguments.length) return this._timeout;\n  this._timeout = v;\n  return this;\n};\n\n/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @api private\n */\n\nManager.prototype.maybeReconnectOnOpen = function () {\n  // Only try to reconnect if it's the first time we're connecting\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\n    // keeps reconnection from firing twice for the same reconnection loop\n    this.reconnect();\n  }\n};\n\n/**\n * Sets the current transport `socket`.\n *\n * @param {Function} optional, callback\n * @return {Manager} self\n * @api public\n */\n\nManager.prototype.open =\nManager.prototype.connect = function (fn, opts) {\n  debug('readyState %s', this.readyState);\n  if (~this.readyState.indexOf('open')) return this;\n\n  debug('opening %s', this.uri);\n  this.engine = eio(this.uri, this.opts);\n  var socket = this.engine;\n  var self = this;\n  this.readyState = 'opening';\n  this.skipReconnect = false;\n\n  // emit `open`\n  var openSub = on(socket, 'open', function () {\n    self.onopen();\n    fn && fn();\n  });\n\n  // emit `connect_error`\n  var errorSub = on(socket, 'error', function (data) {\n    debug('connect_error');\n    self.cleanup();\n    self.readyState = 'closed';\n    self.emitAll('connect_error', data);\n    if (fn) {\n      var err = new Error('Connection error');\n      err.data = data;\n      fn(err);\n    } else {\n      // Only do this if there is no fn to handle the error\n      self.maybeReconnectOnOpen();\n    }\n  });\n\n  // emit `connect_timeout`\n  if (false !== this._timeout) {\n    var timeout = this._timeout;\n    debug('connect attempt will timeout after %d', timeout);\n\n    if (timeout === 0) {\n      openSub.destroy(); // prevents a race condition with the 'open' event\n    }\n\n    // set timer\n    var timer = setTimeout(function () {\n      debug('connect attempt timed out after %d', timeout);\n      openSub.destroy();\n      socket.close();\n      socket.emit('error', 'timeout');\n      self.emitAll('connect_timeout', timeout);\n    }, timeout);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n\n  this.subs.push(openSub);\n  this.subs.push(errorSub);\n\n  return this;\n};\n\n/**\n * Called upon transport open.\n *\n * @api private\n */\n\nManager.prototype.onopen = function () {\n  debug('open');\n\n  // clear old subs\n  this.cleanup();\n\n  // mark as open\n  this.readyState = 'open';\n  this.emit('open');\n\n  // add new subs\n  var socket = this.engine;\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n};\n\n/**\n * Called upon a ping.\n *\n * @api private\n */\n\nManager.prototype.onping = function () {\n  this.lastPing = new Date();\n  this.emitAll('ping');\n};\n\n/**\n * Called upon a packet.\n *\n * @api private\n */\n\nManager.prototype.onpong = function () {\n  this.emitAll('pong', new Date() - this.lastPing);\n};\n\n/**\n * Called with data.\n *\n * @api private\n */\n\nManager.prototype.ondata = function (data) {\n  this.decoder.add(data);\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nManager.prototype.ondecoded = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon socket error.\n *\n * @api private\n */\n\nManager.prototype.onerror = function (err) {\n  debug('error', err);\n  this.emitAll('error', err);\n};\n\n/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @api public\n */\n\nManager.prototype.socket = function (nsp, opts) {\n  var socket = this.nsps[nsp];\n  if (!socket) {\n    socket = new Socket(this, nsp, opts);\n    this.nsps[nsp] = socket;\n    var self = this;\n    socket.on('connecting', onConnecting);\n    socket.on('connect', function () {\n      socket.id = self.generateId(nsp);\n    });\n\n    if (this.autoConnect) {\n      // manually call here since connecting event is fired before listening\n      onConnecting();\n    }\n  }\n\n  function onConnecting () {\n    if (!~indexOf(self.connecting, socket)) {\n      self.connecting.push(socket);\n    }\n  }\n\n  return socket;\n};\n\n/**\n * Called upon a socket close.\n *\n * @param {Socket} socket\n */\n\nManager.prototype.destroy = function (socket) {\n  var index = indexOf(this.connecting, socket);\n  if (~index) this.connecting.splice(index, 1);\n  if (this.connecting.length) return;\n\n  this.close();\n};\n\n/**\n * Writes a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nManager.prototype.packet = function (packet) {\n  debug('writing packet %j', packet);\n  var self = this;\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\n\n  if (!self.encoding) {\n    // encode, then write to engine with result\n    self.encoding = true;\n    this.encoder.encode(packet, function (encodedPackets) {\n      for (var i = 0; i < encodedPackets.length; i++) {\n        self.engine.write(encodedPackets[i], packet.options);\n      }\n      self.encoding = false;\n      self.processPacketQueue();\n    });\n  } else { // add packet to the queue\n    self.packetBuffer.push(packet);\n  }\n};\n\n/**\n * If packet buffer is non-empty, begins encoding the\n * next packet in line.\n *\n * @api private\n */\n\nManager.prototype.processPacketQueue = function () {\n  if (this.packetBuffer.length > 0 && !this.encoding) {\n    var pack = this.packetBuffer.shift();\n    this.packet(pack);\n  }\n};\n\n/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @api private\n */\n\nManager.prototype.cleanup = function () {\n  debug('cleanup');\n\n  var subsLength = this.subs.length;\n  for (var i = 0; i < subsLength; i++) {\n    var sub = this.subs.shift();\n    sub.destroy();\n  }\n\n  this.packetBuffer = [];\n  this.encoding = false;\n  this.lastPing = null;\n\n  this.decoder.destroy();\n};\n\n/**\n * Close the current socket.\n *\n * @api private\n */\n\nManager.prototype.close =\nManager.prototype.disconnect = function () {\n  debug('disconnect');\n  this.skipReconnect = true;\n  this.reconnecting = false;\n  if ('opening' === this.readyState) {\n    // `onclose` will not fire because\n    // an open event never happened\n    this.cleanup();\n  }\n  this.backoff.reset();\n  this.readyState = 'closed';\n  if (this.engine) this.engine.close();\n};\n\n/**\n * Called upon engine close.\n *\n * @api private\n */\n\nManager.prototype.onclose = function (reason) {\n  debug('onclose');\n\n  this.cleanup();\n  this.backoff.reset();\n  this.readyState = 'closed';\n  this.emit('close', reason);\n\n  if (this._reconnection && !this.skipReconnect) {\n    this.reconnect();\n  }\n};\n\n/**\n * Attempt a reconnection.\n *\n * @api private\n */\n\nManager.prototype.reconnect = function () {\n  if (this.reconnecting || this.skipReconnect) return this;\n\n  var self = this;\n\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\n    debug('reconnect failed');\n    this.backoff.reset();\n    this.emitAll('reconnect_failed');\n    this.reconnecting = false;\n  } else {\n    var delay = this.backoff.duration();\n    debug('will wait %dms before reconnect attempt', delay);\n\n    this.reconnecting = true;\n    var timer = setTimeout(function () {\n      if (self.skipReconnect) return;\n\n      debug('attempting reconnect');\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\n      self.emitAll('reconnecting', self.backoff.attempts);\n\n      // check again for the case socket closed in above events\n      if (self.skipReconnect) return;\n\n      self.open(function (err) {\n        if (err) {\n          debug('reconnect attempt error');\n          self.reconnecting = false;\n          self.reconnect();\n          self.emitAll('reconnect_error', err.data);\n        } else {\n          debug('reconnect success');\n          self.onreconnect();\n        }\n      });\n    }, delay);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n};\n\n/**\n * Called upon successful reconnect.\n *\n * @api private\n */\n\nManager.prototype.onreconnect = function () {\n  var attempt = this.backoff.attempts;\n  this.reconnecting = false;\n  this.backoff.reset();\n  this.updateSocketIds();\n  this.emitAll('reconnect', attempt);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/lib/manager.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/lib/on.js":
/*!*****************************************************!*\
  !*** ../../node_modules/socket.io-client/lib/on.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n/**\n * Module exports.\n */\n\nmodule.exports = on;\n\n/**\n * Helper for subscriptions.\n *\n * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\n * @param {String} event name\n * @param {Function} callback\n * @api public\n */\n\nfunction on (obj, ev, fn) {\n  obj.on(ev, fn);\n  return {\n    destroy: function () {\n      obj.removeListener(ev, fn);\n    }\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9vbi5qcz8wYTAyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0IsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb247XG5cbi8qKlxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEV2ZW50RW1pdHRlcn0gb2JqIHdpdGggYEVtaXR0ZXJgIG1peGluIG9yIGBFdmVudEVtaXR0ZXJgXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb24gKG9iaiwgZXYsIGZuKSB7XG4gIG9iai5vbihldiwgZm4pO1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/lib/on.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/lib/socket.js":
/*!*********************************************************!*\
  !*** ../../node_modules/socket.io-client/lib/socket.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */\n\nvar parser = __webpack_require__(/*! socket.io-parser */ \"../../node_modules/socket.io-client/node_modules/socket.io-parser/index.js\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"../../node_modules/component-emitter/index.js\");\nvar toArray = __webpack_require__(/*! to-array */ \"../../node_modules/to-array/index.js\");\nvar on = __webpack_require__(/*! ./on */ \"../../node_modules/socket.io-client/lib/on.js\");\nvar bind = __webpack_require__(/*! component-bind */ \"../../node_modules/component-bind/index.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/socket.io-client/node_modules/debug/src/browser.js\")('socket.io-client:socket');\nvar parseqs = __webpack_require__(/*! parseqs */ \"../../node_modules/parseqs/index.js\");\nvar hasBin = __webpack_require__(/*! has-binary2 */ \"../../node_modules/has-binary2/index.js\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = Socket;\n\n/**\n * Internal events (blacklisted).\n * These events can't be emitted by the user.\n *\n * @api private\n */\n\nvar events = {\n  connect: 1,\n  connect_error: 1,\n  connect_timeout: 1,\n  connecting: 1,\n  disconnect: 1,\n  error: 1,\n  reconnect: 1,\n  reconnect_attempt: 1,\n  reconnect_failed: 1,\n  reconnect_error: 1,\n  reconnecting: 1,\n  ping: 1,\n  pong: 1\n};\n\n/**\n * Shortcut to `Emitter#emit`.\n */\n\nvar emit = Emitter.prototype.emit;\n\n/**\n * `Socket` constructor.\n *\n * @api public\n */\n\nfunction Socket (io, nsp, opts) {\n  this.io = io;\n  this.nsp = nsp;\n  this.json = this; // compat\n  this.ids = 0;\n  this.acks = {};\n  this.receiveBuffer = [];\n  this.sendBuffer = [];\n  this.connected = false;\n  this.disconnected = true;\n  this.flags = {};\n  if (opts && opts.query) {\n    this.query = opts.query;\n  }\n  if (this.io.autoConnect) this.open();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Subscribe to open, close and packet events\n *\n * @api private\n */\n\nSocket.prototype.subEvents = function () {\n  if (this.subs) return;\n\n  var io = this.io;\n  this.subs = [\n    on(io, 'open', bind(this, 'onopen')),\n    on(io, 'packet', bind(this, 'onpacket')),\n    on(io, 'close', bind(this, 'onclose'))\n  ];\n};\n\n/**\n * \"Opens\" the socket.\n *\n * @api public\n */\n\nSocket.prototype.open =\nSocket.prototype.connect = function () {\n  if (this.connected) return this;\n\n  this.subEvents();\n  if (!this.io.reconnecting) this.io.open(); // ensure open\n  if ('open' === this.io.readyState) this.onopen();\n  this.emit('connecting');\n  return this;\n};\n\n/**\n * Sends a `message` event.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.send = function () {\n  var args = toArray(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n\n/**\n * Override `emit`.\n * If the event is in `events`, it's emitted normally.\n *\n * @param {String} event name\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.emit = function (ev) {\n  if (events.hasOwnProperty(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  }\n\n  var args = toArray(arguments);\n  var packet = {\n    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,\n    data: args\n  };\n\n  packet.options = {};\n  packet.options.compress = !this.flags || false !== this.flags.compress;\n\n  // event ack callback\n  if ('function' === typeof args[args.length - 1]) {\n    debug('emitting packet with ack id %d', this.ids);\n    this.acks[this.ids] = args.pop();\n    packet.id = this.ids++;\n  }\n\n  if (this.connected) {\n    this.packet(packet);\n  } else {\n    this.sendBuffer.push(packet);\n  }\n\n  this.flags = {};\n\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.packet = function (packet) {\n  packet.nsp = this.nsp;\n  this.io.packet(packet);\n};\n\n/**\n * Called upon engine `open`.\n *\n * @api private\n */\n\nSocket.prototype.onopen = function () {\n  debug('transport is open - connecting');\n\n  // write connect packet if necessary\n  if ('/' !== this.nsp) {\n    if (this.query) {\n      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;\n      debug('sending connect packet with query %s', query);\n      this.packet({type: parser.CONNECT, query: query});\n    } else {\n      this.packet({type: parser.CONNECT});\n    }\n  }\n};\n\n/**\n * Called upon engine `close`.\n *\n * @param {String} reason\n * @api private\n */\n\nSocket.prototype.onclose = function (reason) {\n  debug('close (%s)', reason);\n  this.connected = false;\n  this.disconnected = true;\n  delete this.id;\n  this.emit('disconnect', reason);\n};\n\n/**\n * Called with socket packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onpacket = function (packet) {\n  var sameNamespace = packet.nsp === this.nsp;\n  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';\n\n  if (!sameNamespace && !rootNamespaceError) return;\n\n  switch (packet.type) {\n    case parser.CONNECT:\n      this.onconnect();\n      break;\n\n    case parser.EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.BINARY_EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.ACK:\n      this.onack(packet);\n      break;\n\n    case parser.BINARY_ACK:\n      this.onack(packet);\n      break;\n\n    case parser.DISCONNECT:\n      this.ondisconnect();\n      break;\n\n    case parser.ERROR:\n      this.emit('error', packet.data);\n      break;\n  }\n};\n\n/**\n * Called upon a server event.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onevent = function (packet) {\n  var args = packet.data || [];\n  debug('emitting event %j', args);\n\n  if (null != packet.id) {\n    debug('attaching ack callback to event');\n    args.push(this.ack(packet.id));\n  }\n\n  if (this.connected) {\n    emit.apply(this, args);\n  } else {\n    this.receiveBuffer.push(args);\n  }\n};\n\n/**\n * Produces an ack callback to emit with an event.\n *\n * @api private\n */\n\nSocket.prototype.ack = function (id) {\n  var self = this;\n  var sent = false;\n  return function () {\n    // prevent double callbacks\n    if (sent) return;\n    sent = true;\n    var args = toArray(arguments);\n    debug('sending ack %j', args);\n\n    self.packet({\n      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,\n      id: id,\n      data: args\n    });\n  };\n};\n\n/**\n * Called upon a server acknowlegement.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onack = function (packet) {\n  var ack = this.acks[packet.id];\n  if ('function' === typeof ack) {\n    debug('calling ack %s with %j', packet.id, packet.data);\n    ack.apply(this, packet.data);\n    delete this.acks[packet.id];\n  } else {\n    debug('bad ack %s', packet.id);\n  }\n};\n\n/**\n * Called upon server connect.\n *\n * @api private\n */\n\nSocket.prototype.onconnect = function () {\n  this.connected = true;\n  this.disconnected = false;\n  this.emit('connect');\n  this.emitBuffered();\n};\n\n/**\n * Emit buffered events (received and emitted).\n *\n * @api private\n */\n\nSocket.prototype.emitBuffered = function () {\n  var i;\n  for (i = 0; i < this.receiveBuffer.length; i++) {\n    emit.apply(this, this.receiveBuffer[i]);\n  }\n  this.receiveBuffer = [];\n\n  for (i = 0; i < this.sendBuffer.length; i++) {\n    this.packet(this.sendBuffer[i]);\n  }\n  this.sendBuffer = [];\n};\n\n/**\n * Called upon server disconnect.\n *\n * @api private\n */\n\nSocket.prototype.ondisconnect = function () {\n  debug('server disconnect (%s)', this.nsp);\n  this.destroy();\n  this.onclose('io server disconnect');\n};\n\n/**\n * Called upon forced client/server side disconnections,\n * this method ensures the manager stops tracking us and\n * that reconnections don't get triggered for this.\n *\n * @api private.\n */\n\nSocket.prototype.destroy = function () {\n  if (this.subs) {\n    // clean subscriptions to avoid reconnections\n    for (var i = 0; i < this.subs.length; i++) {\n      this.subs[i].destroy();\n    }\n    this.subs = null;\n  }\n\n  this.io.destroy(this);\n};\n\n/**\n * Disconnects the socket manually.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.close =\nSocket.prototype.disconnect = function () {\n  if (this.connected) {\n    debug('performing disconnect (%s)', this.nsp);\n    this.packet({ type: parser.DISCONNECT });\n  }\n\n  // remove socket from pool\n  this.destroy();\n\n  if (this.connected) {\n    // fire events\n    this.onclose('io client disconnect');\n  }\n  return this;\n};\n\n/**\n * Sets the compress flag.\n *\n * @param {Boolean} if `true`, compresses the sending data\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.compress = function (compress) {\n  this.flags.compress = compress;\n  return this;\n};\n\n/**\n * Sets the binary flag\n *\n * @param {Boolean} whether the emitted data contains binary\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.binary = function (binary) {\n  this.flags.binary = binary;\n  return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/lib/socket.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/lib/url.js":
/*!******************************************************!*\
  !*** ../../node_modules/socket.io-client/lib/url.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */\n\nvar parseuri = __webpack_require__(/*! parseuri */ \"../../node_modules/parseuri/index.js\");\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/socket.io-client/node_modules/debug/src/browser.js\")('socket.io-client:url');\n\n/**\n * Module exports.\n */\n\nmodule.exports = url;\n\n/**\n * URL parser.\n *\n * @param {String} url\n * @param {Object} An object meant to mimic window.location.\n *                 Defaults to window.location.\n * @api public\n */\n\nfunction url (uri, loc) {\n  var obj = uri;\n\n  // default to window.location\n  loc = loc || (typeof location !== 'undefined' && location);\n  if (null == uri) uri = loc.protocol + '//' + loc.host;\n\n  // relative path support\n  if ('string' === typeof uri) {\n    if ('/' === uri.charAt(0)) {\n      if ('/' === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug('protocol-less url %s', uri);\n      if ('undefined' !== typeof loc) {\n        uri = loc.protocol + '//' + uri;\n      } else {\n        uri = 'https://' + uri;\n      }\n    }\n\n    // parse\n    debug('parse %s', uri);\n    obj = parseuri(uri);\n  }\n\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = '80';\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = '443';\n    }\n  }\n\n  obj.path = obj.path || '/';\n\n  var ipv6 = obj.host.indexOf(':') !== -1;\n  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\n\n  // define unique id\n  obj.id = obj.protocol + '://' + host + ':' + obj.port;\n  // define href\n  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));\n\n  return obj;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanM/NDBiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsbUJBQU8sQ0FBQyxzREFBVTtBQUNqQyxZQUFZLG1CQUFPLENBQUMsb0ZBQU87O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24pO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/lib/url.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/node_modules/debug/src/browser.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/socket.io-client/node_modules/debug/src/browser.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(/*! ./debug */ \"../../node_modules/socket.io-client/node_modules/debug/src/debug.js\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/node_modules/debug/src/debug.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/socket.io-client/node_modules/debug/src/debug.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"../../node_modules/socket.io-client/node_modules/ms/index.js\");\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/node_modules/debug/src/debug.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/node_modules/ms/index.js":
/*!********************************************************************!*\
  !*** ../../node_modules/socket.io-client/node_modules/ms/index.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcz8yYTZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsT0FBTztBQUNsQixZQUFZLE1BQU07QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/node_modules/ms/index.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/node_modules/socket.io-parser/binary.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/socket.io-client/node_modules/socket.io-parser/binary.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*global Blob,File*/\n\n/**\n * Module requirements\n */\n\nvar isArray = __webpack_require__(/*! isarray */ \"../../node_modules/isarray/index.js\");\nvar isBuf = __webpack_require__(/*! ./is-buffer */ \"../../node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js\");\nvar toString = Object.prototype.toString;\nvar withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');\nvar withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');\n\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\nexports.deconstructPacket = function(packet) {\n  var buffers = [];\n  var packetData = packet.data;\n  var pack = packet;\n  pack.data = _deconstructPacket(packetData, buffers);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n  return {packet: pack, buffers: buffers};\n};\n\nfunction _deconstructPacket(data, buffers) {\n  if (!data) return data;\n\n  if (isBuf(data)) {\n    var placeholder = { _placeholder: true, num: buffers.length };\n    buffers.push(data);\n    return placeholder;\n  } else if (isArray(data)) {\n    var newData = new Array(data.length);\n    for (var i = 0; i < data.length; i++) {\n      newData[i] = _deconstructPacket(data[i], buffers);\n    }\n    return newData;\n  } else if (typeof data === 'object' && !(data instanceof Date)) {\n    var newData = {};\n    for (var key in data) {\n      newData[key] = _deconstructPacket(data[key], buffers);\n    }\n    return newData;\n  }\n  return data;\n}\n\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\nexports.reconstructPacket = function(packet, buffers) {\n  packet.data = _reconstructPacket(packet.data, buffers);\n  packet.attachments = undefined; // no longer useful\n  return packet;\n};\n\nfunction _reconstructPacket(data, buffers) {\n  if (!data) return data;\n\n  if (data && data._placeholder) {\n    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n  } else if (isArray(data)) {\n    for (var i = 0; i < data.length; i++) {\n      data[i] = _reconstructPacket(data[i], buffers);\n    }\n  } else if (typeof data === 'object') {\n    for (var key in data) {\n      data[key] = _reconstructPacket(data[key], buffers);\n    }\n  }\n\n  return data;\n}\n\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\nexports.removeBlobs = function(data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj;\n\n    // convert any blob\n    if ((withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File)) {\n      pendingBlobs++;\n\n      // async filereader\n      var fileReader = new FileReader();\n      fileReader.onload = function() { // this.result == arraybuffer\n        if (containingObject) {\n          containingObject[curKey] = this.result;\n        }\n        else {\n          bloblessData = this.result;\n        }\n\n        // if nothing pending its callback time\n        if(! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n    } else if (isArray(obj)) { // handle array\n      for (var i = 0; i < obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs = 0;\n  var bloblessData = data;\n  _removeBlobs(bloblessData);\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcz9hNmMxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLG1CQUFPLENBQUMsb0RBQVM7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLG1HQUFhO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxNQUFNO0FBQ2pCLFlBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7QUFDN0IsR0FBRztBQUNILG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0M7QUFDeEMsS0FBSyx5QkFBeUI7QUFDOUIscUJBQXFCLGdCQUFnQjtBQUNyQztBQUNBO0FBQ0EsS0FBSyxtREFBbUQ7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBCbG9iLEZpbGUqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJyk7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nKTtcblxuLyoqXG4gKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICogQW55dGhpbmcgd2l0aCBibG9icyBvciBmaWxlcyBzaG91bGQgYmUgZmVkIHRocm91Z2ggcmVtb3ZlQmxvYnMgYmVmb3JlIGNvbWluZ1xuICogaGVyZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgcGFjayA9IHBhY2tldDtcbiAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICByZXR1cm4ge3BhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVyc307XG59O1xuXG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChpc0J1ZihkYXRhKSkge1xuICAgIHZhciBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgYnVmZmVycykge1xuICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gIHBhY2tldC5hdHRhY2htZW50cyA9IHVuZGVmaW5lZDsgLy8gbm8gbG9uZ2VyIHVzZWZ1bFxuICByZXR1cm4gcGFja2V0O1xufTtcblxuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJlbW92ZXMgQmxvYnMgb3IgRmlsZXMgZnJvbSBkYXRhIHZpYVxuICogRmlsZVJlYWRlcidzIHJlYWRBc0FycmF5QnVmZmVyIG1ldGhvZC4gVXNlZCBiZWZvcmUgZW5jb2RpbmdcbiAqIGRhdGEgYXMgbXNncGFjay4gQ2FsbHMgY2FsbGJhY2sgd2l0aCB0aGUgYmxvYmxlc3MgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBfcmVtb3ZlQmxvYnMob2JqLCBjdXJLZXksIGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcblxuICAgIC8vIGNvbnZlcnQgYW55IGJsb2JcbiAgICBpZiAoKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKSkge1xuICAgICAgcGVuZGluZ0Jsb2JzKys7XG5cbiAgICAgIC8vIGFzeW5jIGZpbGVyZWFkZXJcbiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7IC8vIHRoaXMucmVzdWx0ID09IGFycmF5YnVmZmVyXG4gICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0KSB7XG4gICAgICAgICAgY29udGFpbmluZ09iamVjdFtjdXJLZXldID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYmxvYmxlc3NEYXRhID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBub3RoaW5nIHBlbmRpbmcgaXRzIGNhbGxiYWNrIHRpbWVcbiAgICAgICAgaWYoISAtLXBlbmRpbmdCbG9icykge1xuICAgICAgICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIob2JqKTsgLy8gYmxvYiAtPiBhcnJheWJ1ZmZlclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7IC8vIGhhbmRsZSBhcnJheVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFpc0J1ZihvYmopKSB7IC8vIGFuZCBvYmplY3RcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHBlbmRpbmdCbG9icyA9IDA7XG4gIHZhciBibG9ibGVzc0RhdGEgPSBkYXRhO1xuICBfcmVtb3ZlQmxvYnMoYmxvYmxlc3NEYXRhKTtcbiAgaWYgKCFwZW5kaW5nQmxvYnMpIHtcbiAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/node_modules/socket.io-parser/binary.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/node_modules/socket.io-parser/index.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/socket.io-client/node_modules/socket.io-parser/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/socket.io-client/node_modules/debug/src/browser.js\")('socket.io-parser');\nvar Emitter = __webpack_require__(/*! component-emitter */ \"../../node_modules/component-emitter/index.js\");\nvar binary = __webpack_require__(/*! ./binary */ \"../../node_modules/socket.io-client/node_modules/socket.io-parser/binary.js\");\nvar isArray = __webpack_require__(/*! isarray */ \"../../node_modules/isarray/index.js\");\nvar isBuf = __webpack_require__(/*! ./is-buffer */ \"../../node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js\");\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'ACK',\n  'ERROR',\n  'BINARY_EVENT',\n  'BINARY_ACK'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\nvar ERROR_PACKET = exports.ERROR + '\"encode error\"';\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function(obj, callback){\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    encodeAsBinary(obj, callback);\n  } else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n\n  // first is type\n  var str = '' + obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    str += obj.attachments + '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' !== obj.nsp) {\n    str += obj.nsp + ',';\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    var payload = tryStringify(obj.data);\n    if (payload !== false) {\n      str += payload;\n    } else {\n      return ERROR_PACKET;\n    }\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\nfunction tryStringify(str) {\n  try {\n    return JSON.stringify(str);\n  } catch(e){\n    return false;\n  }\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an encoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function(obj) {\n  var packet;\n  if (typeof obj === 'string') {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments === 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  } else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  } else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var i = 0;\n  // look up type\n  var p = {\n    type: Number(str.charAt(0))\n  };\n\n  if (null == exports.types[p.type]) {\n    return error('unknown packet type ' + p.type);\n  }\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {\n    var start = i + 1;\n    while (str.charAt(++i) !== '-' && i != str.length) {}\n    var buf = str.substring(start, i);\n    if (buf != Number(buf) || str.charAt(i) !== '-') {\n      throw new Error('Illegal attachments');\n    }\n    p.attachments = Number(buf);\n  }\n\n  // look up namespace (if any)\n  if ('/' === str.charAt(i + 1)) {\n    var start = i + 1;\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' === c) break;\n      if (i === str.length) break;\n    }\n    p.nsp = str.substring(start, i);\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' !== next && Number(next) == next) {\n    var start = i + 1;\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      if (i === str.length) break;\n    }\n    p.id = Number(str.substring(start, i + 1));\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    var payload = tryParse(str.substr(i));\n    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));\n    if (isPayloadValid) {\n      p.data = payload;\n    } else {\n      return error('invalid payload');\n    }\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch(e){\n    return false;\n  }\n}\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function() {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(msg) {\n  return {\n    type: exports.ERROR,\n    data: 'parser error: ' + msg\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/node_modules/socket.io-parser/index.js\n");

/***/ }),

/***/ "../../node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js ***!
  \**************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = isBuf;\n\nvar withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';\nvar withNativeArrayBuffer = typeof ArrayBuffer === 'function';\n\nvar isView = function (obj) {\n  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);\n};\n\n/**\n * Returns true if obj is a buffer or an arraybuffer.\n *\n * @api private\n */\n\nfunction isBuf(obj) {\n  return (withNativeBuffer && Buffer.isBuffer(obj)) ||\n          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcz9hZmRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZjtcblxudmFyIHdpdGhOYXRpdmVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBCdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbic7XG52YXIgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nO1xuXG52YXIgaXNWaWV3ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopIDogKG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBidWZmZXIgb3IgYW4gYXJyYXlidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNCdWYob2JqKSB7XG4gIHJldHVybiAod2l0aE5hdGl2ZUJ1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js\n");

/***/ }),

/***/ "../../node_modules/to-array/index.js":
/*!********************************************!*\
  !*** ../../node_modules/to-array/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("module.exports = toArray\n\nfunction toArray(list, index) {\n    var array = []\n\n    index = index || 0\n\n    for (var i = index || 0; i < list.length; i++) {\n        array[i - index] = list[i]\n    }\n\n    return array\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy90by1hcnJheS9pbmRleC5qcz8xYzg0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/to-array/index.js\n");

/***/ }),

/***/ "../../node_modules/yeast/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/yeast/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcz9lZjc1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sWUFBWTs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/yeast/index.js\n");

/***/ }),

/***/ "?fb7c":
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/backend.js");
/******/ 	
/******/ })()
;