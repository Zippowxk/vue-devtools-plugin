/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../app-backend-core/lib/hook.js":
/*!***************************************!*\
  !*** ../app-backend-core/lib/hook.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// this script is injected into every page.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.installHook = void 0;\n/**\n * Install the hook on window, which is an event emitter.\n * Note because Chrome content scripts cannot directly modify the window object,\n * we are evaling this function by inserting a script tag. That's why we have\n * to inline the whole event emitter implementation here.\n *\n * @param {Window|global} target\n */\nfunction installHook(target, isIframe) {\n    if ( isIframe === void 0 ) isIframe = false;\n\n    var listeners = {};\n    var iframeChecks = 0;\n    function injectToIframes() {\n        var iframes = document.querySelectorAll('iframe');\n        var loop = function () {\n            try {\n                if (iframe.__vdevtools__injected)\n                    { return; }\n                iframe.__vdevtools__injected = true;\n                var inject = function () {\n                    try {\n                        iframe.contentWindow.__VUE_DEVTOOLS_IFRAME__ = iframe;\n                        var script = iframe.contentDocument.createElement('script');\n                        script.textContent = ';(' + installHook.toString() + ')(window, true)';\n                        iframe.contentDocument.documentElement.appendChild(script);\n                        script.parentNode.removeChild(script);\n                    }\n                    catch (e) {\n                        // Ignore\n                    }\n                };\n                inject();\n                iframe.addEventListener('load', function () { return inject(); });\n            }\n            catch (e) {\n                // Ignore\n            }\n        };\n\n        for (var iframe of iframes) loop();\n    }\n    injectToIframes();\n    var iframeTimer = setInterval(function () {\n        injectToIframes();\n        iframeChecks++;\n        if (iframeChecks >= 5) {\n            clearInterval(iframeTimer);\n        }\n    }, 1000);\n    if (Object.prototype.hasOwnProperty.call(target, '__VUE_DEVTOOLS_GLOBAL_HOOK__'))\n        { return; }\n    var hook;\n    if (isIframe) {\n        var sendToParent = function (cb) {\n            try {\n                var hook = window.parent.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n                if (hook) {\n                    cb(hook);\n                }\n                else {\n                    console.warn('[Vue Devtools] No hook in parent window');\n                }\n            }\n            catch (e) {\n                console.warn('[Vue Devtools] Failed to send message to parend window', e);\n            }\n        };\n        hook = {\n            // eslint-disable-next-line accessor-pairs\n            set Vue(value) {\n                sendToParent(function (hook) { hook.Vue = value; });\n            },\n            on: function on(event, fn) {\n                sendToParent(function (hook) { return hook.on(event, fn); });\n            },\n            once: function once(event, fn) {\n                sendToParent(function (hook) { return hook.once(event, fn); });\n            },\n            off: function off(event, fn) {\n                sendToParent(function (hook) { return hook.off(event, fn); });\n            },\n            emit: function emit(event) {\n                var args = [], len = arguments.length - 1;\n                while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n                sendToParent(function (hook) { return hook.emit.apply(hook, [ event ].concat( args )); });\n            }\n        };\n    }\n    else {\n        hook = {\n            Vue: null,\n            _buffer: [],\n            store: null,\n            initialState: null,\n            storeModules: null,\n            flushStoreModules: null,\n            apps: [],\n            _replayBuffer: function _replayBuffer(event) {\n                var buffer = this._buffer;\n                this._buffer = [];\n                for (var i = 0, l = buffer.length; i < l; i++) {\n                    var allArgs = buffer[i];\n                    allArgs[0] === event\n                        // eslint-disable-next-line prefer-spread\n                        ? this.emit.apply(this, allArgs)\n                        : this._buffer.push(allArgs);\n                }\n            },\n            on: function on(event, fn) {\n                var $event = '$' + event;\n                if (listeners[$event]) {\n                    listeners[$event].push(fn);\n                }\n                else {\n                    listeners[$event] = [fn];\n                    this._replayBuffer(event);\n                }\n            },\n            once: function once(event, fn) {\n                var this$1 = this;\n\n                var on = function () {\n                    var args = [], len = arguments.length;\n                    while ( len-- ) args[ len ] = arguments[ len ];\n\n                    this$1.off(event, on);\n                    fn.apply(this$1, args);\n                };\n                this.on(event, on);\n            },\n            off: function off(event, fn) {\n                event = '$' + event;\n                if (!arguments.length) {\n                    listeners = {};\n                }\n                else {\n                    var cbs = listeners[event];\n                    if (cbs) {\n                        if (!fn) {\n                            listeners[event] = null;\n                        }\n                        else {\n                            for (var i = 0, l = cbs.length; i < l; i++) {\n                                var cb = cbs[i];\n                                if (cb === fn || cb.fn === fn) {\n                                    cbs.splice(i, 1);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            emit: function emit(event) {\n                var args = [], len = arguments.length - 1;\n                while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n                var $event = '$' + event;\n                var cbs = listeners[$event];\n                if (cbs) {\n                    cbs = cbs.slice();\n                    for (var i = 0, l = cbs.length; i < l; i++) {\n                        cbs[i].apply(this, args);\n                    }\n                }\n                else {\n                    this._buffer.push([event ].concat( args));\n                }\n            }\n        };\n        hook.once('init', function (Vue) {\n            hook.Vue = Vue;\n            if (Vue) {\n                Vue.prototype.$inspect = function () {\n                    var fn = target.__VUE_DEVTOOLS_INSPECT__;\n                    fn && fn(this);\n                };\n            }\n        });\n        hook.on('app:init', function (app, version, types) {\n            var appRecord = {\n                app: app,\n                version: version,\n                types: types\n            };\n            hook.apps.push(appRecord);\n            hook.emit('app:add', appRecord);\n        });\n        hook.once('vuex:init', function (store) {\n            hook.store = store;\n            hook.initialState = clone(store.state);\n            var origReplaceState = store.replaceState.bind(store);\n            store.replaceState = function (state) {\n                hook.initialState = clone(state);\n                origReplaceState(state);\n            };\n            // Dynamic modules\n            var origRegister, origUnregister;\n            if (store.registerModule) {\n                hook.storeModules = [];\n                origRegister = store.registerModule.bind(store);\n                store.registerModule = function (path, module, options) {\n                    if (typeof path === 'string')\n                        { path = [path]; }\n                    hook.storeModules.push({ path: path, module: module, options: options });\n                    origRegister(path, module, options);\n                    if (true)\n                        { console.log('early register module', path, module, options); }\n                };\n                origUnregister = store.unregisterModule.bind(store);\n                store.unregisterModule = function (path) {\n                    if (typeof path === 'string')\n                        { path = [path]; }\n                    var key = path.join('/');\n                    var index = hook.storeModules.findIndex(function (m) { return m.path.join('/') === key; });\n                    if (index !== -1)\n                        { hook.storeModules.splice(index, 1); }\n                    origUnregister(path);\n                    if (true)\n                        { console.log('early unregister module', path); }\n                };\n            }\n            hook.flushStoreModules = function () {\n                store.replaceState = origReplaceState;\n                if (store.registerModule) {\n                    store.registerModule = origRegister;\n                    store.unregisterModule = origUnregister;\n                }\n                return hook.storeModules || [];\n            };\n        });\n    }\n    Object.defineProperty(target, '__VUE_DEVTOOLS_GLOBAL_HOOK__', {\n        get: function get() {\n            return hook;\n        }\n    });\n    // Clone deep utility for cloning initial state of the store\n    // Forked from https://github.com/planttheidea/fast-copy\n    // Last update: 2019-10-30\n    // ⚠️ Don't forget to update `./hook.js`\n    // utils\n    var ref = Function.prototype;\n    var toStringFunction = ref.toString;\n    var create = Object.create;\n    var defineProperty = Object.defineProperty;\n    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    var getOwnPropertyNames = Object.getOwnPropertyNames;\n    var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n    var getPrototypeOf = Object.getPrototypeOf;\n    var ref$1 = Object.prototype;\n    var hasOwnProperty = ref$1.hasOwnProperty;\n    var propertyIsEnumerable = ref$1.propertyIsEnumerable;\n    /**\n     * @enum\n     *\n     * @const {Object} SUPPORTS\n     *\n     * @property {boolean} SYMBOL_PROPERTIES are symbol properties supported\n     * @property {boolean} WEAKSET is WeakSet supported\n     */\n    var SUPPORTS = {\n        SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === 'function',\n        WEAKSET: typeof WeakSet === 'function'\n    };\n    /**\n     * @function createCache\n     *\n     * @description\n     * get a new cache object to prevent circular references\n     *\n     * @returns the new cache object\n     */\n    var createCache = function () {\n        if (SUPPORTS.WEAKSET) {\n            return new WeakSet();\n        }\n        var object = create({\n            add: function (value) { return object._values.push(value); },\n            has: function (value) { return !!~object._values.indexOf(value); }\n        });\n        object._values = [];\n        return object;\n    };\n    /**\n     * @function getCleanClone\n     *\n     * @description\n     * get an empty version of the object with the same prototype it has\n     *\n     * @param object the object to build a clean clone from\n     * @param realm the realm the object resides in\n     * @returns the empty cloned object\n     */\n    var getCleanClone = function (object, realm) {\n        if (!object.constructor) {\n            return create(null);\n        }\n        // eslint-disable-next-line no-proto\n        var prototype = object.__proto__ || getPrototypeOf(object);\n        if (object.constructor === realm.Object) {\n            return prototype === realm.Object.prototype ? {} : create(prototype);\n        }\n        if (~toStringFunction.call(object.constructor).indexOf('[native code]')) {\n            try {\n                return new object.constructor();\n            }\n            catch (e) {\n                // Error\n            }\n        }\n        return create(prototype);\n    };\n    /**\n     * @function getObjectCloneLoose\n     *\n     * @description\n     * get a copy of the object based on loose rules, meaning all enumerable keys\n     * and symbols are copied, but property descriptors are not considered\n     *\n     * @param object the object to clone\n     * @param realm the realm the object resides in\n     * @param handleCopy the function that handles copying the object\n     * @returns the copied object\n     */\n    var getObjectCloneLoose = function (object, realm, handleCopy, cache) {\n        var clone = getCleanClone(object, realm);\n        for (var key in object) {\n            if (hasOwnProperty.call(object, key)) {\n                clone[key] = handleCopy(object[key], cache);\n            }\n        }\n        if (SUPPORTS.SYMBOL_PROPERTIES) {\n            var symbols = getOwnPropertySymbols(object);\n            if (symbols.length) {\n                for (var index = 0, symbol = (void 0); index < symbols.length; index++) {\n                    symbol = symbols[index];\n                    if (propertyIsEnumerable.call(object, symbol)) {\n                        clone[symbol] = handleCopy(object[symbol], cache);\n                    }\n                }\n            }\n        }\n        return clone;\n    };\n    /**\n     * @function getObjectCloneStrict\n     *\n     * @description\n     * get a copy of the object based on strict rules, meaning all keys and symbols\n     * are copied based on the original property descriptors\n     *\n     * @param object the object to clone\n     * @param realm the realm the object resides in\n     * @param handleCopy the function that handles copying the object\n     * @returns the copied object\n     */\n    var getObjectCloneStrict = function (object, realm, handleCopy, cache) {\n        var clone = getCleanClone(object, realm);\n        var properties = SUPPORTS.SYMBOL_PROPERTIES\n            ? [].concat(getOwnPropertyNames(object), getOwnPropertySymbols(object))\n            : getOwnPropertyNames(object);\n        if (properties.length) {\n            for (var index = 0, property = (void 0), descriptor = (void 0); index < properties.length; index++) {\n                property = properties[index];\n                if (property !== 'callee' && property !== 'caller') {\n                    descriptor = getOwnPropertyDescriptor(object, property);\n                    descriptor.value = handleCopy(object[property], cache);\n                    defineProperty(clone, property, descriptor);\n                }\n            }\n        }\n        return clone;\n    };\n    /**\n     * @function getRegExpFlags\n     *\n     * @description\n     * get the flags to apply to the copied regexp\n     *\n     * @param regExp the regexp to get the flags of\n     * @returns the flags for the regexp\n     */\n    var getRegExpFlags = function (regExp) {\n        var flags = '';\n        if (regExp.global) {\n            flags += 'g';\n        }\n        if (regExp.ignoreCase) {\n            flags += 'i';\n        }\n        if (regExp.multiline) {\n            flags += 'm';\n        }\n        if (regExp.unicode) {\n            flags += 'u';\n        }\n        if (regExp.sticky) {\n            flags += 'y';\n        }\n        return flags;\n    };\n    var isArray = Array.isArray;\n    var GLOBAL_THIS = (function () {\n        if (typeof self !== 'undefined') {\n            return self;\n        }\n        if (typeof window !== 'undefined') {\n            return window;\n        }\n        if (typeof __webpack_require__.g !== 'undefined') {\n            return __webpack_require__.g;\n        }\n        if (console && console.error) {\n            console.error('Unable to locate global object, returning \"this\".');\n        }\n    })();\n    /**\n     * @function clone\n     *\n     * @description\n     * copy an object deeply as much as possible\n     *\n     * If `strict` is applied, then all properties (including non-enumerable ones)\n     * are copied with their original property descriptors on both objects and arrays.\n     *\n     * The object is compared to the global constructors in the `realm` provided,\n     * and the native constructor is always used to ensure that extensions of native\n     * objects (allows in ES2015+) are maintained.\n     *\n     * @param object the object to copy\n     * @param [options] the options for copying with\n     * @param [options.isStrict] should the copy be strict\n     * @param [options.realm] the realm (this) object the object is copied from\n     * @returns the copied object\n     */\n    function clone(object, options) {\n        if ( options === void 0 ) options = null;\n\n        // manually coalesced instead of default parameters for performance\n        var isStrict = !!(options && options.isStrict);\n        var realm = (options && options.realm) || GLOBAL_THIS;\n        var getObjectClone = isStrict\n            ? getObjectCloneStrict\n            : getObjectCloneLoose;\n        /**\n         * @function handleCopy\n         *\n         * @description\n         * copy the object recursively based on its type\n         *\n         * @param object the object to copy\n         * @returns the copied object\n         */\n        var handleCopy = function (object, cache) {\n            if (!object || typeof object !== 'object' || cache.has(object)) {\n                return object;\n            }\n            // DOM objects\n            if (object instanceof HTMLElement) {\n                return object.cloneNode(false);\n            }\n            var Constructor = object.constructor;\n            // plain objects\n            if (Constructor === realm.Object) {\n                cache.add(object);\n                return getObjectClone(object, realm, handleCopy, cache);\n            }\n            var clone;\n            // arrays\n            if (isArray(object)) {\n                cache.add(object);\n                // if strict, include non-standard properties\n                if (isStrict) {\n                    return getObjectCloneStrict(object, realm, handleCopy, cache);\n                }\n                clone = new Constructor();\n                for (var index = 0; index < object.length; index++) {\n                    clone[index] = handleCopy(object[index], cache);\n                }\n                return clone;\n            }\n            // dates\n            if (object instanceof realm.Date) {\n                return new Constructor(object.getTime());\n            }\n            // regexps\n            if (object instanceof realm.RegExp) {\n                clone = new Constructor(object.source, object.flags || getRegExpFlags(object));\n                clone.lastIndex = object.lastIndex;\n                return clone;\n            }\n            // maps\n            if (realm.Map && object instanceof realm.Map) {\n                cache.add(object);\n                clone = new Constructor();\n                object.forEach(function (value, key) {\n                    clone.set(key, handleCopy(value, cache));\n                });\n                return clone;\n            }\n            // sets\n            if (realm.Set && object instanceof realm.Set) {\n                cache.add(object);\n                clone = new Constructor();\n                object.forEach(function (value) {\n                    clone.add(handleCopy(value, cache));\n                });\n                return clone;\n            }\n            // buffers (node-only)\n            if (realm.Buffer && realm.Buffer.isBuffer(object)) {\n                clone = realm.Buffer.allocUnsafe\n                    ? realm.Buffer.allocUnsafe(object.length)\n                    : new Constructor(object.length);\n                object.copy(clone);\n                return clone;\n            }\n            // arraybuffers / dataviews\n            if (realm.ArrayBuffer) {\n                // dataviews\n                if (realm.ArrayBuffer.isView(object)) {\n                    return new Constructor(object.buffer.slice(0));\n                }\n                // arraybuffers\n                if (object instanceof realm.ArrayBuffer) {\n                    return object.slice(0);\n                }\n            }\n            // if the object cannot / should not be cloned, don't\n            if (\n            // promise-like\n            (hasOwnProperty.call(object, 'then') && typeof object.then === 'function') ||\n                // errors\n                object instanceof Error ||\n                // weakmaps\n                (realm.WeakMap && object instanceof realm.WeakMap) ||\n                // weaksets\n                (realm.WeakSet && object instanceof realm.WeakSet)) {\n                return object;\n            }\n            cache.add(object);\n            // assume anything left is a custom constructor\n            return getObjectClone(object, realm, handleCopy, cache);\n        };\n        return handleCopy(object, createCache());\n    }\n}\nexports.installHook = installHook;\n//# sourceMappingURL=hook.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../app-backend-core/lib/hook.js\n");

/***/ }),

/***/ "../shared-utils/lib/env.js":
/*!**********************************!*\
  !*** ../shared-utils/lib/env.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initEnv = exports.keys = exports.isLinux = exports.isMac = exports.isWindows = exports.isFirefox = exports.isChrome = exports.target = exports.isBrowser = void 0;\nexports.isBrowser = typeof navigator !== 'undefined';\nexports.target = exports.isBrowser\n    ? window\n    : typeof __webpack_require__.g !== 'undefined'\n        ? __webpack_require__.g\n        : {};\nexports.isChrome = typeof exports.target.chrome !== 'undefined' && !!exports.target.chrome.devtools;\nexports.isFirefox = exports.isBrowser && navigator.userAgent.indexOf('Firefox') > -1;\nexports.isWindows = exports.isBrowser && navigator.platform.indexOf('Win') === 0;\nexports.isMac = exports.isBrowser && navigator.platform === 'MacIntel';\nexports.isLinux = exports.isBrowser && navigator.platform.indexOf('Linux') === 0;\nexports.keys = {\n    ctrl: exports.isMac ? '&#8984;' : 'Ctrl',\n    shift: 'Shift',\n    alt: exports.isMac ? '&#8997;' : 'Alt',\n    del: 'Del',\n    enter: 'Enter',\n    esc: 'Esc'\n};\nfunction initEnv(Vue) {\n    if (Vue.prototype.hasOwnProperty('$isChrome'))\n        { return; }\n    Object.defineProperties(Vue.prototype, {\n        $isChrome: { get: function () { return exports.isChrome; } },\n        $isFirefox: { get: function () { return exports.isFirefox; } },\n        $isWindows: { get: function () { return exports.isWindows; } },\n        $isMac: { get: function () { return exports.isMac; } },\n        $isLinux: { get: function () { return exports.isLinux; } },\n        $keys: { get: function () { return exports.keys; } }\n    });\n    if (exports.isWindows)\n        { document.body.classList.add('platform-windows'); }\n    if (exports.isMac)\n        { document.body.classList.add('platform-mac'); }\n    if (exports.isLinux)\n        { document.body.classList.add('platform-linux'); }\n}\nexports.initEnv = initEnv;\n//# sourceMappingURL=env.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvZW52LmpzP2U3NDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxlQUFlLEdBQUcsWUFBWSxHQUFHLGVBQWUsR0FBRyxhQUFhLEdBQUcsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsY0FBYyxHQUFHLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzFLLGlCQUFpQixHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsQ0FBQztBQUNyRCxjQUFjLEdBQUcsT0FBTyxDQUFDLFNBQVM7QUFDbEMsTUFBTSxNQUFNO0FBQ1osTUFBTSxPQUFPLHFCQUFNLEtBQUssV0FBVztBQUNuQyxVQUFVLHFCQUFNO0FBQ2hCLFVBQVUsRUFBRSxDQUFDO0FBQ2IsZ0JBQWdCLEdBQUcsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNwRyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pGLGFBQWEsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDO0FBQ3ZFLGVBQWUsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqRixZQUFZLEdBQUc7QUFDZixJQUFJLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxHQUFHLFNBQVMsR0FBRyxNQUFNO0FBQzVDLElBQUksS0FBSyxFQUFFLE9BQU87QUFDbEIsSUFBSSxHQUFHLEVBQUUsT0FBTyxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsS0FBSztBQUMxQyxJQUFJLEdBQUcsRUFBRSxLQUFLO0FBQ2QsSUFBSSxLQUFLLEVBQUUsT0FBTztBQUNsQixJQUFJLEdBQUcsRUFBRSxLQUFLO0FBQ2QsQ0FBQyxDQUFDO0FBQ0YsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQ3RCLElBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUM7QUFDakQsVUFBUSxTQUFPO0FBQ2YsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtBQUMzQyxRQUFRLFNBQVMsRUFBRSxFQUFFLEdBQUcsV0FBRSxZQUFNLE9BQU8sQ0FBQyxXQUFRLEVBQUU7QUFDbEQsUUFBUSxVQUFVLEVBQUUsRUFBRSxHQUFHLFdBQUUsWUFBTSxPQUFPLENBQUMsWUFBUyxFQUFFO0FBQ3BELFFBQVEsVUFBVSxFQUFFLEVBQUUsR0FBRyxXQUFFLFlBQU0sT0FBTyxDQUFDLFlBQVMsRUFBRTtBQUNwRCxRQUFRLE1BQU0sRUFBRSxFQUFFLEdBQUcsV0FBRSxZQUFNLE9BQU8sQ0FBQyxRQUFLLEVBQUU7QUFDNUMsUUFBUSxRQUFRLEVBQUUsRUFBRSxHQUFHLFdBQUUsWUFBTSxPQUFPLENBQUMsVUFBTyxFQUFFO0FBQ2hELFFBQVEsS0FBSyxFQUFFLEVBQUUsR0FBRyxXQUFFLFlBQU0sT0FBTyxDQUFDLE9BQUksRUFBRTtBQUMxQyxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksSUFBSSxPQUFPLENBQUMsU0FBUztBQUN6QixVQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFDO0FBQ3hELElBQUksSUFBSSxPQUFPLENBQUMsS0FBSztBQUNyQixVQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBQztBQUNwRCxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU87QUFDdkIsVUFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBQztBQUN0RCxDQUFDO0FBQ0QsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQiIsImZpbGUiOiIuLi9zaGFyZWQtdXRpbHMvbGliL2Vudi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbml0RW52ID0gZXhwb3J0cy5rZXlzID0gZXhwb3J0cy5pc0xpbnV4ID0gZXhwb3J0cy5pc01hYyA9IGV4cG9ydHMuaXNXaW5kb3dzID0gZXhwb3J0cy5pc0ZpcmVmb3ggPSBleHBvcnRzLmlzQ2hyb21lID0gZXhwb3J0cy50YXJnZXQgPSBleHBvcnRzLmlzQnJvd3NlciA9IHZvaWQgMDtcbmV4cG9ydHMuaXNCcm93c2VyID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnRzLnRhcmdldCA9IGV4cG9ydHMuaXNCcm93c2VyXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZ2xvYmFsXG4gICAgICAgIDoge307XG5leHBvcnRzLmlzQ2hyb21lID0gdHlwZW9mIGV4cG9ydHMudGFyZ2V0LmNocm9tZSAhPT0gJ3VuZGVmaW5lZCcgJiYgISFleHBvcnRzLnRhcmdldC5jaHJvbWUuZGV2dG9vbHM7XG5leHBvcnRzLmlzRmlyZWZveCA9IGV4cG9ydHMuaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTE7XG5leHBvcnRzLmlzV2luZG93cyA9IGV4cG9ydHMuaXNCcm93c2VyICYmIG5hdmlnYXRvci5wbGF0Zm9ybS5pbmRleE9mKCdXaW4nKSA9PT0gMDtcbmV4cG9ydHMuaXNNYWMgPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5leHBvcnRzLmlzTGludXggPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IucGxhdGZvcm0uaW5kZXhPZignTGludXgnKSA9PT0gMDtcbmV4cG9ydHMua2V5cyA9IHtcbiAgICBjdHJsOiBleHBvcnRzLmlzTWFjID8gJyYjODk4NDsnIDogJ0N0cmwnLFxuICAgIHNoaWZ0OiAnU2hpZnQnLFxuICAgIGFsdDogZXhwb3J0cy5pc01hYyA/ICcmIzg5OTc7JyA6ICdBbHQnLFxuICAgIGRlbDogJ0RlbCcsXG4gICAgZW50ZXI6ICdFbnRlcicsXG4gICAgZXNjOiAnRXNjJ1xufTtcbmZ1bmN0aW9uIGluaXRFbnYoVnVlKSB7XG4gICAgaWYgKFZ1ZS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJyRpc0Nocm9tZScpKVxuICAgICAgICByZXR1cm47XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVnVlLnByb3RvdHlwZSwge1xuICAgICAgICAkaXNDaHJvbWU6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzQ2hyb21lIH0sXG4gICAgICAgICRpc0ZpcmVmb3g6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzRmlyZWZveCB9LFxuICAgICAgICAkaXNXaW5kb3dzOiB7IGdldDogKCkgPT4gZXhwb3J0cy5pc1dpbmRvd3MgfSxcbiAgICAgICAgJGlzTWFjOiB7IGdldDogKCkgPT4gZXhwb3J0cy5pc01hYyB9LFxuICAgICAgICAkaXNMaW51eDogeyBnZXQ6ICgpID0+IGV4cG9ydHMuaXNMaW51eCB9LFxuICAgICAgICAka2V5czogeyBnZXQ6ICgpID0+IGV4cG9ydHMua2V5cyB9XG4gICAgfSk7XG4gICAgaWYgKGV4cG9ydHMuaXNXaW5kb3dzKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLXdpbmRvd3MnKTtcbiAgICBpZiAoZXhwb3J0cy5pc01hYylcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdwbGF0Zm9ybS1tYWMnKTtcbiAgICBpZiAoZXhwb3J0cy5pc0xpbnV4KVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLWxpbnV4Jyk7XG59XG5leHBvcnRzLmluaXRFbnYgPSBpbml0RW52O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared-utils/lib/env.js\n");

/***/ }),

/***/ "./src/hook.js":
/*!*********************!*\
  !*** ./src/hook.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _back_hook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @back/hook */ \"../app-backend-core/lib/hook.js\");\n/* harmony import */ var _utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @utils/env */ \"../shared-utils/lib/env.js\");\n\n\n\n(0,_back_hook__WEBPACK_IMPORTED_MODULE_0__.installHook)(_utils_env__WEBPACK_IMPORTED_MODULE_1__.target)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4vc3JjL2hvb2suanM/ODdjZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBd0M7QUFDTDtBQUNuQztBQUNBLHVEQUFXLENBQUMsOENBQU0sQ0FBQyIsImZpbGUiOiIuL3NyYy9ob29rLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5zdGFsbEhvb2sgfSBmcm9tICdAYmFjay9ob29rJ1xuaW1wb3J0IHsgdGFyZ2V0IH0gZnJvbSAnQHV0aWxzL2VudidcblxuaW5zdGFsbEhvb2sodGFyZ2V0KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/hook.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/hook.js");
/******/ 	
/******/ })()
;